{"version":3,"file":"mvc-framework.min.js","sources":["../../../../Core-Plex/distributement/core-plex.js","../../../../Recourse/distributement/recourse.js","../../../development/core/settings/index.js","../../../development/core/options/index.js","../../../development/core/index.js","../../../../Objecture/distributement/objecture.sans.core-plex.js","../../../node_modules/parsel-js/dist/parsel.js","../../../development/view/querySelector/index.js","../../../development/view/query/index.js","../../../development/view/index.js","../../../development/view/settings/index.js","../../../development/view/options/index.js","../../../development/routers/fetch/interfaces/response/events/index.js","../../../development/routers/fetch/fetchRoute/index.js","../../../development/routers/fetch/index.js","../../../development/routers/fetch/settings/index.js","../../../development/routers/fetch/options/index.js","../../../node_modules/path-to-regexp/dist/index.js","../../../development/routers/location/route/index.js","../../../development/routers/location/routeEvent/index.js","../../../development/routers/location/index.js","../../../development/routers/location/settings/index.js","../../../development/routers/location/options/index.js","../../../development/routers/socket/event/index.js","../../../development/routers/socket/messageAdapter/index.js","../../../development/routers/socket/index.js","../../../development/routers/socket/settings/index.js","../../../development/routers/socket/options/index.js","../../../development/control/index.js","../../../development/control/settings/index.js","../../../development/control/options/index.js","../../../../Objecture/distributement/objecture.js"],"sourcesContent":["const Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n};\nObject.values(Primitives);\nconst Objects = {\n  'object': Object,\n  'array': Array,\n};\nObject.values(Objects);\nconst Types = Object.assign({}, Primitives, Objects);\nObject.values(Types);\n[\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n];\n\nvar typeOf = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nconst defaultAccessor$1 = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n};\nvar Accessors = {\n  default: defaultAccessor$1};\n\nconst Options$2 = {\n  depth: 0,\n  maxDepth: 10,\n  accessors: [Accessors.default],\n  ancestors: [],\n};\nfunction propertyDirectory($object, $options) {\n  const _propertyDirectory = [];\n  const options = Object.assign({}, Options$2, $options, {\n    ancestors: [].concat($options.ancestors)\n  });\n  options.depth++;\n  if(options.depth > options.maxDepth) { return _propertyDirectory }\n  iterateAccessors: \n  for(const $accessor of options.accessors) {\n    const accessor = $accessor.bind($object);\n    const object = accessor($object);\n    if(!object) { continue iterateAccessors }\n    if(!options.ancestors.includes(object)) { options.ancestors.unshift(object); }\n    for(const [$key, $value] of Object.entries(object)) {\n      if(!options.values) { _propertyDirectory.push($key); }\n      else if(options.values) { _propertyDirectory.push([$key, $value]); }\n      if(\n        typeof $value === 'object' &&\n        $value !== null &&\n        !Object.is($value, object) && \n        !options.ancestors.includes($value)\n      ) {\n        const subtargets = propertyDirectory($value, options);\n        if(!options.values) {\n          for(const $subtarget of subtargets) {\n            const path = [$key, $subtarget].join('.');\n            _propertyDirectory.push(path);\n          }\n        }\n        else if(options.values) {\n          for(const [$subtargetKey, $subtarget] of subtargets) {\n            const path = [$key, $subtargetKey].join('.');\n            _propertyDirectory.push([path, $subtarget]);\n          }\n        }\n      }\n    }\n  }\n  return _propertyDirectory\n}\n\nfunction recursiveAssign($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssign($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nfunction expandEvents($propEvents, $scopeKey = ':scope') {\n  if(\n    Array.isArray($propEvents) ||\n    $propEvents === undefined\n  ) { return $propEvents }\n  const propEvents = [];\n  for(const [\n    $propEventSettings, $propEventListener\n  ] of Object.entries($propEvents)) {\n    const propEventSettings = $propEventSettings.trim().split(' ');\n    let path, type, listener;\n    if(propEventSettings.length === 1) {\n      path = $scopeKey;\n      type = propEventSettings[0];\n    }\n    else if(propEventSettings.length > 1) {\n      path = propEventSettings[0];\n      type = propEventSettings[1];\n    }\n    if(Array.isArray($propEventListener)) {\n      listener = $propEventListener[0];\n      $propEventListener[1];\n    }\n    else {\n      listener = $propEventListener;\n    }\n    const propEvent = {\n      type,\n      path,\n      listener,\n      enable: false,\n    };\n    propEvents.push(propEvent);\n  }\n  return propEvents\n}\n\nconst defaultAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n};\nvar accessors = {\n  default: defaultAccessor};\n\nvar Settings$1 = ($settings = {}) => {\n  const Settings = {\n    events: {},\n    enableEvents: false,\n    propertyDirectory: {\n      accessors: [accessors.default],\n      scopeKey: ':scope', \n      maxDepth: 10,\n    },\n    propertyDefinitions: {\n      getEvents: 'getEvents',\n      addEvents: 'addEvents',\n      removeEvents: 'removeEvents',\n      enableEvents: 'enableEvents',\n      disableEvents: 'disableEvents',\n      reenableEvents: 'reenableEvents',\n      emitEvents: 'emitEvents',\n    },\n  };\n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'propertyDefinitions':\n      case 'propertyDirectory':\n        Settings[$settingKey] = Object.assign(Settings[$settingKey], $settingValue);\n        break\n      default: \n        Settings[$settingKey] = $settingValue;\n        break\n    }\n  }\n  return Settings\n};\n\nfunction handleNoCommaBraces(span) {\n    if (span.length < 3) {\n        return \"{\" + span + \"}\";\n    }\n    var separatorI = -1;\n    for (var i = 2; i < span.length; i++) {\n        if (span[i] === '.' && span[i - 1] === '.' && (i < 2 || span[i - 2] !== '\\\\')) {\n            if (separatorI > -1) {\n                return \"{\" + span + \"}\";\n            }\n            separatorI = i - 1;\n        }\n    }\n    if (separatorI > -1) {\n        var rangeStart = span.substr(0, separatorI);\n        var rangeEnd = span.substr(separatorI + 2);\n        if (rangeStart.length > 0 && rangeEnd.length > 0) {\n            return \"[\" + span.substr(0, separatorI) + \"-\" + span.substr(separatorI + 2) + \"]\";\n        }\n    }\n    return \"{\" + span + \"}\";\n}\nfunction expand(pattern) {\n    if (typeof pattern !== 'string') {\n        throw new TypeError(\"A pattern must be a string, but \" + typeof pattern + \" given\");\n    }\n    var scanning = false;\n    var openingBraces = 0;\n    var closingBraces = 0;\n    var handledUntil = -1;\n    var results = [''];\n    var alternatives = [];\n    var span;\n    for (var i = 0; i < pattern.length; i++) {\n        var char = pattern[i];\n        if (char === '\\\\') {\n            i++;\n            continue;\n        }\n        if (char === '{') {\n            if (scanning) {\n                openingBraces++;\n            }\n            else if (i > handledUntil && !openingBraces) {\n                span = pattern.substring(handledUntil + 1, i);\n                for (var j = 0; j < results.length; j++) {\n                    results[j] += span;\n                }\n                alternatives = [];\n                handledUntil = i;\n                scanning = true;\n                openingBraces++;\n            }\n            else {\n                openingBraces--;\n            }\n        }\n        else if (char === '}') {\n            if (scanning) {\n                closingBraces++;\n            }\n            else if (closingBraces === 1) {\n                span = pattern.substring(handledUntil + 1, i);\n                if (alternatives.length > 0) {\n                    var newResults = [];\n                    alternatives.push(expand(span));\n                    for (var j = 0; j < results.length; j++) {\n                        for (var k = 0; k < alternatives.length; k++) {\n                            for (var l = 0; l < alternatives[k].length; l++) {\n                                newResults.push(results[j] + alternatives[k][l]);\n                            }\n                        }\n                    }\n                    results = newResults;\n                }\n                else {\n                    span = handleNoCommaBraces(span);\n                    for (var j = 0; j < results.length; j++) {\n                        results[j] += span;\n                    }\n                }\n                handledUntil = i;\n                closingBraces--;\n            }\n            else {\n                closingBraces--;\n            }\n        }\n        else if (!scanning && char === ',' && closingBraces - openingBraces === 1) {\n            span = pattern.substring(handledUntil + 1, i);\n            alternatives.push(expand(span));\n            handledUntil = i;\n        }\n        if (scanning && (closingBraces === openingBraces || i === pattern.length - 1)) {\n            scanning = false;\n            i = handledUntil - 1;\n        }\n    }\n    if (handledUntil === -1) {\n        return [pattern];\n    }\n    var unhandledFrom = pattern[handledUntil] === '{' ? handledUntil : handledUntil + 1;\n    if (unhandledFrom < pattern.length) {\n        span = pattern.substr(unhandledFrom);\n        for (var j = 0; j < results.length; j++) {\n            results[j] += span;\n        }\n    }\n    return results;\n}\n\nfunction negate(pattern, options) {\n    var supportNegation = options['!'] !== false;\n    var supportParens = options['()'] !== false;\n    var isNegated = false;\n    var i;\n    if (supportNegation) {\n        for (i = 0; i < pattern.length && pattern[i] === '!'; i++) {\n            if (supportParens && pattern[i + 1] === '(') {\n                i--;\n                break;\n            }\n            isNegated = !isNegated;\n        }\n        if (i > 0) {\n            pattern = pattern.substr(i);\n        }\n    }\n    return { pattern: pattern, isNegated: isNegated };\n}\n\nfunction escapeRegExpChar(char) { if (char === '-' ||\n    char === '^' ||\n    char === '$' ||\n    char === '+' ||\n    char === '.' ||\n    char === '(' ||\n    char === ')' ||\n    char === '|' ||\n    char === '[' ||\n    char === ']' ||\n    char === '{' ||\n    char === '}' ||\n    char === '*' ||\n    char === '?' ||\n    char === '\\\\') {\n    return \"\\\\\" + char;\n}\nelse {\n    return char;\n} }\nfunction escapeRegExpString(str) {\n    var result = '';\n    for (var i = 0; i < str.length; i++) {\n        result += escapeRegExpChar(str[i]);\n    }\n    return result;\n}\n\nfunction Pattern(source, options, excludeDot) {\n    var separator = typeof options.separator === 'undefined' ? true : options.separator;\n    var separatorSplitter = '';\n    var separatorMatcher = '';\n    var wildcard = '.';\n    if (separator === true) {\n        separatorSplitter = '/';\n        separatorMatcher = '[/\\\\\\\\]';\n        wildcard = '[^/\\\\\\\\]';\n    }\n    else if (separator) {\n        separatorSplitter = separator;\n        separatorMatcher = escapeRegExpString(separatorSplitter);\n        if (separatorMatcher.length > 1) {\n            separatorMatcher = \"(?:\" + separatorMatcher + \")\";\n            wildcard = \"((?!\" + separatorMatcher + \").)\";\n        }\n        else {\n            wildcard = \"[^\" + separatorMatcher + \"]\";\n        }\n    }\n    else {\n        wildcard = '.';\n    }\n    var requiredSeparator = separator ? separatorMatcher + \"+?\" : '';\n    var optionalSeparator = separator ? separatorMatcher + \"*?\" : '';\n    var segments = separator ? source.split(separatorSplitter) : [source];\n    var support = {\n        qMark: options['?'] !== false,\n        star: options['*'] !== false,\n        globstar: separator && options['**'] !== false,\n        brackets: options['[]'] !== false,\n        extglobs: options['()'] !== false,\n        excludeDot: excludeDot && options.excludeDot !== false,\n    };\n    return {\n        source: source,\n        segments: segments,\n        options: options,\n        separator: separator,\n        separatorSplitter: separatorSplitter,\n        separatorMatcher: separatorMatcher,\n        optionalSeparator: optionalSeparator,\n        requiredSeparator: requiredSeparator,\n        wildcard: wildcard,\n        support: support,\n    };\n}\nfunction Segment(source, pattern, isFirst, isLast) { return {\n    source: source,\n    isFirst: isFirst,\n    isLast: isLast,\n    end: source.length - 1,\n}; }\nfunction Result() {\nreturn {\n    match: '',\n    unmatch: '',\n    useUnmatch: false,\n}; }\nfunction State(pattern, segment, result) { return {\n    pattern: pattern,\n    segment: segment,\n    result: result,\n    openingBracket: segment.end + 1,\n    closingBracket: -1,\n    openingParens: 0,\n    closingParens: 0,\n    parensHandledUntil: -1,\n    extglobModifiers: [],\n    scanningForParens: false,\n    escapeChar: false,\n    addToMatch: true,\n    addToUnmatch: pattern.support.extglobs,\n    dotHandled: false,\n    i: -1,\n    char: '',\n    nextChar: '',\n}; }\n\nvar EXCLUDE_DOT_PATTERN = '(?!\\\\.)';\nfunction add(state, addition, excludeDot) {\n    if (state.addToUnmatch) {\n        state.result.unmatch += addition;\n    }\n    if (state.addToMatch) {\n        if (excludeDot && !state.dotHandled) {\n            addition = EXCLUDE_DOT_PATTERN + addition;\n        }\n        state.dotHandled = true;\n        state.result.match += addition;\n    }\n    return state.result;\n}\nfunction convertSegment(pattern, segment, result) {\n    var support = pattern.support;\n    var state = State(pattern, segment, result);\n    var separatorMatcher = segment.isLast\n        ? pattern.optionalSeparator\n        : pattern.requiredSeparator;\n    if (!support.excludeDot) {\n        state.dotHandled = true;\n    }\n    if (segment.end === -1) {\n        return segment.isLast && !segment.isFirst ? result : add(state, separatorMatcher);\n    }\n    if (support.globstar && segment.source === '**') {\n        var prefix = !state.dotHandled ? EXCLUDE_DOT_PATTERN : '';\n        var globstarSegment = prefix + pattern.wildcard + \"*?\" + separatorMatcher;\n        return add(state, \"(?:\" + globstarSegment + \")*?\");\n    }\n    while (++state.i <= segment.end) {\n        state.char = state.segment.source[state.i];\n        state.nextChar = state.i < segment.end ? segment.source[state.i + 1] : '';\n        if (state.char === '\\\\') {\n            if (state.i < state.segment.end) {\n                state.escapeChar = true;\n                continue;\n            }\n            else {\n                state.char = '';\n            }\n        }\n        var pattern = state.pattern, segment = state.segment, char = state.char, i = state.i;\n        if (pattern.support.brackets && !state.scanningForParens) {\n            if (i > state.openingBracket && i <= state.closingBracket) {\n                if (state.escapeChar) {\n                    add(state, escapeRegExpChar(char));\n                }\n                else if (i === state.closingBracket) {\n                    add(state, ']');\n                    state.openingBracket = segment.source.length;\n                }\n                else if (char === '-' && i === state.closingBracket - 1) {\n                    add(state, '\\\\-');\n                }\n                else if (char === '!' && i === state.openingBracket + 1) {\n                    add(state, '^');\n                }\n                else if (char === ']') {\n                    add(state, '\\\\]');\n                }\n                else {\n                    add(state, char);\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (i > state.openingBracket) {\n                if (char === ']' &&\n                    !state.escapeChar &&\n                    i > state.openingBracket + 1 &&\n                    i > state.closingBracket) {\n                    state.closingBracket = i;\n                    state.i = state.openingBracket;\n                    if (pattern.separator) {\n                        add(state, \"(?!\" + pattern.separatorMatcher + \")[\", true);\n                    }\n                    else {\n                        add(state, '[', true);\n                    }\n                }\n                else if (i === segment.end) {\n                    add(state, '\\\\[');\n                    state.i = state.openingBracket;\n                    state.openingBracket = segment.source.length;\n                    state.closingBracket = segment.source.length;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (char === '[' &&\n                !state.escapeChar &&\n                i > state.closingBracket &&\n                i < segment.end) {\n                state.openingBracket = i;\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        if (state.pattern.support.extglobs) {\n            var extglobModifiers = state.extglobModifiers, char = state.char, nextChar = state.nextChar, i = state.i;\n            if (nextChar === '(' &&\n                !state.escapeChar &&\n                (char === '@' || char === '?' || char === '*' || char === '+' || char === '!')) {\n                if (state.scanningForParens) {\n                    state.openingParens++;\n                }\n                else if (i > state.parensHandledUntil && !state.closingParens) {\n                    state.parensHandledUntil = i;\n                    state.scanningForParens = true;\n                    state.openingParens++;\n                }\n                else if (state.closingParens >= state.openingParens) {\n                    if (char === '!') {\n                        state.addToMatch = true;\n                        state.addToUnmatch = false;\n                        add(state, state.pattern.wildcard + \"*?\", true);\n                        state.addToMatch = false;\n                        state.addToUnmatch = true;\n                        state.result.useUnmatch = true;\n                    }\n                    extglobModifiers.push(char);\n                    add(state, '(?:', true);\n                    state.openingParens--;\n                    state.i++;\n                    continue;\n                }\n                else {\n                    state.openingParens--;\n                }\n            }\n            else if (char === ')' && !state.escapeChar) {\n                if (state.scanningForParens) {\n                    state.closingParens++;\n                }\n                else if (extglobModifiers.length) {\n                    var modifier_1 = extglobModifiers.pop();\n                    if (modifier_1 === '!' && extglobModifiers.indexOf('!') !== -1) {\n                        throw new Error(\"Nested negated extglobs aren't supported\");\n                    }\n                    modifier_1 = modifier_1 === '!' || modifier_1 === '@' ? '' : modifier_1;\n                    add(state, \")\" + modifier_1);\n                    state.addToMatch = true;\n                    state.addToUnmatch = true;\n                    state.closingParens--;\n                    continue;\n                }\n            }\n            else if (char === '|' && state.closingParens &&\n                !state.scanningForParens &&\n                !state.escapeChar) {\n                add(state, '|');\n                continue;\n            }\n            if (state.scanningForParens) {\n                if (state.closingParens === state.openingParens || i === state.segment.end) {\n                    state.scanningForParens = false;\n                    state.i = state.parensHandledUntil - 1;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        var pattern = state.pattern;\n        var support = pattern.support;\n        if (!state.escapeChar && support.star && state.char === '*') {\n            if (state.i === state.segment.end || state.nextChar !== '*') {\n                add(state, pattern.wildcard + \"*?\", true);\n            }\n        }\n        else if (!state.escapeChar && support.qMark && state.char === '?') {\n            add(state, pattern.wildcard, true);\n        }\n        else {\n            add(state, escapeRegExpChar(state.char));\n        }\n        state.escapeChar = false;\n    }\n    return add(state, separatorMatcher);\n}\nfunction convert(source, options, excludeDot) {\n    var pattern = Pattern(source, options, excludeDot);\n    var result = Result();\n    var segments = pattern.segments;\n    for (var i = 0; i < segments.length; i++) {\n        var segment = Segment(segments[i], pattern, i === 0, i === segments.length - 1);\n        convertSegment(pattern, segment, result);\n    }\n    if (result.useUnmatch) {\n        return \"(?!^\" + result.unmatch + \"$)\" + result.match;\n    }\n    else {\n        return result.match;\n    }\n}\n\nfunction flatMap(array, predicate) {\n    var results = [];\n    for (var i = 0; i < array.length; i++) {\n        var mappedValue = predicate(array[i]);\n        for (var j = 0; j < mappedValue.length; j++) {\n            results.push(mappedValue[j]);\n        }\n    }\n    return results;\n}\nfunction compile(patterns, options) {\n    patterns = Array.isArray(patterns) ? patterns : [patterns];\n    if (options['{}'] !== false) {\n        patterns = flatMap(patterns, expand);\n    }\n    var positiveResults = [];\n    var negativeResults = [];\n    var result = '';\n    for (var i = 0; i < patterns.length; i++) {\n        var negatedPattern = negate(patterns[i], options);\n        var convertedPattern = convert(negatedPattern.pattern, options, !negatedPattern.isNegated);\n        if (negatedPattern.isNegated) {\n            negativeResults.push(convertedPattern);\n        }\n        else {\n            positiveResults.push(convertedPattern);\n        }\n    }\n    if (negativeResults.length) {\n        result = \"(?!(?:\" + negativeResults.join('|') + \")$)\";\n    }\n    if (positiveResults.length > 1) {\n        result += \"(?:\" + positiveResults.join('|') + \")\";\n    }\n    else if (positiveResults.length === 1) {\n        result += positiveResults[0];\n    }\n    else if (result.length) {\n        result += convert('**', options, true);\n    }\n    return \"^\" + result + \"$\";\n}\nfunction isMatch(regexp, sample) { if (typeof sample !== 'string') {\n    throw new TypeError(\"Sample must be a string, but \" + typeof sample + \" given\");\n} return regexp.test(sample); }\n/**\n * Compiles one or more glob patterns into a RegExp and returns an isMatch function.\n * The isMatch function takes a sample string as its only argument and returns true\n * if the string matches the pattern(s).\n *\n * ```js\n * outmatch('src/*.js')('src/index.js') //=> true\n * ```\n *\n * ```js\n * const isMatch = outmatch('*.example.com', '.')\n * isMatch('foo.example.com') //=> true\n * isMatch('foo.bar.com') //=> false\n * ```\n */\nfunction outmatch(pattern, options) {\n    if (typeof pattern !== 'string' && !Array.isArray(pattern)) {\n        throw new TypeError(\"The first argument must be a single pattern string or an array of patterns, but \" + typeof pattern + \" given\");\n    }\n    if (typeof options === 'string' || typeof options === 'boolean') {\n        options = { separator: options };\n    }\n    if (arguments.length === 2 &&\n        !(typeof options === 'undefined' ||\n            (typeof options === 'object' && options !== null && !Array.isArray(options)))) {\n        throw new TypeError(\"The second argument must be an options object or a string/boolean separator, but \" + typeof options + \" given\");\n    }\n    options = options || {};\n    if (options.separator === '\\\\') {\n        throw new Error('\\\\ is not a valid separator');\n    }\n    var regexpPattern = compile(pattern, options);\n    var regexp = new RegExp(regexpPattern, options.flags);\n    var fn = isMatch.bind(null, regexp);\n    fn.options = options;\n    fn.pattern = pattern;\n    fn.regexp = regexp;\n    return fn;\n}\n\nvar Settings = ($settings = {}) => {\n  const Settings = {\n    enable: false,\n    assign: 'addEventListener', deassign: 'removeEventListener', transsign: 'dispatchEvent',\n    bindListener: true,\n    errorLog: false,\n    methods: {\n      assign: {\n        addEventListener: function addEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition;\n          const { options, useCapture } = settings;\n          return $target['addEventListener'](type, listener, options || useCapture)\n        },\n        on: function on($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['on'](type, listener)\n        },\n        once: function once($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['once'](type, listener)\n        },\n      }, \n      deassign: {\n        removeEventListener: function removeEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition;\n          const { options, useCapture } = settings;\n          return $target['removeEventListener'](type, listener, options || useCapture)\n        },\n        off: function off($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['off'](type, listener)\n        },\n      },\n      transsign: {\n        dispatchEvent: function dispatchEvent($eventDefinition, $target, $event) {\n          return $target['dispatchEvent']($event)\n        },\n        emit: function emit($eventDefinition, $target, $type, ...$arguments) {\n          return $target['emit']($type, ...$arguments)\n        },\n      },\n    },\n  };\n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'methods': \n        Settings[$settingKey] = recursiveAssign(Settings[$settingKey], $settingValue);\n        break\n      case 'enableEvents': break\n      default: \n        Settings[$settingKey] = $settingValue;\n        break\n    }\n  }\n  return Settings\n};\n\nclass EventDefinition {\n  #context\n  #enable = false\n  #nontranssigned = []\n  #_targets = []\n  #_assign\n  #_deassign\n  #_transsign\n  constructor($settings, $context) { \n    if(!$settings || !$context) { return this }\n    const settings = Settings($settings);\n    const assigned = [];\n    const deassigned = [];\n    const transsigned = [];\n    Object.defineProperties(this, {\n      'settings': { value: settings },\n      'path': { value: settings.path },\n      'type': { value: settings.type },\n      'assigned': { value: assigned },\n      'deassigned': { value: deassigned },\n      'transsigned': { value: transsigned },\n      'listener':  { configurable: true, get() {\n        const typeOfListener = typeOf(settings.listener);\n        let listener; \n        if(typeOfListener === 'string') {\n          let listenerTarget = $context;\n          iterateListenerPathKeys: \n          for(const $pathKey of settings.listener.split('.')) {\n            const value = listenerTarget[$pathKey];\n            if(value !== undefined) { listenerTarget = listenerTarget[$pathKey]; }\n            else { break iterateListenerPathKeys }\n          }\n          if(typeOf(listenerTarget) === 'function') {\n            listener = listenerTarget;\n          }\n        }\n        else { listener = settings.listener; }\n        if(settings.bindListener === true) {\n          listener = listener.bind(this.#context);\n        }\n        Object.defineProperty(this, 'listener', { value: listener });\n        return listener\n      } }\n    });\n    this.#context = $context;\n    this.enable = this.settings.enable;\n  }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    const targets = this.#targets;\n    const assigned = this.assigned;\n    const deassigned = this.deassigned;\n    assigned.length = 0;\n    deassigned.length = 0;\n    iterateTargetElements: \n    for(const $targetElement of targets) {\n      const { path, target, enable } = $targetElement;\n      this.settings;\n      if(enable === $enable) { continue iterateTargetElements }\n      if($enable === true) {\n        try {\n          this.#assign(target);\n          $targetElement.enable = $enable;\n          assigned.push($targetElement);\n          \n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err); } }\n      }\n      else if($enable === false) {\n        try {\n          this.#deassign(target);\n          $targetElement.enable = $enable;\n          deassigned.push($targetElement);\n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err); } }\n      }\n    }\n    this.#enable = $enable;\n  }\n  get #target() { return this.settings.target }\n  get #targets() {\n    const pretargets = this.#_targets;\n    const targets = [];\n    if(this.#target) {\n      for(const $target of [].concat(this.#target)) {\n        const pretargetElement = pretargets.find(\n          ($pretarget) => $pretarget?.path === this.path\n        );\n        if(pretargetElement !== undefined) {\n          targets.push(pretargetElement);\n        }\n        else if(pretargetElement === undefined) {ptargets.push({\n            path: this.path,\n            target: $target,\n            enable: false,\n          });\n        }\n      }\n    }\n    else if(typeOf(this.path) === 'string') {\n      const targetPaths = [];\n      if(this.path === this.#scopeKey) {\n        const targetElement = {\n          path: this.path,\n          target: this.#context,\n          enable: false,\n        };\n        targets.push(targetElement);\n      }\n      else {\n        if(this.settings.propertyDirectory) {\n          const propertyDirectory = this.#propertyDirectory;\n          const propertyPathMatcher = outmatch(this.path, {\n            separator: '.',\n          });\n          for(const [$propertyPath, $propertyValue] of propertyDirectory) {\n            const propertyPathMatch = propertyPathMatcher($propertyPath);\n            if(propertyPathMatch === true) { targetPaths.push([$propertyPath, $propertyValue]); }\n          }\n          if(this.path.charAt(0) === '*') {\n            targetPaths.unshift([this.#scopeKey, this.#context]);\n          }\n        }\n        else {\n          targetPaths.push(this.path);\n        }\n        for(const [$targetPath, $targetValue] of targetPaths) {\n          const pretargetElement = pretargets.find(\n            ($pretarget) => $pretarget.path === $targetPath\n          );\n          let target = $targetValue;\n          let targetElement;\n          if(target !== undefined) {\n            if(target === pretargetElement?.target) {\n              targetElement = pretargetElement;\n            }\n            else if(typeof target === 'object') {\n              targetElement = {\n                path: $targetPath,\n                target: target,\n                enable: false,\n              };\n            }\n          }\n          if(targetElement !== undefined) { targets.push(targetElement); }\n        }\n      }\n    }\n    this.#_targets = targets;\n    return this.#_targets\n  }\n  get #scopeKey() { return this.settings.propertyDirectory.scopeKey }\n  get #assign() {\n    if(this.#_assign !== undefined) { return this.#_assign }\n    this.#_assign = this.settings.methods.assign[this.settings.assign].bind(null, this);\n    return this.#_assign\n  }\n  get #deassign() {\n    if(this.#_deassign !== undefined) { return this.#_deassign }\n    this.#_deassign = this.settings.methods.deassign[this.settings.deassign].bind(null, this);\n    return this.#_deassign\n  }\n  get #transsign() {\n    if(this.#_transsign !== undefined) { return this.#_transsign }\n    this.#_transsign = this.settings.methods.transsign[this.settings.transsign].bind(null, this);\n    return this.#_transsign\n  }\n  get #propertyDirectory() {\n    if(!this.settings.propertyDirectory) { return null }\n    const propertyDirectorySettings = Object.assign(this.settings.propertyDirectory, { values: true });\n    return propertyDirectory(this.#context, propertyDirectorySettings)\n  }\n  emit() {\n    const targets = this.#targets;\n    const transsigned = this.transsigned;\n    const nontranssigned = this.#nontranssigned;\n    transsigned.length = 0;\n    nontranssigned.length = 0;\n    for(const $targetElement of targets) {\n      const { target } = $targetElement;\n      try {\n        this.#transsign(target, ...arguments);\n        transsigned.push($targetElement);\n      }\n      catch($err) { nontranssigned.push($targetElement); }\n    }\n    return this\n  }\n}\n\nclass Core extends EventTarget {\n  static implement = function ($target, $settings) {\n    if(!$target || !$settings) { return undefined }\n    const settings = Settings$1($settings);\n    const events = [];\n    Object.defineProperties($target, {\n      [settings.propertyDefinitions.getEvents]: {\n        enumerable: false, writable: false, \n        value: function getEvents() {\n          if(!arguments[0]) { return events }\n          const getEvents = [];\n          const $filterEvents = [].concat(arguments[0]);\n          for(const $filterEvent of $filterEvents) {\n            for(const $event of events) {\n              let match;\n              iterateEventFilterProperties: \n              for(const [\n                $filterEventPropertyKey, $filterEventPropertyValue\n              ] of Object.entries($filterEvent)) {\n                let eventFilterMatch;\n                if($filterEventPropertyKey === 'listener') {\n                  eventFilterMatch = (\n                    $event.settings[$filterEventPropertyKey] === $filterEventPropertyValue\n                  );\n                }\n                else {\n                  eventFilterMatch = (\n                    $event[$filterEventPropertyKey] === $filterEventPropertyValue\n                  );\n                }\n                if(match !== false) { match = eventFilterMatch; }\n                else { break iterateEventFilterProperties }\n              }\n              if(match === true) { getEvents.push($event); }\n            }\n          }\n          return getEvents\n        }\n      },\n      [settings.propertyDefinitions.addEvents]: {\n        enumerable: false, writable: false, \n        value: function addEvents() {\n          if(!arguments.length) { return $target }\n          let $addEvents = expandEvents(arguments[0], settings.propertyDirectory.scopeKey);\n          let $enableEvents = arguments[1] || false;\n          for(let $addEvent of $addEvents) {\n            const event = {};\n            for(const $settingKey of [\n              'assign', 'deassign', 'transsign', 'propertyDirectory', 'bindListener'\n            ]) {\n              const settingValue = settings[$settingKey];\n              if(settingValue !== undefined) { event[$settingKey] = settingValue; }\n            }\n            recursiveAssign(event, $addEvent);\n            const eventDefinition = new EventDefinition(event, $target);\n            if($enableEvents) { eventDefinition.enable = true; }\n            events.push(eventDefinition);\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.removeEvents]: {\n        enumerable: false, writable: false, \n        value: function removeEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          let eventsIndex = events.length - 1;\n          while(eventsIndex > -1) {\n            const event = events[eventsIndex];\n            if($events.includes(event)) {\n              event.enable = false;\n              events.splice(eventsIndex, 1);\n            }\n            eventsIndex--;\n          }\n          return $target\n        }\n      },\n      [settings.propertyDefinitions.enableEvents]: {\n        enumerable: false, writable: false, \n        value: function enableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          for(const $event of $events) { $event.enable = true; }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.disableEvents]: {\n        enumerable: false, writable: false, \n        value: function disableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          for(const $event of $events) { $event.enable = false; }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.reenableEvents]: {\n        enumerable: false, writable: false, \n        value: function reenableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          for(const $event of $events) {\n            $event.enable = false;\n            $event.enable = true;\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.emitEvents]: {\n        enumerable: false, writable: false, \n        value: function emitEvents($filterEvents, ...$eventParameters) {\n          const $events = $target[settings.propertyDefinitions.getEvents]($filterEvents);\n          for(const $event of $events) {\n            $event.emit(...$eventParameters);\n          }\n          return $target\n        },\n      },\n    });\n    if(settings.events) { $target[settings.propertyDefinitions.addEvents](settings.events); }\n    if(settings.enableEvents === true) { $target[settings.propertyDefinitions.enableEvents](); }\n    return $target\n  }\n  constructor($settings = {}) {\n    super();\n    return Core.implement(this, $settings)\n  }\n}\n\nexport { Core as default };\n//# sourceMappingURL=core-plex.js.map\n","const Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n};\nconst PrimitiveKeys = Object.keys(Primitives);\nconst PrimitiveValues = Object.values(Primitives);\nconst Objects = {\n  'object': Object,\n  'array': Array,\n};\nconst ObjectKeys = Object.keys(Objects);\nconst ObjectValues = Object.values(Objects);\nconst Types = Object.assign({}, Primitives, Objects);\nconst TypeKeys = Object.keys(Types);\nconst TypeValues = Object.values(Types);\nconst TypeMethods = [\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n];\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ObjectKeys: ObjectKeys,\n  ObjectValues: ObjectValues,\n  Objects: Objects,\n  PrimitiveKeys: PrimitiveKeys,\n  PrimitiveValues: PrimitiveValues,\n  Primitives: Primitives,\n  TypeKeys: TypeKeys,\n  TypeMethods: TypeMethods,\n  TypeValues: TypeValues,\n  Types: Types\n});\n\nvar typeOf = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nfunction typedObjectLiteral($value) {\n  let _typedObjectLiteral;\n  const typeOfValue = typeOf($value);\n  if(typeOfValue === 'string') {\n    const value = $value.toLowerCase();\n    if(value === 'object') { _typedObjectLiteral = {}; }\n    else if(value === 'array') { _typedObjectLiteral = []; }\n  }\n  else  {\n    if(typeOfValue === 'object') { _typedObjectLiteral = {}; }\n    else if(typeOfValue === 'array') { _typedObjectLiteral = []; }\n  }\n  return _typedObjectLiteral\n}\n\nvar regularExpressions = {\n  quotationEscape: /\\.(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,\n};\n\nfunction get($path, $source) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n  const key = subpaths.pop();\n  let subtarget = $source;\n  for(const $subpath of subpaths) { subtarget = subtarget[$subpath]; }\n  return subtarget[key]\n}\nfunction set($path, $source) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n  const key = subpaths.pop();\n  const target = (key && !isNaN(key)) ? [] : {};\n  let subtarget = target;\n  let subpathIndex = 0;\n  while(subpathIndex < subpaths.length - 2) {\n    const $subpath = keypaths[subpathIndex];\n    if(isNaN($subpath)) { subtarget[$subpath] = {}; }\n    else { subtarget[$subpath] = {}; }\n    subtarget = subtarget[$subpath];\n    subpathIndex++;\n  }\n  subtarget[key] = $source;\n  return target\n}\n\nconst ValidPropertyTypes = ['string', 'function'];\nfunction expandTree($source, $property) {\n  const typeOfProperty = typeOf($property);\n  const typeOfSource = typeOf($source);\n  if(\n    !ValidPropertyTypes.includes(typeOfProperty) ||\n    !ObjectKeys.includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source);\n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    const sourceValue = (\n      ObjectKeys.includes(typeOf($sourceValue))\n    ) ? expandTree($sourceValue, $property) : $sourceValue;\n    if(typeOfProperty === ValidPropertyTypes[0]) {\n      target[$sourceKey] = set($property, sourceValue);\n    }\n    else if(typeOfProperty === ValidPropertyTypes[1]) {\n      target[$sourceKey] = $property(sourceValue);\n    }\n  }\n  return target\n}\n\nfunction impandTree($source, $property) {\n  const typeOfProperty = typeOf($property);\n  const typeOfSource = typeOf($source);\n  if(\n    !['string', 'function'].includes(typeOfProperty) ||\n    !['array', 'object'].includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source);\n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = get($property, $sourceValue); }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue); }\n    if(target[$sourceKey] && typeof target[$sourceKey] === 'object') {\n      target[$sourceKey] = impandTree(target[$sourceKey], $property);\n    }\n  }\n  return target\n}\n\nvar isArrayLike = ($source) => {\n  let isArrayLike;\n  const typeOfSource = typeOf($source);\n  if(typeOfSource === 'array') { isArrayLike = true; }\n  else if(\n    typeOfSource === 'object' &&\n    Number.isInteger($source.length) && $source.length >= 0\n  ) {\n    iterateSourceKeys: \n    for(const $sourceKey of Object.keys(\n      Object.getOwnPropertyDescriptors($source)\n    )) {\n      if($sourceKey === 'length') { continue iterateSourceKeys }\n      isArrayLike = !isNaN($sourceKey);\n      if(!isArrayLike) { break iterateSourceKeys }\n    }\n  }\n  else { isArrayLike = false; }\n  return isArrayLike\n};\n\nconst defaultAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n};\nvar Accessors = {\n  default: defaultAccessor};\n\nconst Options$2 = {\n  depth: 0,\n  maxDepth: 10,\n  accessors: [Accessors.default],\n  ancestors: [],\n};\nfunction propertyDirectory($object, $options) {\n  const _propertyDirectory = [];\n  const options = Object.assign({}, Options$2, $options, {\n    ancestors: [].concat($options.ancestors)\n  });\n  options.depth++;\n  if(options.depth > options.maxDepth) { return _propertyDirectory }\n  iterateAccessors: \n  for(const $accessor of options.accessors) {\n    const accessor = $accessor.bind($object);\n    const object = accessor($object);\n    if(!object) { continue iterateAccessors }\n    if(!options.ancestors.includes(object)) { options.ancestors.unshift(object); }\n    for(const [$key, $value] of Object.entries(object)) {\n      if(!options.values) { _propertyDirectory.push($key); }\n      else if(options.values) { _propertyDirectory.push([$key, $value]); }\n      if(\n        typeof $value === 'object' &&\n        $value !== null &&\n        !Object.is($value, object) && \n        !options.ancestors.includes($value)\n      ) {\n        const subtargets = propertyDirectory($value, options);\n        if(!options.values) {\n          for(const $subtarget of subtargets) {\n            const path = [$key, $subtarget].join('.');\n            _propertyDirectory.push(path);\n          }\n        }\n        else if(options.values) {\n          for(const [$subtargetKey, $subtarget] of subtargets) {\n            const path = [$key, $subtargetKey].join('.');\n            _propertyDirectory.push([path, $subtarget]);\n          }\n        }\n      }\n    }\n  }\n  return _propertyDirectory\n}\n\nfunction recursiveAssign($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssign($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nfunction recursiveAssignConcat($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if( \n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssignConcat($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else if(\n        typeOfTargetPropertyValue === 'array' &&\n        typeOfSourcePropertyValue === 'array'\n      ) {\n        $target[$sourcePropertyKey] = $target[$sourcePropertyKey].concat($sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nvar Settings = {\n  depth: 0,\n  path: null,\n  ancestors: [],\n};\n\nvar Options$1 = {\n  delimiter: '.',\n  maxDepth: 10,\n  path: false,\n  retrocursion: false,\n  type: false,\n};\n\nfunction recursiveGetOwnPropertyDescriptor($properties, $propertyKey, $options) {\n  const options = Object.assign({}, Settings, Options$1, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  });\n  const propertyDescriptor = Object.getOwnPropertyDescriptor($properties, $propertyKey);\n  if(!options.ancestors.includes($properties)) { options.ancestors.unshift($properties); }\n  if(!options.retrocursion && options.ancestors.includes(propertyDescriptor.value)) { return }\n  if(options.path) {\n    options.path = (typeOf(options.path) === 'string') ? [options.path, $propertyKey].join(options.delimiter) : $propertyKey;\n    propertyDescriptor.path = options.path;\n  }\n  if(options.type) { propertyDescriptor.type = typeOf(propertyDescriptor.value); }\n  if(['array', 'object'].includes(typeOf(propertyDescriptor.value))) {\n    propertyDescriptor.value = recursiveGetOwnPropertyDescriptors(propertyDescriptor.value, options);\n  }\n  return propertyDescriptor\n}\n\nfunction recursiveGetOwnPropertyDescriptors($properties, $options) {\n  const propertyDescriptors = {};\n  const options = Object.assign({}, Settings, Options$1, $options);\n  if(options.depth >= options.maxDepth) { return propertyDescriptors }\n  else { options.depth++; }\n  for(const [$propertyKey, $propertyDescriptor] of Object.entries(Object.getOwnPropertyDescriptors($properties))) {\n    const propertyDescriptor = recursiveGetOwnPropertyDescriptor($properties, $propertyKey, options);\n    if(propertyDescriptor !== undefined) { propertyDescriptors[$propertyKey] = propertyDescriptor; }\n  }\n  return propertyDescriptors\n}\n\nvar Options = { typeCoercion: false };\n\nfunction recursiveDefineProperty($target, $propertyKey, $propertyDescriptor, $options) {\n  const propertyDescriptor = Object.assign({}, $propertyDescriptor);\n  const options = Object.assign({}, Options, $options);\n  const typeOfPropertyValue = typeOf(propertyDescriptor.value);\n  if(['array', 'object'].includes(typeOfPropertyValue)) {\n    const propertyValue = isArrayLike(Object.defineProperties(\n      typedObjectLiteral(typeOfPropertyValue), propertyDescriptor.value\n    )) ? [] : {};\n    propertyDescriptor.value = recursiveDefineProperties(propertyValue, propertyDescriptor.value, options);\n  }\n  else if(\n    options.typeCoercion && \n    Object.getOwnPropertyDescriptor(propertyDescriptor, 'type') !== undefined &&\n    !['undefined', 'null'].includes(typeOfPropertyValue)\n  ) {\n    propertyDescriptor.value = Primitives[propertyDescriptor.type](propertyDescriptor.value);\n  }\n  Object.defineProperty($target, $propertyKey, propertyDescriptor);\n  return $target\n}\n\nfunction recursiveDefineProperties($target, $propertyDescriptors, $options) {\n  const options = Object.assign({}, Options, $options);\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of Object.entries($propertyDescriptors)) {\n    recursiveDefineProperty($target, $propertyKey, $propertyDescriptor, options);\n  }\n  return $target\n}\n\nfunction recursiveFreeze($target) {\n  for(const [$propertyKey, $propertyValue] of Object.entries($target)) {\n    if(Object.is($propertyValue, $target)) { continue }\n    if($propertyValue && typeof $propertyValue === 'object') {\n      recursiveFreeze($propertyValue);\n    }\n  }\n  return Object.freeze($target)\n}\n\nexport { expandTree, impandTree, isArrayLike, propertyDirectory, recursiveAssign, recursiveAssignConcat, recursiveDefineProperties, recursiveDefineProperty, recursiveFreeze, recursiveGetOwnPropertyDescriptor, recursiveGetOwnPropertyDescriptors, regularExpressions, typeOf, typedObjectLiteral, index as variables };\n//# sourceMappingURL=recourse.js.map\n","export default ($settings) => Object.assign({}, $settings)","export default ($options) => Object.assign({\n  parent: null,\n  path: null,\n  enableEvents: true,\n  definition: null,\n  propertyClasses: [],\n}, $options)","import Core from 'core-plex'\nimport { typedObjectLiteral } from 'recourse'\nimport Settings from './settings/index.js'\nimport Options from './options/index.js'\nexport default class MVCFrameworkCore extends Core {\n  static propertyClasses = []\n  constructor($settings = {}, $options = {}) {\n    super(Object.assign({}, $options, {\n      propertyDirectory: {\n        accessors: [function objectAccessor($target, $property) {\n          if($property === undefined) { return $target }\n          else { return $target[$property] }\n        }, function mapAccessor($target, $property) {\n          if($target instanceof Map === true) {\n            if($property === undefined) { return Object.fromEntries($target) }\n            else { return $target.get($property) }\n          }\n        }, function objectureAccessor($target, $property) {\n          if($property === undefined) { return $target.target }\n          else { return $target.target[$property] }\n        }],\n      },\n    }))\n    const propertyClasses = []\n    const addProperties = ($properties) => {\n      const propertyClassNames = propertyClasses.map(\n        ($propertyClass) => $propertyClass.name\n      )\n      iteratePropertyClasses: \n      for(const $propertyClass of propertyClasses) {\n        const { administer, name, targetType } = $propertyClass\n        if(!targetType) { continue iteratePropertyClasses }\n        if($properties[name] === undefined) { continue iteratePropertyClasses }\n        if(targetType !== undefined) {\n          this[administer](this.settings[name])\n        }\n        else if(this.settings[name] !== undefined) {\n          this[name] = this.settings[name]\n        }\n      }\n      return this\n    }\n    let parent = null\n    let path = null\n    try {\n      Object.defineProperty(this, 'mount', { value: function($mount) {\n        const mountParent = $mount.parent\n        const mountPath = $mount.path\n        const property = (mountPath) ? mountPath.split('.').pop() : mountPath\n        if(parent) { parent.unmount(property) }\n        parent = mountParent\n        path = mountPath\n      } })\n    }\n    catch($err) { console.error($err) }\n    try {\n      Object.defineProperty(this, 'unmount', { value: function($unmount) {\n        const unmountPath = $unmount.path\n        delete this[$property]\n      } })\n    }\n    catch($err) { console.error($err) }\n    Object.defineProperties(this, {\n      'settings': { value: Settings($settings) },\n      'options': { value: Options($options) },\n      'definition': { get() { return definition } },\n      'parent': { get() { return parent } },\n      'path': { get() { return path } },\n      'key': { get() { return (path) ? path.pop() : path } },\n      'root': { get() {\n        let root = this\n        iterateParents: \n        while(root) {\n          if([undefined, null].includes(root.parent)) { break iterateParents }\n          root = root.parent\n        }\n        return root\n      } },\n      'retroReenableEvents': { value: function() {\n        let core = this\n        while(core) {\n          core.reenableEvents({ enable: true })\n          core = core.parent\n        }\n        return this\n      } },\n      'addPropertyClasses': { value: function() {\n        const $this = this\n        let $addPropertyClasses = (arguments.length === 0)\n          ? this.options.propertyClasses\n          : [].concat(...arguments)\n        iteratePropertyClasses: \n        for(const $addPropertyClass of $addPropertyClasses) {\n          if(!$addPropertyClass.targetType) {\n            propertyClasses.push($addPropertyClass)\n            continue iteratePropertyClasses\n          }\n          const {\n            name,\n            administer, deadminister,\n            instate, deinstate,\n            targetType, definition,\n          } = $addPropertyClass\n          let propertyValue\n          Object.defineProperties(this, {\n            [name]: {\n              configurable: true, enumerable: true, writable: true,\n              value: typedObjectLiteral(targetType)\n            }, \n            [administer]: {\n              configurable: true, enumerable: false, writable: false, \n              value: function($properties) {\n                if(!$this[name]) { $this[name] = typedObjectLiteral(targetType) }\n                iterateProperties: \n                for(const [$propertyKey, $propertyValue] of Object.entries($properties)) {\n                  $this[name][$propertyKey] = instate(\n                    $this, $propertyKey, $propertyValue, $addPropertyClass\n                  )\n                  $this.retroReenableEvents()\n                }\n                return $this\n              }\n            },\n            [deadminister]: {\n              configurable: true, enumerable: false, writable: false, \n              value: function(...$arguments) {\n                let properties\n                if($arguments.length === 0) {\n                  properties = Object.keys($this[name]).reverse()\n                }\n                else {\n                  properties = [].concat(...$arguments).reverse()\n                }\n                for(const $propertyKey of properties) {\n                  deinstate(\n                    $this, $propertyKey, $addPropertyClass\n                  )\n                  delete $this[name][$propertyKey]\n                  $this.retroReenableEvents()\n                }\n                return $this\n              }\n            },\n          })\n          propertyClasses.push($addPropertyClass)\n        }\n        return this\n      } },\n      'removePropertyClasses': { value: function(...$arguments) {\n        let $removePropertyClasses\n        if($arguments.length === 0) {\n          $removePropertyClasses = propertyClasses.reduce(($propertyClasses, propertyClass) => {\n            $propertyClasses.push($propertyClass.name)\n            return $propertyClasses\n          }, [])\n        }\n        else {\n          $removePropertyClasses = [].concat(...$arguments)\n        }\n        iterateRemovePropertyClasses: \n        for(const $removePropertyClass of $removePropertyClasses) {\n          const propertyClassIndex = propertyClasses.findIndex(\n            ($propertyClass) => $propertyClass.name === $removePropertyClass\n          )\n          const { name, deadminister } = propertyClasses.splice(propertyClassIndex, 1)[0]\n          this[deadminister]()\n          delete this[name]\n        }\n        return this\n      } },\n    })\n    if(this.settings.defineProperties) {\n      Object.defineProperties(this, this.settings.defineProperties)\n    }\n    if(this.settings.assign) {\n      Object.assign(this, this.settings.assign)\n    }\n    if(this.options.propertyClasses) {\n      this.addPropertyClasses(this.options.propertyClasses)\n    }\n    this.mount({\n      parent: this.options.parent,\n      path: this.options.path\n    })\n    addProperties(this.settings)\n  }\n}","import Core from 'core-plex';\n\nconst Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n};\nconst PrimitiveKeys = Object.keys(Primitives);\nconst PrimitiveValues = Object.values(Primitives);\nconst Objects = {\n  'object': Object,\n  'array': Array,\n};\nconst ObjectKeys$1 = Object.keys(Objects);\nconst ObjectValues = Object.values(Objects);\nconst Types = Object.assign({}, Primitives, Objects);\nconst TypeKeys$1 = Object.keys(Types);\nconst TypeValues = Object.values(Types);\nconst TypeMethods = [\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n];\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ObjectKeys: ObjectKeys$1,\n  ObjectValues: ObjectValues,\n  Objects: Objects,\n  PrimitiveKeys: PrimitiveKeys,\n  PrimitiveValues: PrimitiveValues,\n  Primitives: Primitives,\n  TypeKeys: TypeKeys$1,\n  TypeMethods: TypeMethods,\n  TypeValues: TypeValues,\n  Types: Types\n});\n\nvar typeOf = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nfunction typedObjectLiteral($value) {\n  let _typedObjectLiteral;\n  const typeOfValue = typeOf($value);\n  if(typeOfValue === 'string') {\n    const value = $value.toLowerCase();\n    if(value === 'object') { _typedObjectLiteral = {}; }\n    else if(value === 'array') { _typedObjectLiteral = []; }\n  }\n  else  {\n    if(typeOfValue === 'object') { _typedObjectLiteral = {}; }\n    else if(typeOfValue === 'array') { _typedObjectLiteral = []; }\n  }\n  return _typedObjectLiteral\n}\n\nvar regularExpressions = {\n  quotationEscape: /\\.(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,\n};\n\nfunction get($path, $source) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n  const key = subpaths.pop();\n  let subtarget = $source;\n  for(const $subpath of subpaths) { subtarget = subtarget[$subpath]; }\n  return subtarget[key]\n}\n\nfunction impandTree($source, $property) {\n  const typeOfProperty = typeOf($property);\n  const typeOfSource = typeOf($source);\n  if(\n    !['string', 'function'].includes(typeOfProperty) ||\n    !['array', 'object'].includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source);\n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = get($property, $sourceValue); }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue); }\n    if(target[$sourceKey] && typeof target[$sourceKey] === 'object') {\n      target[$sourceKey] = impandTree(target[$sourceKey], $property);\n    }\n  }\n  return target\n}\n\nvar isArrayLike = ($source) => {\n  let isArrayLike;\n  const typeOfSource = typeOf($source);\n  if(typeOfSource === 'array') { isArrayLike = true; }\n  else if(\n    typeOfSource === 'object' &&\n    Number.isInteger($source.length) && $source.length >= 0\n  ) {\n    iterateSourceKeys: \n    for(const $sourceKey of Object.keys(\n      Object.getOwnPropertyDescriptors($source)\n    )) {\n      if($sourceKey === 'length') { continue iterateSourceKeys }\n      isArrayLike = !isNaN($sourceKey);\n      if(!isArrayLike) { break iterateSourceKeys }\n    }\n  }\n  else { isArrayLike = false; }\n  return isArrayLike\n};\n\nfunction recursiveAssign$1($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssign$1($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nvar Settings = {\n  depth: 0,\n  path: null,\n  ancestors: [],\n};\n\nvar Options$1$1 = {\n  delimiter: '.',\n  maxDepth: 10,\n  path: false,\n  retrocursion: false,\n  type: false,\n};\n\nfunction recursiveGetOwnPropertyDescriptor($properties, $propertyKey, $options) {\n  const options = Object.assign({}, Settings, Options$1$1, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  });\n  const propertyDescriptor = Object.getOwnPropertyDescriptor($properties, $propertyKey);\n  if(!options.ancestors.includes($properties)) { options.ancestors.unshift($properties); }\n  if(!options.retrocursion && options.ancestors.includes(propertyDescriptor.value)) { return }\n  if(options.path) {\n    options.path = (typeOf(options.path) === 'string') ? [options.path, $propertyKey].join(options.delimiter) : $propertyKey;\n    propertyDescriptor.path = options.path;\n  }\n  if(options.type) { propertyDescriptor.type = typeOf(propertyDescriptor.value); }\n  if(['array', 'object'].includes(typeOf(propertyDescriptor.value))) {\n    propertyDescriptor.value = recursiveGetOwnPropertyDescriptors(propertyDescriptor.value, options);\n  }\n  return propertyDescriptor\n}\n\nfunction recursiveGetOwnPropertyDescriptors($properties, $options) {\n  const propertyDescriptors = {};\n  const options = Object.assign({}, Settings, Options$1$1, $options);\n  if(options.depth >= options.maxDepth) { return propertyDescriptors }\n  else { options.depth++; }\n  for(const [$propertyKey, $propertyDescriptor] of Object.entries(Object.getOwnPropertyDescriptors($properties))) {\n    const propertyDescriptor = recursiveGetOwnPropertyDescriptor($properties, $propertyKey, options);\n    if(propertyDescriptor !== undefined) { propertyDescriptors[$propertyKey] = propertyDescriptor; }\n  }\n  return propertyDescriptors\n}\n\nvar Options$2 = { typeCoercion: false };\n\nfunction recursiveDefineProperty($target, $propertyKey, $propertyDescriptor, $options) {\n  const propertyDescriptor = Object.assign({}, $propertyDescriptor);\n  const options = Object.assign({}, Options$2, $options);\n  const typeOfPropertyValue = typeOf(propertyDescriptor.value);\n  if(['array', 'object'].includes(typeOfPropertyValue)) {\n    const propertyValue = isArrayLike(Object.defineProperties(\n      typedObjectLiteral(typeOfPropertyValue), propertyDescriptor.value\n    )) ? [] : {};\n    propertyDescriptor.value = recursiveDefineProperties(propertyValue, propertyDescriptor.value, options);\n  }\n  else if(\n    options.typeCoercion && \n    Object.getOwnPropertyDescriptor(propertyDescriptor, 'type') !== undefined &&\n    !['undefined', 'null'].includes(typeOfPropertyValue)\n  ) {\n    propertyDescriptor.value = Primitives[propertyDescriptor.type](propertyDescriptor.value);\n  }\n  Object.defineProperty($target, $propertyKey, propertyDescriptor);\n  return $target\n}\n\nfunction recursiveDefineProperties($target, $propertyDescriptors, $options) {\n  const options = Object.assign({}, Options$2, $options);\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of Object.entries($propertyDescriptors)) {\n    recursiveDefineProperty($target, $propertyKey, $propertyDescriptor, options);\n  }\n  return $target\n}\n\nclass LocalStorage extends EventTarget {\n  #db = localStorage\n  #path\n  constructor($path) {\n    super();\n    this.path = $path;\n  }\n  get path() { return this.#path }\n  set path($path) {\n    if(this.#path !== undefined) return\n    this.#path = $path;\n  }\n  get() {\n    let model = this.#db.getItem(this.path);\n    if(model) {\n      model = recursiveDefineProperties(JSON.parse(model), {\n        typeCoercion: true\n      });\n    }\n    return model\n  }\n  set($data) {\n    return this.#db.setItem(this.path, JSON.stringify(\n      recursiveGetOwnPropertyDescriptors($data, {\n        path: true,\n        retrocursion: false,\n        type: true,\n      })\n    ))\n  }\n  remove() {\n    try { return this.#db.removeItem(this.path) }\n    catch($err) { console.error($err); }\n  }\n}\n\nclass Verification extends EventTarget {\n  constructor($settings) {\n    super();\n    const settings = Object.assign({}, $settings);\n    Object.defineProperties(this, {\n      'type': { value: settings.type },\n      'key': { value: settings.key },\n      'value': { value: settings.value },\n      'message': { configurable: true, get() {\n        let message;\n        if(this.pass !== undefined) {\n          message = settings.messages[String(this.pass)](this);\n          Object.defineProperty(this, 'message', { value: message });\n        }\n        return message\n      } },\n      'pass': { writable: true, \n        set pass($pass) {\n          Object.defineProperty(this, 'pass', { value: $pass });\n        },\n      },\n    });\n  }\n}\n\nconst Messages$1 = {\n  'true': ($validation) => `${$validation.valid}`,\n  'false': ($validation) => `${$validation.valid}`,\n};\nfunction report($format = \"expand\", $prevalidation) {\n  const prevalidation = $prevalidation || this;\n  const schema = prevalidation.schema;\n  const validations = [].concat(\n    prevalidation.advance, prevalidation.deadvance, prevalidation.unadvance\n  );\n  if($format === \"expand\") {\n    const _report = typedObjectLiteral(schema.type);\n    for(const $validation of validations) {\n      const verifications = [].concat(\n        $validation.advance, $validation.deadvance, $validation.unadvance\n      );\n      _report[$validation.key] = {};\n      for(const $verification of verifications) {\n        _report[$validation.key][$verification.type] = {};\n        if($verification.validation) {\n          _report[$validation.key][$verification.type] = this.report($format, $verification.validation);\n        }\n        else {\n          _report[$validation.key][$verification.type] = $verification;\n        }\n      }\n    }\n    return _report\n  }\n  if($format === \"impand\") {\n    if(prevalidation.valid === false) { return false }\n    const _report = typedObjectLiteral(schema.type);\n    for(const $validation of validations) {\n      const verifications = [].concat(\n        $validation.advance, $validation.deadvance, $validation.unadvance\n      );\n      let reportValue;\n      iterateVerifications: \n      for(const $verification of verifications) {\n        if($verification.type === 'type') {\n          if($verification.validation && $validation.valid) {\n            reportValue = this.report($format, $verification.validation);\n          }\n          break iterateVerifications\n        }\n      }\n      if(!reportValue) { reportValue = $validation.valid; }\n      _report[$validation.key] = reportValue;\n    }\n    return _report\n  }\n}\nclass Validation extends EventTarget {\n  constructor($settings = {}, $schema) {\n    super();\n    const settings = Object.assign({ messages: Messages$1 }, $settings);\n    let valid;\n    const advance = [];\n    const deadvance = [];\n    const unadvance = [];\n    Object.defineProperties(this, {\n      'schema': { value: $schema },\n      'verificationType': { value: settings.verificationType },\n      'required': { value: settings.required },\n      'definition': { value: settings.definition },\n      'key': { value: settings.key },\n      'value': { value: settings.value },\n      'advance': { value: advance },\n      'deadvance': { value: deadvance },\n      'unadvance': { value: unadvance },\n      'valid': {\n        writable: true,\n        get valid() { return valid },\n        set valid($valid) { Object.defineProperty(this, 'valid', { value: $valid }); }\n      },\n      'report': { configurable: true, get() {\n        const _report = report.bind(this);\n        Object.defineProperty(this, 'report', { value: _report });\n        return _report\n      } },\n    });\n  }\n}\n\nconst Messages = {\n  'true': ($verification) => `${$verification.pass}`,\n  'false': ($verification) => `${$verification.pass}`,\n};\nclass Validator extends EventTarget {\n  constructor($definition = {}, $schema) {\n    super();\n    const definition = Object.freeze(\n      Object.assign({ messages: Messages }, $definition)\n    );\n    Object.defineProperties(this, {\n      'definition': { value: definition },\n      'schema': { value: $schema },\n      'type': { value: definition.type },\n      'messages': { value: definition.messages },\n      'validate': { configurable: true, get() {\n        function validate($key, $value, $source, $target) {\n          const { definition, messages, type } = this;\n          let verification = new Verification({\n            type: type,\n            key: $key,\n            value: definition.value,\n            messages: recursiveAssign$1({}, messages, definition.messages),\n          });\n          const validation = definition.validate(...arguments);\n          if(typeof validation === 'object') {\n            verification.validation = validation;\n            verification.pass = validation.valid;\n          }\n          else { verification.pass = validation; }\n          return verification\n        }\n        const boundValidate = validate.bind(this);\n        Object.defineProperty(this, 'validate', {\n          value: boundValidate\n        });\n        return boundValidate\n      } },\n    });\n  }\n}\n\nclass RequiredValidator extends Validator {\n  constructor($definition, $schema) {\n    super(Object.assign({}, $definition, {\n      type: 'required',\n      validate: ($key, $value, $source, $target) => {\n        const { requiredProperties, requiredPropertiesSize, type } = $schema;\n        const corequiredProperties = Object.assign({}, requiredProperties);\n        let corequiredPropertiesSize = requiredPropertiesSize;\n        Object.assign(typedObjectLiteral(type), $source, $target);\n        this.definition;\n        let pass;\n        if(!requiredPropertiesSize) { pass = true; }\n        else {\n          if(Object.hasOwn(corequiredProperties, $key)) {\n            delete corequiredProperties[$key];\n            corequiredPropertiesSize--;\n          }\n          if(corequiredPropertiesSize) {\n            const coschema = new Schema(corequiredProperties, {\n              path: $schema.path,\n              parent: $schema.parent,\n            });\n            const comodel = Object.assign({}, $target, $source);\n            const covalidation = coschema.validate(comodel);\n            pass = covalidation.valid;\n          }\n        }\n        return pass\n      }\n    }), $schema);\n  }\n}\n\nconst { ObjectKeys, TypeKeys } = index;\nclass TypeValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign({}, $definition, {\n      type: 'type',\n      validate: ($key, $value, $source, $target) => {\n        let pass;\n        const definition = this.definition;\n        let typeOfDefinitionValue = typeOf(definition.value);\n        if(typeOfDefinitionValue === 'function') {\n          typeOfDefinitionValue = typeOf(definition.value());\n        }\n        else if(definition.value instanceof Schema) {\n          typeOfDefinitionValue = definition.value.type;\n        }\n        else {\n          typeOfDefinitionValue = typeOf(definition.value);\n        }\n        if(TypeKeys.includes(typeOfDefinitionValue)) {\n          const typeOfValue = typeOf($value);\n          if(typeOfValue === 'undefined') { pass = false; }\n          else if(typeOfDefinitionValue === 'undefined') { pass = true; }\n          else if(definition.value instanceof Schema) {\n            const validation = definition.value.validate($value, $source);\n            pass = validation;\n          }\n          else { pass = (typeOfDefinitionValue === typeOfValue); }\n        }\n        else { pass = false; }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass RangeValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'range',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(typeof $value !== 'number') { pass = false; }\n        else {\n          const { min, max } = definition;\n          let validMin, validMax;\n          if(min !== undefined) { validMin = ($value >= min.value); }\n          else { validMin = true; }\n          if(max !== undefined) { validMax = ($value <= max.value); }\n          else { validMax = true; }\n          if(validMin && validMax) { pass = true; }\n          else { pass = false;}\n        }\n        return pass\n      }\n    }), $schema);\n  }\n}\n\nclass LengthValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'length',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(typeof $value !== 'string') { pass = false; }\n        else {\n          const { min, max } = definition;\n          let validMin, validMax;\n          if(min !== undefined) {\n            validMin = ($value.length >= min.value);\n          }\n          else { validMin = true; }\n          if(max !== undefined) {\n            validMax = ($value.length <= max.value);\n          }\n          else { validMax = true; }\n          if(validMin && validMax) { pass = true; }          \n          else { pass = false;}\n        }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass EnumValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'enum',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(![\n          'string', 'number', 'boolean'\n        ].includes(typeof $value)) { pass = false;}\n        else {\n          const enumeration = definition.value;\n          pass = enumeration.includes($value);\n        }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass MatchValidator extends Validator {\n  constructor($settings = {}, $schema) {\n    super(Object.assign($settings, {\n      type: 'match',\n      validate: ($key, $value) => {\n        const definition = this.settings;\n        let pass;\n        if(![\n          'string', 'number', 'boolean'\n        ].includes(typeof $value)) { pass = false;}\n        else {\n          const match = definition;\n          (match.value.exec($value) !== null);\n        }\n        return pass ? true : false\n      },\n    }), $schema);\n  }\n}\n\nvar Options$1 = (...$options) => Object.assign({\n  required: false,\n  verificationType: 'all', \n  // verificationType: 'one',\n  strict: false,\n  properties: {\n    type: 'type',\n    value: 'value',\n  },\n}, ...$options);\n\nclass Schema extends EventTarget {\n  constructor($properties = {}, $options = {}) {\n    super();\n    Object.defineProperties(this, {\n      'options': { value: Options$1($options) },\n      'type': { value: typeOf($properties) },\n      'parent': { configurable: true, get() {\n        const { options } = this;\n        const parent = (options.parent) ? options.parent : null;\n        Object.defineProperty(this, 'parent', { value: parent });\n        return parent\n      } },\n      'root': { configurable: true, get() {\n        let root = this;\n        iterateParents: \n        while(root) {\n          if([undefined, null].includes(root.parent)) { break iterateParents }\n          root = root.parent;\n        }\n        return root\n      } },\n      'key': { configurable: true, get() {\n        const { path } = this;\n        const key = (path) ? path.split('.').pop() : null;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'path': { configurable: true, get() {\n        const { options } = this;\n        const path = (options.path)\n          ? String(options.path)\n          : null;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'required': { configurable: true, get() {\n        const required = this.options.required;\n        Object.defineProperty(this, 'required', { value: required });\n        return required\n      } },\n      'requiredProperties': { configurable: true, get() {\n        const requiredProperties = typedObjectLiteral(this.type);\n        for(const [$propertyKey, $propertyDefinition] of Object.entries(this.target)) {\n          if($propertyDefinition.required?.value === true) {\n            requiredProperties[$propertyKey] = $propertyDefinition;\n          }\n        }\n        Object.defineProperty(this, 'requiredProperties', { value: Object.freeze(requiredProperties) });\n        return requiredProperties\n      } },\n      'requiredPropertiesSize': { configurable: true, get() {\n        const requiredPropertiesSize = Object.keys(this.requiredProperties).length;\n        Object.defineProperty(this, 'requiredPropertiesSize', { value: requiredPropertiesSize });\n        return requiredPropertiesSize\n      } },\n      'verificationType': { configurable: true, get() {\n        const verificationType = this.options.verificationType;\n        Object.defineProperty(this, 'verificationType', { value: verificationType });\n        return verificationType\n      } },\n      'target': { configurable: true, get() {\n        let properties;\n        const type = this.type;\n        if(type === 'array') { properties = $properties.slice(0, 1); }\n        else if(type === 'object') { properties = $properties; }\n        const target = parseProperties(properties, this);\n        Object.defineProperty(this, 'target', { value: target });\n        return target\n      } },\n      'validate': { value: function(...$arguments) {\n        let { $sourceName, $source, $target } = parseValidateArguments(...$arguments);\n        $target = $target || typedObjectLiteral($source);\n        const { target, path, required, type, verificationType } = this;\n        let validation = new Validation({\n          required, verificationType,\n          definition: target,\n          key: $sourceName, \n          value: $source,\n        }, this);\n        const sourceProperties = Object.entries($source);\n        let sourcePropertyIndex = 0;\n        while(sourcePropertyIndex < sourceProperties.length) {\n          const [$sourceKey, $sourceValue] = sourceProperties[sourcePropertyIndex];\n          const propertyValidation = this.validateProperty($sourceKey, $sourceValue, $source, $target);\n          if(propertyValidation.valid === true) { validation.advance.push(propertyValidation); } \n          else if(propertyValidation.valid === false) { validation.deadvance.push(propertyValidation); } \n          else if(propertyValidation.valid === undefined) { validation.unadvance.push(propertyValidation );}\n          sourcePropertyIndex++;\n        }\n        if(validation.advance.length) { validation.valid = true; }\n        else if(validation.deadvance.length) { validation.valid = false; }\n        else if(validation.unadvance.length) { validation.valid = undefined; }\n        else { validation.valid = true; }\n        return validation\n      } },\n      'validateProperty': { value: function() {\n        const { $key, $value, $source, $target } = parseValidatePropertyArguments(...arguments);\n        const { target, path, required, schema, type, verificationType } = this;\n        let propertyDefinition;\n        if(type === 'array') { propertyDefinition = target[0]; }\n        else if(type === 'object') { propertyDefinition = target[$key]; }\n        const propertyValidation = new Validation({\n          required,\n          verificationType,\n          definition: propertyDefinition,\n          key: $key,\n          value: $value,\n        }, this);\n        if(propertyDefinition === undefined) {\n          const verification = new Verification({\n            type: null,\n            definition: null,\n            key: $key,\n            value: $value,\n          }, this);\n          verification.pass = false;\n          propertyValidation.unadvance.push(verification);\n        }\n        else {\n          iteratePropertyDefinitionValidators:\n          for(const [$validatorIndex, $validator] of Object.entries(propertyDefinition.validators)) {\n            const verification = $validator.validate($key, $value, $source, $target);\n            if(verification.pass === true) { propertyValidation.advance.push(verification); }\n            else if(verification.pass === false) { propertyValidation.deadvance.push(verification); }\n            else if(verification.pass === undefined) { propertyValidation.unadvance.push(verification); }\n            if(this.verificationType === 'one' && propertyValidation.deadvance.length) {\n              break iteratePropertyDefinitionValidators\n            }\n          }\n        }\n        if(propertyValidation.deadvance.length) { propertyValidation.valid = false; }\n        else if(propertyValidation.advance.length) { propertyValidation.valid = true; }\n        else if(propertyValidation.unadvance.length) { propertyValidation.valid = false; }\n        return propertyValidation\n      } },\n    });\n  }\n}\nfunction parseValidateArguments(...$arguments) {\n  let $sourceName, $source, $target;\n  if($arguments.length === 1) {\n    $sourceName = null; $source = $arguments.shift(); $target = null;\n  }\n  else if($arguments.length === 2) {\n    if(['number', 'string'].includes(typeof $arguments[0])) {\n      $sourceName = $arguments.shift(); $source = $arguments.shift(); $target = null;\n    }\n    else if($arguments[0] && typeof $arguments[0] === 'object') {\n      $sourceName = null; $source = $arguments.shift(); $target = $arguments.shift();\n    }\n  }\n  else if($arguments.length === 3) {\n    if(['number', 'string'].includes(typeof $arguments[0])) {\n      $sourceName = $arguments.shift(); $source = $arguments.shift(); $target = $arguments.shift();\n    }\n  }\n  return { $sourceName, $source, $target }\n}\nfunction parseValidatePropertyArguments(...$arguments) {\n  let [$key, $value, $source, $target] = $arguments;\n  return { $key, $value, $source, $target }\n}\nfunction parseProperties($properties, $schema) {\n  const properties = typedObjectLiteral($properties);\n  if(_isPropertyDefinition($properties, $schema)) { return $properties }\n  for(const [\n    $propertyKey, $propertyValue\n  ] of Object.entries($properties)) {\n    let propertyDefinition = {};\n    typeOf($propertyValue);\n    const isPropertyDefinition = _isPropertyDefinition($propertyValue, $schema);\n    if(index.TypeValues.includes($propertyValue)) {\n      Object.assign(propertyDefinition, { type: { value: $propertyValue } });\n    }\n    else if(index.TypeKeys.includes($propertyValue)) {\n      Object.assign(propertyDefinition, { type: { value: index.Types[$propertyValue] } });\n    }\n    else if(!isPropertyDefinition) {\n      const subpropertyPath = ($schema.path) ? [$schema.path, $propertyKey].join('.') : $propertyKey;\n      Object.assign(propertyDefinition, {\n        type: { type: 'type', value: new Schema($propertyValue, Object.assign({}, $schema.options, {\n          parent: $schema,\n          path: subpropertyPath\n        })) }\n      });\n    }\n    else if(isPropertyDefinition) {\n      for(const [$propertyValidatorName, $propertyValidator] of Object.entries($propertyValue)) {\n        const isValidatorDefinition = _isValidatorDefinition($propertyValidator, $schema);\n        if(!isValidatorDefinition) {\n          let propertyValidator;\n          if($propertyValidatorName === 'type') {\n            if($propertyValidator && typeof $propertyValidator === 'object') {\n              const subpropertyPath = ($schema.path) ? [$schema.path, $propertyKey].join('.') : $propertyKey;\n              propertyValidator = new Schema($propertyValidator, Object.assign({}, $schema.options, {\n                parent: $schema, \n                path: subpropertyPath,\n              }));\n            }\n            else {\n              propertyValidator = $propertyValidator;\n            }\n          }\n          else {\n            propertyValidator = $propertyValidator;\n          }\n          propertyDefinition[$propertyValidatorName] = {\n            type: $propertyValidatorName, value: propertyValidator\n          };\n        }\n        else if(isValidatorDefinition) {\n          propertyDefinition[$propertyValidatorName] = $propertyValidator;\n        }\n      }\n    }\n    propertyDefinition.validators = [];\n    properties[$propertyKey] = propertyDefinition;\n    const validators = new Map();\n    validators.set('type', Object.assign({}, {\n      type: 'type', validator: TypeValidator, value: propertyDefinition.type.value\n    }));\n    validators.set('required', Object.assign({}, {\n      type: 'required', validator: RequiredValidator, value: propertyDefinition.required?.value || false\n    }));\n    if(propertyDefinition.range) { validators.set('range', Object.assign({}, propertyDefinition.range, {\n      type: 'range', validator: RangeValidator\n    })); }\n    else if(propertyDefinition.min || propertyDefinition.max) { validators.set('range', Object.assign({}, {\n      type: 'range', min: propertyDefinition.min, max: propertyDefinition.max, validator: RangeValidator\n    })); }\n    if(propertyDefinition.length) { validators.set('length', Object.assign({}, propertyDefinition.length, {\n      type: 'length', validator: LengthValidator\n    })); }\n    else if(propertyDefinition.minLength || propertyDefinition.maxLength) { validators.set('length', Object.assign({}, {\n      type: 'length', min: propertyDefinition.minLength, max: maxLength, validator: LengthValidator\n    })); }\n    if(propertyDefinition.enum) { validators.set('enum', Object.assign({}, propertyDefinition.enum, {\n      type: 'enum', validator: EnumValidator\n    })); }\n    if(propertyDefinition.match) { validators.set('match', Object.assign({}, propertyDefinition.match, {\n      type: 'match', validator: MatchValidator\n    })); }\n    delete propertyDefinition.min;\n    delete propertyDefinition.max;\n    delete propertyDefinition.minLength;\n    delete propertyDefinition.maxLength;\n    for(const [\n      $validatorName, $validatorSettings\n    ] of validators.entries()) {\n      const ValidatorClass = $validatorSettings.validator;\n      propertyDefinition[$validatorName] = $validatorSettings;\n      propertyDefinition.validators.push(new ValidatorClass($validatorSettings, $schema));\n    }\n  }\n  return properties\n}\nfunction _isPropertyDefinition($object, $schema) {\n  if(!$object || $object instanceof Schema) { return false }\n  const typeKey = $schema.options.properties.type;\n  return Object.hasOwn($object, typeKey)\n}\nfunction _isValidatorDefinition($object, $schema) {\n  if(!$object) { return false }\n  const valueKey = $schema.options.properties.value;\n  return Object.hasOwn($object, valueKey)\n}\n\nvar Options = ($options) => {\n  const Options = recursiveAssign$1({\n    autoload: false, \n    autosave: false, \n    localStorage: false, \n    path: null, \n    parent: null, \n    enableEvents: false,\n    enableValidation: true, \n    validationEvents: {\n      'validProperty:$key': true,\n      'validProperty': true,\n      'nonvalidProperty:$key': true,\n      'nonvalidProperty': true,\n    },\n    pathkey: true,\n    subpathError: false,\n    assignObject: 'set', \n    assignArray: 'set', \n    methods: {\n      map: {\n        get: {\n          mutatorEvents: {\n            'get': true,\n            'getProperty': true,\n            'getProperty:$key': true,\n          },\n        },\n        set: {\n          recursive: true,\n          mutatorEvents: {\n            'set': true,\n            'setProperty': true,\n            'setProperty:$key': true,\n          },\n        },\n        delete: {\n          mutatorEvents: {\n            'delete': true,\n            'deleteProperty': true,\n            'deleteProperty:$key': true,\n          },\n        },\n      },\n      array: {\n        concat: {\n          mutatorEvents: {\n            'concatElement:$index': true,\n            'concatElement': true,\n            'concat': true,\n          }\n        },\n        copyWithin: {\n          mutatorEvents: {\n            'copyWithinElement:$index': true,\n            'copyWithinElement': true,\n            'copyWithin': true,\n          }\n        },\n        fill: {\n          lengthen: true,\n          mutatorEvents: {\n            'fillElement:$index': true,\n            'fillElement': true,\n            'fill': true,\n          }\n        },\n        pop: {\n          mutatorEvents: { 'pop': true  },\n        },\n        push: {\n          mutatorEvents: {\n            'pushElement:$index': true,\n            'pushElement': true,\n            'push': true,\n          }\n        },\n        reverse: {\n          mutatorEvents: { 'reverse': true  },\n        },\n        shift: {\n          mutatorEvents: { 'shift': true  },\n        },\n        splice: {\n          mutatorEvents: {\n            'spliceDeleteElement:$index': true,\n            'spliceDeleteElement': true,\n            'spliceAddElement:$index': true,\n            'spliceAddElement': true,\n            'splice': true,\n          }\n        },\n        unshift: {\n          mutatorEvents: {\n            'unshiftElement:$index': true,\n            'unshiftElement': true,\n            'unshift': true,\n          }\n        },\n      },\n      object: {\n        assign: {\n          sourceTree: true,\n          mutatorEvents: {\n            'assignSourceProperty:$key': true,\n            'assignSourceProperty': true,\n            'assignSource': true,\n            'assign': true,\n          },\n        },\n        defineProperties: {\n          descriptorTree: true,\n          mutatorEvents: { 'defineProperties': true },\n        },\n        defineProperty: {\n          descriptorTree: true,\n          mutatorEvents: {\n            'defineProperty': true,\n            'defineProperty:$key': true,\n          },\n        },\n        freeze: {\n          recursive: true,\n          mutatorEvents: {\n            'freezeProperty': true,\n            'freeze': true,\n          },\n        },\n        seal: {\n          recursive: true,\n          mutatorEvents: {\n            'sealProperty': true,\n            'seal': true,\n          },\n        },\n      },\n    },\n  }, $options);\n  return Options\n};\n\nclass ModelEvent extends CustomEvent {\n  constructor($type, $settings, $model) {\n    super($type, $settings);\n    Object.defineProperties(this, {\n      'model': { get () { return $model } },\n      'key': { configurable: true, get () {\n        const key = (this.path) ? this.path.split('.').pop() : null;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'change': { configurable: true, get () {\n        const change = $settings.change;\n        Object.defineProperty(this, 'change', { value: change });\n        return change\n      } },\n      'value': { configurable: true, get () {\n        const value = $settings.value;\n        Object.defineProperty(this, 'value', { value: value });\n        return value\n      } },\n      'path': { configurable: true, get () {\n        const path = $settings.path;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'detail': { configurable: true, get () {\n        const detail = $settings.detail;\n        Object.defineProperty(this, 'detail', { value: detail });\n        return detail\n      } },\n    });\n  }\n}\n\nclass Change {\n  #_keyter = false \n  #_preter = false \n  #_anter = false \n  #_conter = false\n  #keyter\n  #preter\n  #anter\n  #conter\n  constructor($settings = {}) {\n    for(const [$key, $value] of Object.entries($settings)) { this[$key] = $value; }\n  }\n  get preter() { return this.#preter }\n  set preter($preter) {\n    if(this.#_preter === true) { return this.#preter }\n    this.#preter = $preter?.valueOf();\n    this.#_preter = true;\n  }\n  get anter() { return this.#anter }\n  set anter($anter) {\n    if(this.#_anter === true) { return this.#anter }\n    this.#anter = $anter?.valueOf();\n    this.#_anter = true;\n  }\n  get conter() {\n    if(\n      this.#_conter === true ||\n      [this.#_preter, this.#_anter].includes(false)\n    ) { return this.#conter }\n    const preter = JSON.stringify(this.preter);\n    const anter = JSON.stringify(this.anter);\n    let conter;\n    if(anter !== preter) { conter = true; }\n    else { conter = false; }\n    this.#conter = conter;\n    this.#_conter = true;\n    return this.#conter\n  }\n}\n\nlet ValidatorEvent$1 = class ValidatorEvent extends CustomEvent {\n  constructor($type, $settings, $model) {\n    super($type);\n    Object.defineProperties(this, {\n      'key': { configurable: true, get () {\n        const key = $settings.key;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'path': { configurable: true, get () {\n        const path = ($model.path)\n          ? [$model.path, $settings.key].join('.')\n          : $settings.key;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'value': { configurable: true, get () {\n        const value = $settings.value;\n        Object.defineProperty(this, 'value', { value: value, });\n        return value\n      } },\n      'valid': { configurable: true, get () {\n        const valid = $settings.valid;\n        Object.defineProperty(this, 'valid', { value: valid });\n        return valid\n      } },\n    });\n  }\n};\n\nfunction assign($model, $options, ...$sources) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'assign';\n  const assignArray = options.assignArray || 'assign';\n  const { path, schema, source, target } = $model;\n  const { enableValidation, mutatorEvents, required, sourceTree, validationEvents } = options;\n  const assignedSources = [];\n  const assignChange = new Change({ preter: $model });\n  for(let $source of $sources) {\n    let assignedSource;\n    const assignSourceChange = new Change({ preter: $model });\n    if(Array.isArray($source)) { assignedSource = []; }\n    else if($source && typeof $source === 'object') { assignedSource = {}; }\n    let validObject;\n    if(enableValidation && schema) {\n      validObject = schema.validate($source, $model.valueOf());\n      validObject.report();\n    }\n    iterateSourceProperties:\n    for(let [$sourceKey, $sourceValue] of Object.entries($source)) {\n      const assignSourcePropertyChange = new Change({ preter: target[$sourceKey] });\n      const assignSourcePropertyKeyChange = new Change({ preter: target[$sourceKey] });\n      if(schema && enableValidation) {\n        const validatorTarget = $model.valueOf();\n        const validatorSource = $source;\n        const validSourceProperty = schema.validateProperty($sourceKey, $sourceValue, validatorSource, validatorTarget);\n        if(validationEvents) {\n          let type, propertyType;\n          if(validSourceProperty.valid) {\n            type = 'validProperty';\n            propertyType = ['validProperty', $sourceKey].join(':');\n          }\n          else {\n            type = 'nonvalidProperty';\n            propertyType = ['nonvalidProperty', $sourceKey].join(':');\n          }\n          for(const $eventType of [type, propertyType]) {\n            $model.dispatchEvent(new ValidatorEvent$1($eventType, validSourceProperty, $model));\n          }\n        }\n        if(!validSourceProperty.valid) { continue iterateSourceProperties }\n      }\n      let sourceValue;\n      if($sourceValue && typeof $sourceValue === 'object') {\n        if($sourceValue instanceof $model.constructor) {\n          sourceValue = $sourceValue.valueOf();\n        }\n        let subschema;\n        if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema?.type === 'object') { subschema = schema.target[$sourceKey].type.value; }\n        else { subschema = null; }\n        const modelPath = (path)\n          ? [path, $sourceKey].join('.')\n          : String($sourceKey);\n        if(sourceTree === false) {\n          const suboptions = recursiveAssign$1({}, options, {\n            path: modelPath,\n            parent: $model,\n          });\n          sourceValue = new $model.constructor($sourceValue, subschema, suboptions);\n          const assignment = { [$sourceKey]: sourceValue };\n          Object.assign(target, assignment);\n          Object.assign(assignedSource, assignment);\n        }\n        else {\n          if(target[$sourceKey] instanceof $model.constructor) {\n            sourceValue = target[$sourceKey];\n          }\n          else {\n            const subproperties = typedObjectLiteral($sourceValue);\n            const suboptions = recursiveAssign$1({}, options, {\n              path: modelPath,\n              parent: $model,\n            });\n            sourceValue = new $model.constructor(subproperties, subschema, suboptions);\n          }\n          const assignment = { [$sourceKey]: sourceValue };\n          Object.assign(target, assignment);\n          Object.assign(assignedSource, assignment);\n          $model.retroReenableEvents();\n          if(sourceValue.type === 'array') {\n            if(['push', 'unshift'].includes(assignArray)) { sourceValue[assignArray](...$sourceValue); }\n            else { sourceValue[assignArray]($sourceValue); }\n          }\n          else if(sourceValue.type === 'object') { sourceValue[assignObject]($sourceValue); }\n        }\n      }\n      else {\n        sourceValue = $sourceValue;\n        const assignment = { [$sourceKey]: sourceValue };\n        Object.assign(target, assignment);\n        Object.assign(assignedSource, assignment);\n      }\n      if(mutatorEvents) {\n        const modelEventPath = (path) ? [path, $sourceKey].join('.') : String($sourceKey);\n        if(mutatorEvents['assignSourceProperty:$key']) {\n          const type = ['assignSourceProperty', $sourceKey].join(':');\n          assignSourcePropertyKeyChange.anter = target[$sourceKey];\n          $model.dispatchEvent(\n            new ModelEvent(type, {\n              path: modelEventPath,\n              value: sourceValue,\n              change: assignSourcePropertyKeyChange,\n              detail: {\n                source: assignedSource,\n              }\n            }, $model)\n          );\n        }\n        if(mutatorEvents['assignSourceProperty']) {\n          assignSourcePropertyChange.anter = target[$sourceKey];\n          $model.dispatchEvent(\n            new ModelEvent('assignSourceProperty', {\n              path: modelEventPath,\n              value: sourceValue,\n              change: assignSourcePropertyChange,\n              detail: {\n                source: assignedSource,\n              }\n            }, $model)\n          );\n        }\n      }\n    }\n    assignedSources.push(assignedSource);\n    if(mutatorEvents && mutatorEvents['assignSource']) {\n      assignSourceChange.anter = $model;\n      $model.dispatchEvent(\n        new ModelEvent('assignSource', {\n          path,\n          change: assignSourceChange,\n          detail: {\n            source: assignedSource,\n          },\n        }, $model)\n      );\n    }\n  }\n  if(mutatorEvents && mutatorEvents['assign']) {\n    assignChange.anter = $model;\n    $model.dispatchEvent(\n      new ModelEvent('assign', { \n        path,\n        change: assignChange,\n        detail: {\n          sources: assignedSources,\n        },\n      }, $model)\n    );\n  }\n  return $model\n}\n\nfunction defineProperties($model, $options, $propertyDescriptors) {\n  const { path, schema } = $model;\n  let {\n    enableValidation, mutatorEvents, required, \n    validation, validationEvents, validationReport\n  } = $options;\n  const propertyDescriptorEntries = Object.entries($propertyDescriptors);\n  const definePropertiesChange = new Change({ preter: $model });\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of propertyDescriptorEntries) {\n    $model.defineProperty($propertyKey, $propertyDescriptor, Object.assign({}, $options, {\n      validation, validationReport\n    }));\n  }\n  if(mutatorEvents && mutatorEvents['defineProperties']) {\n    definePropertiesChange.anter = $model;\n    $model.dispatchEvent(\n      new ModelEvent(\n        'defineProperties',\n        {\n          path,\n          value: $model.valueOf(),\n          detail: {\n            descriptors: $propertyDescriptors,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction defineProperty($model, $options, $propertyKey, $propertyDescriptor) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'defineProperties';\n  const assignArray = options.assignArray || 'defineProperties';\n  const {\n    descriptorTree, enableValidation, mutatorEvents, \n    validation, validationEvents, validationReport\n  } = options;\n  const { target, path, schema } = $model;\n  const propertyValue = $propertyDescriptor.value;\n  const targetPropertyDescriptor = Object.getOwnPropertyDescriptor(target, $propertyKey) || {};\n  const targetPropertyValue = targetPropertyDescriptor.value;\n  const definePropertyChange = new Change({ preter: targetPropertyValue });\n  const definePropertyKeyChange = new Change({ preter: targetPropertyValue });\n  const targetPropertyValueIsModelInstance = targetPropertyValue instanceof $model.constructor;\n  if(schema && enableValidation) {\n    const validProperty = schema.validateProperty(\n      $propertyKey, \n      impandTree(propertyValue, 'value') || propertyValue,\n      {},\n      $model.valueOf()\n    );\n    if(validationEvents) {\n      let type, propertyType;\n      if(validProperty.valid) {\n        type = 'validProperty';\n        propertyType = ['validProperty', $propertyKey].join(':');\n      }\n      else {\n        type = 'nonvalidProperty';\n        propertyType = ['nonvalidProperty', $propertyKey].join(':');\n      }\n      for(const $eventType of [type, propertyType]) {\n        $model.dispatchEvent(new ValidatorEvent$1($eventType, validProperty, $model));\n      }\n    }\n    if(!validProperty.valid) { return $model }\n  }\n  if(propertyValue && typeof propertyValue === 'object') {\n    const modelPath = (path)\n      ? [path, $propertyKey].join('.')\n      : String($propertyKey);\n    if(targetPropertyValueIsModelInstance) {\n      if(descriptorTree === true) {\n        targetPropertyValue.defineProperties($propertyDescriptor);\n      }\n      else {\n        Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n      }\n    }\n    else {\n      let subschema;\n      if(schema) {\n        if(schema.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema.type === 'object') { subschema = schema.target[$propertyKey].type.value; }\n        else { subschema = undefined; }\n      }\n      let subtarget = typedObjectLiteral(propertyValue);\n      const suboptions = recursiveAssign$1({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      const submodel = new $model.constructor(\n        subtarget, subschema, suboptions\n      );\n      if(descriptorTree === true) {\n        target[$propertyKey] = submodel;\n        $model.retroReenableEvents();\n        if(submodel.type === 'array') {\n          if(['push', 'unshift'].includes(assignArray)) { submodel[assignArray](...propertyValue); }\n          else { submodel[assignArray](propertyValue); }\n        }\n        else if(submodel.type === 'object') { submodel[assignObject](propertyValue); }\n      }\n      else if(descriptorTree === false) {\n        Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n      }\n    }\n  }\n  else {\n    Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n  }\n  if(mutatorEvents) {\n    const modelEventPath = (path)\n      ? [path, $propertyKey].join('.')\n      : String($propertyKey);\n    if(mutatorEvents['defineProperty:$key']) {\n      definePropertyKeyChange.anter = target[$propertyKey];\n      const type = ['defineProperty', $propertyKey].join(':');\n      $model.dispatchEvent(\n        new ModelEvent(type, {\n          path: modelEventPath,\n          value: propertyValue,\n          change: definePropertyKeyChange,\n          detail: {\n            prop: $propertyKey,\n            descriptor: $propertyDescriptor,\n          },\n        }, $model\n      ));\n    }\n    if(mutatorEvents['defineProperty']) {\n      definePropertyChange.anter = target[$propertyKey];\n      $model.dispatchEvent(\n        new ModelEvent('defineProperty', {\n          path: modelEventPath,\n          value: propertyValue,\n          change: definePropertyChange,\n          detail: {\n            prop: $propertyKey,\n            descriptor: $propertyDescriptor,\n          },\n        }, $model\n      ));\n    }\n  }\n  return $model\n}\n\nfunction freeze($model, $options) {\n  const { recursive, mutatorEvents } = $options;\n  const { target } = $model;\n  if(recursive === true) {\n    for(const [\n      $propertyKey, $propertyValue\n    ] of Object.entries(target)) {\n      if($propertyValue instanceof $model.constructor) {\n        $propertyValue.freeze();\n        if(mutatorEvents && mutatorEvents['freezeProperty']) {\n          $model.dispatchEvent(\n            new ModelEvent(\n              'freezeProperty',\n              { path: $propertyValue.path },\n              $model\n            )\n          );\n        }\n      }\n    }\n  }\n  Object.freeze(target);\n  if(mutatorEvents && mutatorEvents['freeze']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'freeze',\n        { path: $model.path },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction seal($model, $options) {\n  const { recursive, mutatorEvents } = $options;\n  const { target } = $model;\n  if(recursive === true) {\n    for(const [\n      $propertyKey, $propertyValue\n    ] of Object.entries(target)) {\n      if($propertyValue instanceof $model.constructor) {\n        $propertyValue.seal();\n        if(mutatorEvents && mutatorEvents['sealProperty']) {\n          $model.dispatchEvent(\n            new ModelEvent(\n              'sealProperty',\n              { path: $propertyValue.path },\n              $model\n            )\n          );\n        }\n      }\n    }\n  }\n  Object.seal(target);\n  if(mutatorEvents && mutatorEvents['seal']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'seal',\n        { path: $model.path },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nvar ObjectProperty = {\n  assign,\n  defineProperties,\n  defineProperty,\n  freeze,\n  seal,\n};\n\nfunction concat($model, $options) {\n  const { target, path, schema } = $model;\n  const { enableValidation, mutatorEvents, source, validationEvents } = $options;\n  const $arguments = [].concat(...arguments);\n  let valueIndex = target.length;\n  const values = [];\n  let targetConcat = [...Array.from(target)];\n  let model;\n  iterateValues: \n  for(let $value of $arguments) {\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral(validatorTarget);\n      const validValue = schema.validateProperty(valueIndex, $subvalue, validatorSource, validatorTarget);\n      if(schema &&validationEvents) {\n        let type, propertyType;\n        if(validValue.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', valueIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', valueIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validValue, $model));\n        }\n      }\n      if(!validValue.valid) { valueIndex++; continue iterateValues }\n    }\n    const modelPath = (path)\n      ? [path, valueIndex].join('.')\n      : String(valueIndex);\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      let subschema = schema?.target[0].type.value || null;\n      const submodel = typedObjectLiteral($value);\n      let value = new $model.constructor(submodel, subschema, {\n        path: modelPath,\n        parent: $model,\n      });\n      value.concat($value);\n      values[valueIndex] = value;\n    }\n    else {\n      values[valueIndex] = $value;\n    }\n    targetConcat = Array.prototype.concat.call(targetConcat, values[valueIndex]);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, valueIndex].join('.')\n        : String(valueIndex);\n      if(mutatorEvents['concatElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('concatElement', {\n            path: modelEventPath,\n            value: values[valueIndex],\n            detail: {\n              valueIndex,\n              value: values[valueIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['concatElement:$index']) {\n        $model.dispatchEvent(\n          new ModelEvent('concatElement', {\n            path: modelEventPath,\n            value: values[valueIndex],\n            detail: {\n              valueIndex,\n              value: values[valueIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    valueIndex++;\n  }\n  model = new $model.constructor(targetConcat, schema, $model.options);\n  if(mutatorEvents && mutatorEvents['concat']) {\n    $model.dispatchEvent(\n      new ModelEvent('concat', {\n        path,\n        detail: {\n          values: model,\n        },\n      }, $model)\n    );\n  }\n  return model\n}\n\nfunction copyWithin($model, $options) {\n  const { target, path } = $model;\n  const { enableValidation, validationEvents, mutatorEvents } = $options;\n  const copyTarget = (\n    arguments[0] >= 0\n  ) ? arguments[0]\n    : target.length = arguments[0];\n  const start = (\n    arguments[1] >= 0\n  ) ? arguments[1]\n    : target.length + arguments[1];\n  const end = (\n    arguments[2] === undefined\n  ) ? target.length\n    : (\n    arguments[2] >= 0\n  ) ? arguments[2]\n    : target.length + arguments[2];\n  const copiedItems = [];\n  let copyIndex = start;\n  let targetIndex = copyTarget;\n  while(copyIndex < end) {\n    const copyItem = target[copyIndex];\n    copiedItems.push(copyItem);\n    Array.prototype.copyWithin.call(\n      target,\n      targetIndex,\n      copyIndex,\n      copyIndex + 1\n    );\n    $model.retroReenableEvents();\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, copyIndex].join('.')\n        : String(copyIndex);\n      if(mutatorEvents['copyWithinElement']) {\n        $model.dispatchEvent(\n          new ModelEvent(\n            'copyWithinElement',\n            {\n              path: modelEventPath,\n              value: copyItem,\n              detail: {\n                target: targetIndex,\n                start: copyIndex,\n                end: copyIndex + 1,\n                item: copyItem,\n              },\n            },\n            $model\n          )\n        );\n      }\n      if(mutatorEvents['copyWithinElement:$index']) {\n        const type  = ['copyWithinElement', copyIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(\n            type,\n            {\n              path: modelEventPath,\n              value: copyItem,\n              detail: {\n                target: targetIndex,\n                start: copyIndex,\n                end: copyIndex + 1,\n                item: copyItem,\n              },\n            },\n            $model\n          )\n        );\n      }\n    }\n    copyIndex++;\n    targetIndex++;\n  }\n  // Array Copy Within Event\n  if(mutatorEvents && mutatorEvents['copyWithin']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'copyWithin',\n        {\n          path,\n          detail: {\n            target: copyTarget,\n            start: start,\n            end: end,\n            items: copiedItems,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction fill($model, $options, ...$arguments) {\n  const options = Object.assign({}, $options);\n  const { target, path, schema } = $model;\n  const assignObject = options.assignObject;\n  const assignArray = options.assignArray || assignObject;\n  const { enableValidation, lengthen, mutatorEvents, validationEvents } = options;\n  const filled = [];\n  let $start;\n  if(typeof $arguments[1] === 'number') {\n    $start = ($arguments[1] >= 0)\n      ? $arguments[1]\n      : target.length + $arguments[1];\n  }\n  else { $start = 0; }\n  let $end;\n  if(typeof $arguments[2] === 'number') {\n    $end = ($arguments[2] >= 0)\n      ? $arguments[2]\n      : target.length + $arguments[2];\n  } else { $end = target.length; }\n  if(lengthen && target.length < $end) { target.length = $end; }\n  let fillIndex = $start;\n  iterateFillIndexes: \n  while(\n    fillIndex < target.length &&\n    fillIndex < $end\n  ) {\n    if(schema && enableValidation) {\n      let validValue = schema.validate(validValue, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        if(validValue.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', fillIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', fillIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validValue, $model));\n        }\n      }\n      if(!validValue.valid) { continue iterateFillIndexes }\n    }\n    const modelPath = (path)\n      ? [path, fillIndex].join('.')\n      : String(fillIndex);\n    let $value = $arguments[0];\n    let value;\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral($value);\n      const suboptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      value = new $model.constructor(subproperties, subschema, suboptions);\n    }\n    Array.prototype.fill.call(target, value, fillIndex, fillIndex + 1);\n    $model.retroReenableEvents();\n    if(value.type === 'array') {\n      if(['push', 'unshift'].includes(assignArray)) { value[assignArray](...$value); }\n      else { value[assignArray]($value); }\n    }\n    else if(value.type === 'object') { value[assignObject]($value); }\n    filled.push(value);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, fillIndex].join('.')\n        : String(fillIndex);\n      if(mutatorEvents['fillElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('fillElement', {\n            path: modelEventPath, \n            value: value,\n            detail: {\n              start: fillIndex,\n              end: fillIndex + 1,\n              value,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['fillElement:$index']) {\n        const type = ['fillElement', fillIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            detail: {\n              start: fillIndex,\n              end: fillIndex + 1,\n              value,\n            },\n          }, $model)\n        );\n      }\n    }\n    fillIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['fill']) {\n    $model.dispatchEvent(\n      new ModelEvent('fill', {\n        path,\n        detail: {\n          start: $start,\n          end: $end,\n          filled,\n        },\n      },\n      $model)\n    );\n  }\n  return $model\n}\n\nfunction pop($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  const popElement = Array.prototype.pop.call(target);\n  const popElementIndex = target.length - 1;\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['pop']) {\n    const modelEventPath = (path)\n      ? [path, popElementIndex].join('.')\n      : String(popElementIndex);\n      $model.dispatchEvent(\n      new ModelEvent(\n        'pop',\n        {\n          path: modelEventPath,\n          value: popElement,\n          detail: {\n            elementIndex: popElementIndex,\n            element: popElement,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return popElement\n}\n\nfunction push($model, $options, ...$elements) {\n  const options = Object.assign({}, $options);\n  const assignArray = 'push';\n  const assignObject = options.assignObject;\n  const { enableValidation, mutatorEvents, source, validationEvents } = options;\n  const { target, path, schema } = $model;\n  const elements = [];\n  let elementsIndex = 0;\n  for(let $element of $elements) {\n    let element;\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral(validatorTarget);\n      const validElement = schema.validateProperty(elementsIndex, $element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validElement.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', elementsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', elementsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validElement, $model));\n        }\n      }\n      if(!validElement.valid) { return target.length }\n    }\n    const modelPath = (path)\n      ? [path, elementsIndex].join('.')\n      : String(elementsIndex);\n    if($element && typeof $element === 'object') {\n      $element = ($element instanceof $model.constructor) ? $element.valueOf() : $element;\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral(typeOf($element));\n      const submodelOptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      element = new $model.constructor(subproperties, subschema, submodelOptions);\n      Array.prototype.push.call(target, element);\n      $model.retroReenableEvents();\n      if(element.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { element[assignArray](...$element); }\n        else { element[assignArray]($element); }\n      }\n      else if(element.type === 'object') { element[assignObject]($element); }\n    }\n    else {\n      element = $element;\n      Array.prototype.push.call(target, element);\n    }\n    elements.push(element);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, elementsIndex].join('.')\n        : String(elementsIndex);\n      if(mutatorEvents['pushElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('pushElement', {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['pushElement:$index']) {\n        const type = ['pushElement', elementsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    elementsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['push']) {\n    $model.dispatchEvent(\n      new ModelEvent('push', {\n        path,\n        detail: {\n          elements,\n        },\n      }, $model)\n    );\n  }\n  return target.length\n}\n\nfunction reverse($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  Array.prototype.reverse.call(target, ...arguments);\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['reverse']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'reverse',\n        {\n          path,\n          detail: {\n            reference: target\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction shift($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  const shiftElement = Array.prototype.shift.call(target);\n  const shiftElementIndex = 0;\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['shift']) {\n    const modelEventPath = (path)\n      ? [path, shiftElementIndex].join('.')\n      : String(shiftElementIndex);\n    $model.dispatchEvent(\n      new ModelEvent(\n        'shift',\n        {\n          path: modelEventPath,\n          value: shiftElement,\n          detail: {\n            elementIndex: shiftElementIndex,\n            element: shiftElement,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return shiftElement\n}\n\nfunction splice($model, $options) {\n  const options = Object.assign({}, $options);\n  const assignObject = options.assignObject;\n  const assignArray = options.assignArray || assignObject;\n  const { mutatorEvents, source } = options;\n  const { target, path, schema } = $model;\n  const { enableValidation, validationEvents } = options;\n  const $arguments = [...arguments];\n  const $start = ($arguments[0] >= 0)\n    ? $arguments[0]\n    : target.length + $arguments[0];\n  const $deleteCount = ($arguments[1] <= 0)\n    ? 0\n    : (\n      $arguments[1] === undefined ||\n      $start + $arguments[1] >= target.length\n    ) ? target.length - $start\n      : $arguments[1];\n  const $addItems = $arguments.slice(2);\n  const addCount = $addItems.length;\n  const deleteItems = [];\n  let deleteItemsIndex = 0;\n  while(deleteItemsIndex < $deleteCount) {\n    const deleteItem = Array.prototype.splice.call(target, $start, 1)[0];\n    deleteItems.push(deleteItem);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, deleteItemsIndex].join('.')\n        : String(deleteItemsIndex);\n      if(mutatorEvents['spliceDeleteElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('spliceDeleteElement', {\n            path: modelEventPath,\n            value: deleteItem,\n            detail: {\n              index: $start + deleteItemsIndex,\n              deleteIndex: deleteItemsIndex,\n              deleteItem: deleteItem,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['spliceDeleteElement:$index']) {\n        const type = ['spliceDeleteElement', deleteItemsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: deleteItem,\n            detail: {\n              index: $start + deleteItemsIndex,\n              deleteIndex: deleteItemsIndex,\n              deleteItem: deleteItem,\n            },\n          }, $model)\n        );\n      }\n    }\n    deleteItemsIndex++;\n  }\n  let addItemsIndex = 0;\n  spliceAdd: \n  while(addItemsIndex < addCount) {\n    let addItem = $addItems[addItemsIndex];\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral(validatorTarget);\n      const validAddItem = schema.validateProperty(elementIndex, element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validAddItem.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', addItemsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', addItemsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validAddItem, $model));\n        }\n      }\n      if(!validAddItem.valid) { addItemsIndex++; continue spliceAdd }\n    }\n    const modelPath = (path)\n      ? [path, addItemsIndex].join('.')\n      : String(addItemsIndex);\n    let startIndex = $start + addItemsIndex;\n    if(addItem && typeof addItem === 'object') {\n      if(addItem instanceof $model.constructor) { addItem = addItem.valueOf(); }\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral(addItem);\n      const suboptions = recursiveAssign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      addItem = new $model.constructor(subproperties, subschema, suboptions);\n      Array.prototype.splice.call(target, startIndex, 0, addItem);\n      $model.retroReenableEvents();\n      if(addItem.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { addItem[assignArray](...$value); }\n        else { addItem[assignArray]($value); }\n      }\n      else if(addItem.type === 'object') { addItem[assignObject]($value); }\n    }\n    else {\n      Array.prototype.splice.call(target, startIndex, 0, addItem);\n    }\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, addItemsIndex].join('.')\n        : String(addItemsIndex);\n      if(mutatorEvents['spliceAddElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('spliceAddElement', {\n            path: modelEventPath,\n            value: addItem,\n            detail: {\n              index: $start + addItemsIndex,\n              addIndex: addItemsIndex,\n              addItem: addItem,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['spliceAddElement:$index']) {\n        const type = ['spliceAddElement', addItemsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: addItem,\n            detail: {\n              index: $start + addItemsIndex,\n              addIndex: addItemsIndex,\n              addItem: addItem,\n            },\n          }, $model)\n        );\n      }\n    }\n    addItemsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['splice']) {\n    $model.dispatchEvent(\n      new ModelEvent('splice', {\n        path,\n        detail: {\n          $start,\n          deleted: deleteItems,\n          added: $addItems,\n          length: target.length,\n        },\n      },\n      $model)\n    );\n  }\n  return deleteItems\n}\n\nfunction unshift($model, $options, ...$elements) {\n  const options = Object.assign({}, $options);\n  const assignArray = 'unshift';\n  const assignObject = options.assignObject;\n  const { enableValidation, mutatorEvents, source, validationEvents } = options;\n  const { target, path, schema } = $model;\n  const elements = [];\n  let elementsIndex = 0;\n  for(let $element of $elements) {\n    let element;\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral(validatorTarget);\n      const validElement = schema.validateProperty(elementsIndex, $element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validElement.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', elementsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', elementsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validElement, $model));\n        }\n      }\n      if(!validElement.valid) { return target.length }\n    }\n    const modelPath = (path)\n      ? [path, elementsIndex].join('.')\n      : String(elementsIndex);\n    if($element && typeof $element === 'object') {\n      $element = ($element instanceof $model.constructor) ? $element.valueOf() : $element;\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral(typeOf($element));\n      const submodelOptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      element = new $model.constructor(subproperties, subschema, submodelOptions);\n      Array.prototype.unshift.call(target, element);\n      $model.retroReenableEvents();\n      if(element.type === 'array') { element[assignArray](...$element); }\n      else if(element.type === 'object') { element[assignObject]($element); }\n    }\n    else {\n      element = $element;\n      Array.prototype.unshift.call(target, element);\n    }\n    elements.unshift(element);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, elementsIndex].join('.')\n        : String(elementsIndex);\n      if(mutatorEvents['unshiftElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('unshiftElement', {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['unshiftElement:$index']) {\n        const type = ['unshiftElement', elementsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    elementsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['unshift']) {\n    $model.dispatchEvent(\n      new ModelEvent('unshift', {\n        path,\n        detail: {\n          elements,\n        },\n      }, $model)\n    );\n  }\n  return target.length\n}\n\nvar ArrayProperty = {\n  concat: concat,\n  copyWithin: copyWithin,\n  fill: fill,\n  pop: pop,\n  push: push,\n  reverse: reverse,\n  shift: shift,\n  splice: splice,\n  unshift: unshift,\n};\n\nfunction getContent($model, $options) {\n  const { path } = $model;\n  const { mutatorEvents } = $options;\n  if(mutatorEvents && mutatorEvents['get']) {\n    $model.dispatchEvent(\n      new ModelEvent('get', {\n        path,\n        value: $model.valueOf(),\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nfunction getContentProperty($model, $options, $path) {\n  const { target, path } = $model;\n  const { mutatorEvents, pathkey, subpathError } = $options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue = target[propertyKey];\n    if(subpaths.length) {\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      return propertyValue.get(subpaths.join('.'), $options)\n    }\n    if(mutatorEvents) {\n      if(mutatorEvents['getProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('getProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['getProperty:$key']) {\n        const type = ['getProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n  else if(pathkey === false) {\n    const propertyValue = target[propertyKey];\n    return propertyValue\n  }\n}\n\nfunction getProperty($model, $options, ...$arguments) {\n  let getProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 2) { recursiveAssign$1(options, $arguments[1]); }\n    getProperty = getContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 1) { recursiveAssign$1(options, $arguments[0]); }\n    getProperty = getContent($model, options, ...$arguments);\n  }\n  return getProperty\n}\n\nfunction setContent($model, $options, $properties) {\n  const { path, schema } = $model;\n  let { enableValidation, mutatorEvents, required, validationEvents  } = $options;\n  for(const [$propertyKey, $propertyValue] of Object.entries($properties)) {\n    $model.set($propertyKey, $propertyValue, Object.assign($options, {\n      source: $properties,\n    }));\n  }\n  if(mutatorEvents && mutatorEvents['set']) {\n    $model.dispatchEvent(\n      new ModelEvent('set', {\n        path,\n        value: $model.valueOf(),\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nfunction setContentProperty($model, $options, $path, $value) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'set';\n  const assignArray = options.assignArray || 'set';\n  const { target, path, schema } = $model;\n  const {\n    enableValidation, mutatorEvents, pathkey, \n    recursive, subpathError, \n    validationEvents, source, \n  } = options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue;\n    const typeOfPropertyValue = typeOf($value);\n    const modelPath = (path)\n      ? [path, propertyKey].join('.')\n      : String(propertyKey);\n    if(subpaths.length) {\n      if(recursive && target[propertyKey] === undefined) {\n        let subschema;\n        if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema?.type === 'object') { subschema = schema.target[propertyKey].type.value; }\n        else { subschema = undefined; }\n        let submodel;\n        if(typeOfPropertyValue === 'array') { submodel = []; }\n        else if(typeOfPropertyValue === 'object') { submodel = {}; }\n        else {\n          if(isNaN(Number(propertyKey))) { submodel = {}; }\n          else { submodel = []; }\n        }\n        const submodelOptions = recursiveAssign$1({}, options, {\n          path: modelPath,\n          parent: $model,\n        });\n        propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      }\n      else {\n        propertyValue = target[propertyKey];\n      }\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject](subpaths.join('.'), $value, options); }\n      return propertyValue\n    }\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral(validatorTarget);\n      const validTargetProp = schema.validateProperty(propertyKey, $value, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validTargetProp, $model));\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const typeOfPropertyValue= typeOf($value);\n      let subschema;\n      let submodel;\n      if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n      else if(schema?.type === 'object') { subschema = schema.target[propertyKey].type.value; }\n      else { subschema = undefined; }\n      if(typeOfPropertyValue === 'array') { submodel = []; }\n      else if(typeOfPropertyValue === 'object') { submodel = {}; }\n      else {\n        if(isNaN(Number(propertyKey))) { submodel = {}; }\n        else { submodel = []; }\n      }\n      const submodelOptions = recursiveAssign$1({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      target[propertyKey] = propertyValue;\n      $model.retroReenableEvents();\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject]($value); }\n    }\n    else {\n      propertyValue = $value;\n      target[propertyKey] = propertyValue;\n    }\n    // const _propertyValue = (propertyValue === null) ? null : propertyValue.valueOf()\n    const _propertyValue = propertyValue.valueOf();\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      if(mutatorEvents['setProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('setProperty', {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              key: propertyKey,\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['setProperty:$key']) {\n        const type = ['setProperty', propertyKey].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n  else if(pathkey === false) {\n    let propertyKey = $path;\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const typeOfPropertyValue = typeOf($value);\n      let subschema;\n      let submodel;\n      if(schema?.type === 'array') {\n        subschema = schema.target[0].type.value;\n      }\n      if(schema?.type === 'object') {\n        subschema = schema.target[propertyKey].type.value;\n      }\n      else { subschema = undefined; }\n      if(typeOfPropertyValue === 'array') { submodel = []; }\n      else if(typeOfPropertyValue === 'object') { submodel = {}; }\n      else {\n        if(isNaN(Number(propertyKey))) { submodel = {}; }\n        else { submodel = []; }\n      }\n      const modelPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      const submodelOptions = recursiveAssign$1({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      target[propertyKey] = propertyValue;\n      $model.retroReenableEvents();\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject]($value); }\n    }\n    else {\n      propertyValue = $value;\n      target[propertyKey] = propertyValue;\n    }\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      if(mutatorEvents['setProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('setProperty', {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              key: propertyKey,\n              value: _propertyValue,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['setProperty:$key']) {\n        const type = ['setProperty', propertyKey].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n}\n\nfunction setProperty($model, $options, ...$arguments) {\n  let setProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 3) { recursiveAssign$1(options, $arguments[2]); }\n    setProperty = setContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 2) { recursiveAssign$1(options, $arguments[1]); }\n    setProperty = setContent($model, options, ...$arguments);\n  }\n  return setProperty\n}\n\nfunction deleteContent($model, $options) {\n  const { target } = $model;\n  for(const [$targetPropertyKey, $targetPropertyValue] of Object.entries(target)) {\n    $model.delete($targetPropertyKey, $options);\n  }\n  const { path } = $model;\n  const { mutatorEvents } = $options;\n  if(mutatorEvents && mutatorEvents['delete']) {\n    $model.dispatchEvent(\n      new ModelEvent('delete', {\n        path,\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nfunction deleteContentProperty($model, $options, $path) {\n  const { target, path, schema } = $model;\n  const { mutatorEvents, pathkey, subpathError, enableValidation, validationEvents } = $options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue = target[propertyKey];\n    if(subpaths.length) {\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      return propertyValue.delete(subpaths.join('.'), $options)\n    }\n    if(schema && enableValidation) {\n      const differedPropertyProxy = $model.valueOf();\n      delete differedPropertyProxy[propertyKey];\n      const validTargetProp = schema.validate(propertyKey, differedPropertyProxy, {}, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        const validatorEventPath = (path)\n          ? [path, propertyKey].join('.')\n          : String(propertyKey);\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(\n            new ValidatorEvent$1($eventType, Object.assign(validTargetProp, {\n              path: validatorEventPath\n            }), $model)\n          );\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n    if(propertyValue && typeof propertyValue === 'object') {\n      propertyValue.delete($options);\n    }\n    delete target[propertyKey];\n    if(mutatorEvents) {\n      if(mutatorEvents['deleteProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('deleteProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['deleteProperty:$key']) {\n        const type = ['deleteProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            value: propertyValue,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return undefined\n  }\n  else if(pathkey === false) {\n    const propertyKey = $path;\n    const propertyValue = target[propertyKey];\n\n    if(schema && enableValidation) {\n      const differedPropertyProxy = $model.valueOf();\n      delete differedPropertyProxy[propertyKey];\n      const validTargetProp = schema.validate(propertyKey, differedPropertyProxy, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(\n            new ValidatorEvent$1($eventType, validTargetProp, $model)\n          );\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n  \n    if(propertyValue instanceof $model.constructor) {\n      propertyValue.delete($options);\n    }\n    delete target[propertyKey];\n    if(mutatorEvents) {\n      if(mutatorEvents['deleteProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('deleteProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['deleteProperty:$key']) {\n        const type = ['deleteProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            value: propertyValue,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return undefined\n  }\n}\n\nfunction deleteProperty($model, $options, ...$arguments) {\n  let deleteProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 2) { recursiveAssign$1(options, $arguments[1]); }\n    deleteProperty = deleteContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 1) { recursiveAssign$1(options, $arguments[0]); }\n    deleteProperty = deleteContent($model, options, ...$arguments);\n  }\n  return deleteProperty\n}\n\nvar MapProperty = {\n  get: getProperty,\n  set: setProperty,\n  delete: deleteProperty,\n};\n\nconst Defaults = Object.freeze({\n  object: [{\n    keys: ['valueOf'],\n    methodDescriptor: function($methodName, $model) {\n      return { value: function valueOf() { return $model.parse({ type: 'object' }) } }\n    },\n  }, {\n    keys: ['toString'],\n    methodDescriptor: function($methodName, $model) {\n      return { value: function toString($parseSettings = {}) {\n        const replacer = ($parseSettings.replacer !== undefined)\n          ? $parseSettings.replacer : null;\n        const space = ($parseSettings.space !== undefined)\n          ? $parseSettings.space : 0;\n        return $model.parse({ type: 'string', replacer, space })\n      } }\n    }, \n  }, {\n    keys: [\n      'entries', 'fromEntries', 'getOwnPropertyDescriptors', \n      'getOwnPropertyDescriptor', 'getOwnPropertyNames', \n      /* 'getOwnPropertySymbols', */ 'groupBy', 'hasOwn', 'is', \n      'getPrototypeOf', 'isExtensible', 'isFrozen', 'isSealed', \n      'keys', 'preventExtensions', 'values',\n    ],\n    methodDescriptor: function($methodName, $model) {\n      return { value: Object[$methodName].bind(null, $model.valueOf()) }\n    },\n  }, {\n    keys: ['propertyIsEnumerable', 'hasOwnProperty'], \n    methodDescriptor: function($methodName, $model) {\n      return { value: () => $model.parse({ type: 'object' })[$methodName] }\n    },\n  }, {\n    type: 'mutators',\n    keys: Object.keys(ObjectProperty), \n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: ObjectProperty[$methodName].bind(null, $model, $options) }\n    }\n  }],\n  array: [{\n    keys: ['length'], \n    methodDescriptor: function($propertyName, $model, $options) {\n      return {\n        get() { return $model.target.length },\n        set($propertyValue) { $model.target.length = $propertyValue; },\n      }\n    }\n  }, {\n    keys: [\n      'from', 'fromAsync', 'isArray', 'of', \n    ], \n    methodDescriptor: function($methodName, $model) {\n      return { value: Array[$methodName] }\n    }, \n  }, {\n    keys: [\n      'at', 'every', 'filter', 'find', 'findIndex', 'findLast',\n      'findLastIndex', 'flat', 'flatMap', 'forEach', 'includes', \n      'indexOf', 'join', 'lastIndexOf', 'map', 'reduce', 'reduceRight', \n      'slice', 'some', 'sort', 'toReversed',  'toSorted', 'toSpliced', \n      'with', \n    ], \n    methodDescriptor: function($methodName, $model) {\n      return { value: Array.prototype[$methodName].bind(null, $model) }\n    }\n  }, {\n    type: 'mutators',\n    keys: Object.keys(ArrayProperty), \n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: ArrayProperty[$methodName].bind(null, $model, $options) }\n    }\n  }],\n  map: [{\n    type: 'mutators',\n    keys: Object.keys(MapProperty),\n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: MapProperty[$methodName].bind(null, $model, $options) }\n    }\n  }]\n});\nfunction Methods($model) {\n  // Object, Array, Map\n  for(const [$propertyClassName, $propertyClasses] of Object.entries(Defaults)) {\n    for(const $propertyClass of $propertyClasses) {\n      const { keys, methodDescriptor, type } = $propertyClass;\n      for(const $methodName of keys) {\n        if($propertyClassName === 'map' || type === 'mutators') {\n          const modelMethodOptions = structuredClone(\n            $model.options.methods[$propertyClassName][$methodName]\n          );\n          const methodOptions = Object.assign({}, $model.options, modelMethodOptions);\n          delete methodOptions.mutatorEvents;\n          methodOptions.mutatorEvents = modelMethodOptions.mutatorEvents;\n          Object.defineProperty(\n            $model, $methodName, methodDescriptor($methodName, $model, methodOptions)\n          );\n        }\n        else {\n          Object.defineProperty(\n            $model, $methodName, methodDescriptor($methodName,  $model)\n          );\n        }\n      }\n    }\n  }\n  return $model\n}\n\nconst ValidArrayAssigmentMethods = Object.freeze(\n  ['push', 'unshift']\n);\nconst ValidObjectAssigmentMethods = Object.freeze(\n  ['assign', 'defineProperties', 'set']\n);\n\nfunction Assign($model, $properties, $options) {\n  const { type } = $model;\n  const { assignObject, assignArray /*, autoload */ } = $options;\n  if(type === 'array' && ValidArrayAssigmentMethods.includes(assignArray)) {\n    $model[assignArray](...$properties);\n  }\n  else if(type === 'object' && ValidObjectAssigmentMethods.includes(assignObject)) {\n    $model[assignObject]($properties);\n  }\n  return $model\n}\n\nclass Model extends Core {\n  constructor($properties = {}, $schema = null, $options = {}) {\n    super({ propertyDirectory: { accessors: [($target, $property) => {\n      if($property === undefined) { return $target.target }\n      else { return $target.get($property) }\n    }] } });\n    if($properties instanceof Model) { $properties = $properties.valueOf(); }\n    let parent = null;\n    let path = null;\n    try {\n      Object.defineProperty(this, 'mount', { value: function($mount) {\n        const mountParent = $mount.parent;\n        const mountPath = $mount.path;\n        const property = (mountPath) ? mountPath.split('.').pop() : mountPath;\n        if(parent) { parent.unmount(property); }\n        parent = mountParent;\n        path = mountPath;\n      } });\n    }\n    catch($err) { console.error($err); }\n    try {\n      Object.defineProperty(this, 'unmount', { value: function($unmount) {\n        const unmountPath = $unmount.path;\n        delete this[$property];\n      } });\n    }\n    catch($err) { console.error($err); }\n    Object.defineProperties(this, {\n      'options': { configurable: true, get() {\n        const options = Options($options);\n        if(options.events) {\n          this.addEvents(options.events);\n          delete options.events;\n        }\n        if(options.enableEvents) {\n          const typeofEnableEvents = typeof options.enableEvents;\n          if(typeofEnableEvents === 'boolean') { this.enableEvents(); }\n          else if(typeofEnableEvents === 'object') { this.enableEvents(options.enableEvents); }\n        }\n        Object.defineProperty(this, 'options', { value: options });\n        return options\n      } },\n      'parent': { get() { return parent } },\n      'path': { get() { return path } },\n      'key': { get() { return (path) ? path.pop() : path } },\n      'target': { configurable: true, get() {\n        const target = typedObjectLiteral($properties);\n        Object.defineProperty(this, 'target', { value: target });\n        return target\n      } },\n      'type': { configurable: true, get() {\n        const type = typeOf(this.target);\n        Object.defineProperty(this, 'type', { value: type });\n        return type\n      } },\n      'schema': { configurable: true, get() {\n        const typeOfSchema = typeOf($schema);\n        let schema;\n        if(['undefined', 'null'].includes(typeOfSchema)) { schema = null; }\n        else if($schema instanceof Schema) { schema = $schema; }\n        else if(['array', 'object'].includes(typeOfSchema)) { schema = new Schema($schema); }\n        Object.defineProperty(this, 'schema', { value: schema });\n        return schema\n      } },\n    });\n    this.mount({\n      parent: this.options.parent,\n      path: this.options.path\n    });\n    if(localStorage && this.options.localStorage) {\n      Object.defineProperties(this,  {\n        'localStorage': { configurable: true, get() {\n          let _localStorage;\n          let path = [window.location.pathname];\n          if(this.path) { path.push(this.path); }\n          path = path.join('');\n          _localStorage = new LocalStorage(path);\n          Object.defineProperty(this, 'localStorage', { value: _localStorage });\n          return _localStorage\n        } },\n        'save': { value: function save() {\n          return this.localStorage.set(this.valueOf())\n        } },\n        'load': { value: function load() {\n          return this.localStorage.get()\n        } },\n        'unload': { value: function unload() {\n          return this.localStorage.remove()\n        } },\n      });\n    }\n    Methods(this);\n    if(this.options.autoload) {\n      Assign(this, this.load() || $properties, this.options);\n    }\n    else {\n      Assign(this, $properties, this.options);\n    }\n  }\n  retroReenableEvents() {\n    let model = this;\n    while(model) {\n      model.reenableEvents({ enable: true });\n      model = model.parent;\n    }\n    return this\n  }\n  parse($settings = { type: 'object', replacer: null, space: 0 }) {\n    let parsement = typedObjectLiteral(this.type);\n    for(const [\n      $propertyDescriptorName, $propertyDescriptor\n    ] of Object.entries(\n      Object.getOwnPropertyDescriptors(this.target))\n    ) {\n      let { enumerable, value, writable, configurable } = $propertyDescriptor;\n      if(value instanceof Model) {\n        Object.defineProperty(parsement, $propertyDescriptorName, {\n          enumerable, value: value.valueOf(), writable, configurable\n        });\n      }\n      else {\n        Object.defineProperty(parsement, $propertyDescriptorName, {\n          enumerable, value, writable, configurable\n        });\n      }\n    }\n    let { type, replacer, space } = $settings;\n    if(type === 'object') { return parsement }\n    else if(type === 'string') { return JSON.stringify(parsement, replacer, space) }\n    else { return undefined }\n  }\n}\n\nexport { Model, Schema, Validation, Validator, Verification };\n//# sourceMappingURL=objecture.sans.core-plex.js.map\n","const TOKENS = {\n    attribute: /\\[\\s*(?:(?<namespace>\\*|[-\\w\\P{ASCII}]*)\\|)?(?<name>[-\\w\\P{ASCII}]+)\\s*(?:(?<operator>\\W?=)\\s*(?<value>.+?)\\s*(\\s(?<caseSensitive>[iIsS]))?\\s*)?\\]/gu,\n    id: /#(?<name>[-\\w\\P{ASCII}]+)/gu,\n    class: /\\.(?<name>[-\\w\\P{ASCII}]+)/gu,\n    comma: /\\s*,\\s*/g,\n    combinator: /\\s*[\\s>+~]\\s*/g,\n    'pseudo-element': /::(?<name>[-\\w\\P{ASCII}]+)(?:\\((?<argument>¶*)\\))?/gu,\n    'pseudo-class': /:(?<name>[-\\w\\P{ASCII}]+)(?:\\((?<argument>¶*)\\))?/gu,\n    universal: /(?:(?<namespace>\\*|[-\\w\\P{ASCII}]*)\\|)?\\*/gu,\n    type: /(?:(?<namespace>\\*|[-\\w\\P{ASCII}]*)\\|)?(?<name>[-\\w\\P{ASCII}]+)/gu, // this must be last\n};\nconst TRIM_TOKENS = new Set(['combinator', 'comma']);\nconst RECURSIVE_PSEUDO_CLASSES = new Set([\n    'not',\n    'is',\n    'where',\n    'has',\n    'matches',\n    '-moz-any',\n    '-webkit-any',\n    'nth-child',\n    'nth-last-child',\n]);\nconst nthChildRegExp = /(?<index>[\\dn+-]+)\\s+of\\s+(?<subtree>.+)/;\nconst RECURSIVE_PSEUDO_CLASSES_ARGS = {\n    'nth-child': nthChildRegExp,\n    'nth-last-child': nthChildRegExp,\n};\nconst getArgumentPatternByType = (type) => {\n    switch (type) {\n        case 'pseudo-element':\n        case 'pseudo-class':\n            return new RegExp(TOKENS[type].source.replace('(?<argument>¶*)', '(?<argument>.*)'), 'gu');\n        default:\n            return TOKENS[type];\n    }\n};\nfunction gobbleParens(text, offset) {\n    let nesting = 0;\n    let result = '';\n    for (; offset < text.length; offset++) {\n        const char = text[offset];\n        switch (char) {\n            case '(':\n                ++nesting;\n                break;\n            case ')':\n                --nesting;\n                break;\n        }\n        result += char;\n        if (nesting === 0) {\n            return result;\n        }\n    }\n    return result;\n}\nfunction tokenizeBy(text, grammar = TOKENS) {\n    if (!text) {\n        return [];\n    }\n    const tokens = [text];\n    for (const [type, pattern] of Object.entries(grammar)) {\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            if (typeof token !== 'string') {\n                continue;\n            }\n            pattern.lastIndex = 0;\n            const match = pattern.exec(token);\n            if (!match) {\n                continue;\n            }\n            const from = match.index - 1;\n            const args = [];\n            const content = match[0];\n            const before = token.slice(0, from + 1);\n            if (before) {\n                args.push(before);\n            }\n            args.push({\n                ...match.groups,\n                type,\n                content,\n            });\n            const after = token.slice(from + content.length + 1);\n            if (after) {\n                args.push(after);\n            }\n            tokens.splice(i, 1, ...args);\n        }\n    }\n    let offset = 0;\n    for (const token of tokens) {\n        switch (typeof token) {\n            case 'string':\n                throw new Error(`Unexpected sequence ${token} found at index ${offset}`);\n            case 'object':\n                offset += token.content.length;\n                token.pos = [offset - token.content.length, offset];\n                if (TRIM_TOKENS.has(token.type)) {\n                    token.content = token.content.trim() || ' ';\n                }\n                break;\n        }\n    }\n    return tokens;\n}\nconst STRING_PATTERN = /(['\"])([^\\\\\\n]+?)\\1/g;\nconst ESCAPE_PATTERN = /\\\\./g;\nfunction tokenize(selector, grammar = TOKENS) {\n    // Prevent leading/trailing whitespaces from being interpreted as combinators\n    selector = selector.trim();\n    if (selector === '') {\n        return [];\n    }\n    const replacements = [];\n    // Replace escapes with placeholders.\n    selector = selector.replace(ESCAPE_PATTERN, (value, offset) => {\n        replacements.push({ value, offset });\n        return '\\uE000'.repeat(value.length);\n    });\n    // Replace strings with placeholders.\n    selector = selector.replace(STRING_PATTERN, (value, quote, content, offset) => {\n        replacements.push({ value, offset });\n        return `${quote}${'\\uE001'.repeat(content.length)}${quote}`;\n    });\n    // Replace parentheses with placeholders.\n    {\n        let pos = 0;\n        let offset;\n        while ((offset = selector.indexOf('(', pos)) > -1) {\n            const value = gobbleParens(selector, offset);\n            replacements.push({ value, offset });\n            selector = `${selector.substring(0, offset)}(${'¶'.repeat(value.length - 2)})${selector.substring(offset + value.length)}`;\n            pos = offset + value.length;\n        }\n    }\n    // Now we have no nested structures and we can parse with regexes\n    const tokens = tokenizeBy(selector, grammar);\n    // Replace placeholders in reverse order.\n    const changedTokens = new Set();\n    for (const replacement of replacements.reverse()) {\n        for (const token of tokens) {\n            const { offset, value } = replacement;\n            if (!(token.pos[0] <= offset &&\n                offset + value.length <= token.pos[1])) {\n                continue;\n            }\n            const { content } = token;\n            const tokenOffset = offset - token.pos[0];\n            token.content =\n                content.slice(0, tokenOffset) +\n                    value +\n                    content.slice(tokenOffset + value.length);\n            if (token.content !== content) {\n                changedTokens.add(token);\n            }\n        }\n    }\n    // Update changed tokens.\n    for (const token of changedTokens) {\n        const pattern = getArgumentPatternByType(token.type);\n        if (!pattern) {\n            throw new Error(`Unknown token type: ${token.type}`);\n        }\n        pattern.lastIndex = 0;\n        const match = pattern.exec(token.content);\n        if (!match) {\n            throw new Error(`Unable to parse content for ${token.type}: ${token.content}`);\n        }\n        Object.assign(token, match.groups);\n    }\n    return tokens;\n}\n/**\n *  Convert a flat list of tokens into a tree of complex & compound selectors\n */\nfunction nestTokens(tokens, { list = true } = {}) {\n    if (list && tokens.find((t) => t.type === 'comma')) {\n        const selectors = [];\n        const temp = [];\n        for (let i = 0; i < tokens.length; i++) {\n            if (tokens[i].type === 'comma') {\n                if (temp.length === 0) {\n                    throw new Error('Incorrect comma at ' + i);\n                }\n                selectors.push(nestTokens(temp, { list: false }));\n                temp.length = 0;\n            }\n            else {\n                temp.push(tokens[i]);\n            }\n        }\n        if (temp.length === 0) {\n            throw new Error('Trailing comma');\n        }\n        else {\n            selectors.push(nestTokens(temp, { list: false }));\n        }\n        return { type: 'list', list: selectors };\n    }\n    for (let i = tokens.length - 1; i >= 0; i--) {\n        let token = tokens[i];\n        if (token.type === 'combinator') {\n            let left = tokens.slice(0, i);\n            let right = tokens.slice(i + 1);\n            if (left.length === 0) {\n                return {\n                    type: 'relative',\n                    combinator: token.content,\n                    right: nestTokens(right),\n                };\n            }\n            return {\n                type: 'complex',\n                combinator: token.content,\n                left: nestTokens(left),\n                right: nestTokens(right),\n            };\n        }\n    }\n    switch (tokens.length) {\n        case 0:\n            throw new Error('Could not build AST.');\n        case 1:\n            // If we're here, there are no combinators, so it's just a list.\n            return tokens[0];\n        default:\n            return {\n                type: 'compound',\n                list: [...tokens], // clone to avoid pointers messing up the AST\n            };\n    }\n}\n/**\n * Traverse an AST in depth-first order\n */\nfunction* flatten(node, \n/**\n * @internal\n */\nparent) {\n    switch (node.type) {\n        case 'list':\n            for (let child of node.list) {\n                yield* flatten(child, node);\n            }\n            break;\n        case 'complex':\n            yield* flatten(node.left, node);\n            yield* flatten(node.right, node);\n            break;\n        case 'relative':\n            yield* flatten(node.right, node);\n            break;\n        case 'compound':\n            yield* node.list.map((token) => [token, node]);\n            break;\n        default:\n            yield [node, parent];\n    }\n}\n/**\n * Traverse an AST (or part thereof), in depth-first order\n */\nfunction walk(node, visit, \n/**\n * @internal\n */\nparent) {\n    if (!node) {\n        return;\n    }\n    for (const [token, ast] of flatten(node, parent)) {\n        visit(token, ast);\n    }\n}\n/**\n * Parse a CSS selector\n *\n * @param selector - The selector to parse\n * @param options.recursive - Whether to parse the arguments of pseudo-classes like :is(), :has() etc. Defaults to true.\n * @param options.list - Whether this can be a selector list (A, B, C etc). Defaults to true.\n */\nfunction parse(selector, { recursive = true, list = true } = {}) {\n    const tokens = tokenize(selector);\n    if (!tokens) {\n        return;\n    }\n    const ast = nestTokens(tokens, { list });\n    if (!recursive) {\n        return ast;\n    }\n    for (const [token] of flatten(ast)) {\n        if (token.type !== 'pseudo-class' || !token.argument) {\n            continue;\n        }\n        if (!RECURSIVE_PSEUDO_CLASSES.has(token.name)) {\n            continue;\n        }\n        let argument = token.argument;\n        const childArg = RECURSIVE_PSEUDO_CLASSES_ARGS[token.name];\n        if (childArg) {\n            const match = childArg.exec(argument);\n            if (!match) {\n                continue;\n            }\n            Object.assign(token, match.groups);\n            argument = match.groups['subtree'];\n        }\n        if (!argument) {\n            continue;\n        }\n        Object.assign(token, {\n            subtree: parse(argument, {\n                recursive: true,\n                list: true,\n            }),\n        });\n    }\n    return ast;\n}\n/**\n * Converts the given list or (sub)tree to a string.\n */\nfunction stringify(listOrNode) {\n    if (Array.isArray(listOrNode)) {\n        return listOrNode.map((token) => token.content).join(\"\");\n    }\n    switch (listOrNode.type) {\n        case \"list\":\n            return listOrNode.list.map(stringify).join(\",\");\n        case \"relative\":\n            return (listOrNode.combinator +\n                stringify(listOrNode.right));\n        case \"complex\":\n            return (stringify(listOrNode.left) +\n                listOrNode.combinator +\n                stringify(listOrNode.right));\n        case \"compound\":\n            return listOrNode.list.map(stringify).join(\"\");\n        default:\n            return listOrNode.content;\n    }\n}\n/**\n * To convert the specificity array to a number\n */\nfunction specificityToNumber(specificity, base) {\n    base = base || Math.max(...specificity) + 1;\n    return (specificity[0] * (base << 1) + specificity[1] * base + specificity[2]);\n}\n/**\n * Calculate specificity of a selector.\n *\n * If the selector is a list, the max specificity is returned.\n */\nfunction specificity(selector) {\n    let ast = selector;\n    if (typeof ast === 'string') {\n        ast = parse(ast, { recursive: true });\n    }\n    if (!ast) {\n        return [];\n    }\n    if (ast.type === 'list' && 'list' in ast) {\n        let base = 10;\n        const specificities = ast.list.map((ast) => {\n            const sp = specificity(ast);\n            base = Math.max(base, ...specificity(ast));\n            return sp;\n        });\n        const numbers = specificities.map((ast) => specificityToNumber(ast, base));\n        return specificities[numbers.indexOf(Math.max(...numbers))];\n    }\n    const ret = [0, 0, 0];\n    for (const [token] of flatten(ast)) {\n        switch (token.type) {\n            case 'id':\n                ret[0]++;\n                break;\n            case 'class':\n            case 'attribute':\n                ret[1]++;\n                break;\n            case 'pseudo-element':\n            case 'type':\n                ret[2]++;\n                break;\n            case 'pseudo-class':\n                if (token.name === 'where') {\n                    break;\n                }\n                if (!RECURSIVE_PSEUDO_CLASSES.has(token.name) ||\n                    !token.subtree) {\n                    ret[1]++;\n                    break;\n                }\n                const sub = specificity(token.subtree);\n                sub.forEach((s, i) => (ret[i] += s));\n                // :nth-child() & :nth-last-child() add (0, 1, 0) to the specificity of their most complex selector\n                if (token.name === 'nth-child' ||\n                    token.name === 'nth-last-child') {\n                    ret[1]++;\n                }\n        }\n    }\n    return ret;\n}\n\nexport { RECURSIVE_PSEUDO_CLASSES, RECURSIVE_PSEUDO_CLASSES_ARGS, TOKENS, TRIM_TOKENS, flatten, gobbleParens, parse, specificity, specificityToNumber, stringify, tokenize, tokenizeBy, walk };\n","export default class QuerySelector {\n  #settings\n  #enable\n  constructor($settings) {\n    this.#settings = $settings\n  }\n  get context() { return this.#settings.context }\n  get method() { return this.#settings.method }\n  get name() { return this.#settings.name }\n  get selector() { return this.#settings.selector }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    if($enable === this.#enable) return\n    if($enable === true) {\n      const { context, name, method, selector } = this\n      const $this = this\n      Object.defineProperty(context.querySelectors, name, {\n        configurable: true, enumerable: true, \n        get() { return context[method](selector) }\n      })\n    }\n    else if($enable === false) {\n      delete this.context.querySelectors[this.name]\n    }\n    this.#enable = $enable\n  }\n}","import * as parsel from '../../../node_modules/parsel-js/dist/parsel.js'\nconst Combinators = {\n  descendant: \" \",\n  child: \">\",\n  subsequentSibling: \"~\",\n  nextSibling: \"+\",\n}\nfunction Query($element, $queryMethod, $queryString) {\n  let query = []\n  let queryString = $queryString\n  let queryTokens = parsel.tokenize(queryString)\n  // Orient Query Tokens To Scope\n  if(queryTokens[0].content !== ':scope') {\n    queryString = [':scope', queryString].join(' ')\n    queryTokens = parsel.tokenize(queryString)\n  }\n  // Define Scope\n  const scope = queryTokens[0]\n  const scopeCombinator = queryTokens[1]\n  // Define Scope Query\n  const scopeQueryString = parsel.stringify(queryTokens.slice(2))\n  const scopeQueryTokens = parsel.tokenize(scopeQueryString)\n  const scopeQueryParse = parsel.parse(scopeQueryString)\n  const children = Array.from($element.children)\n  iterateChildren: \n  for(const [$childIndex, $child] of Object.entries(children)) {\n    // Scope Query Type: Complex\n    if(scopeQueryParse.type === 'complex') {\n      const { left, combinator, right } = scopeQueryParse\n      // Lexter\n      const lexter = Query($element, $queryMethod, parsel.stringify(left))\n      // Dexter\n      let dexter\n      if(lexter.length) {\n        // Combinator: Descendant \" \"\n        if(combinator === Combinators.descendant) {\n          dexter = Query($child, $queryMethod, [':scope', parsel.stringify(right)].join(Combinators.descendant))\n          query = query.concat(dexter)\n        }\n        // Combinator: Child \">\"\n        else if(combinator === Combinators.child) {\n          dexter = Query($child, $queryMethod, [':scope', parsel.stringify(right)].join(Combinators.child))\n          query = query.concat(dexter)\n        }\n        // Combinator: Subsequent Sibling \"~\"\n        else if(combinator === Combinators.subsequentSibling) {\n          dexter = Query({ children: children.slice($childIndex + 1) }, $queryMethod, parsel.stringify(right))\n          query = query.concat(dexter)\n        }\n        // Combinator: Next Sibling \"+\"\n        else if(combinator === Combinators.nextSibling) {\n          dexter = Query({ children: children.slice($childIndex + 1, $childIndex + 2) }, $queryMethod, parsel.stringify(right))\n          query = query.concat(dexter)\n        }\n      }\n    }\n    // Scope Query Type: Not Complex\n    else {\n      // Child: Matches Query String\n      if($child.matches(scopeQueryString)) query = query.concat($child)\n      // Descendant: Query Selector String\n      if(scopeCombinator.content === Combinators.descendant) {\n        const childQuery = $child[$queryMethod](scopeQueryString)\n        if(childQuery instanceof NodeList) query = query.concat(...childQuery)\n        else if(childQuery instanceof Node) query = query.concat(childQuery) \n      }\n    }\n    if($queryMethod === 'querySelector' && query.length > 0) return query.slice(0, 1)\n  }\n  return query\n}\nexport default Query","import * as parsel from '../../node_modules/parsel-js/dist/parsel.js'\nimport Core from '../core/index.js'\nimport QuerySelector from './querySelector/index.js'\nimport Query from './query/index.js'\nimport Settings from './settings/index.js'\nimport Options from './options/index.js'\nexport default class View extends Core {\n  #templates\n  #scope\n  #parentElement\n  #_template\n  #children\n  // #querySelectors = {}\n  constructor($settings = {}, $options = {}) {\n    super(Settings($settings), Options($options))\n    Object.defineProperties(this, {\n      _querySelectors: {\n        enumerable: false, writable: false, configurable: false,\n        value: {},\n      },\n      querySelectors: {\n        enumerable: true,\n        get() { return this._querySelectors },\n      },\n      qs: {\n        enumerable: true,\n        get() { return this.querySelectors },\n      },\n    })\n    this.addQuerySelectors(this.settings.querySelectors)\n    const {\n      enableQuerySelectors, enableEvents\n    } = this.options\n    if(enableQuerySelectors) this.enableQuerySelectors()\n    if(enableEvents) this.enableEvents()\n  }\n  get templates() {\n    if(this.#templates !== undefined) return this.#templates\n    this.#templates = this.settings.templates\n    return this.#templates\n  }\n  get scope() {\n    if(this.#scope !== undefined) return this.#scope\n    this.#scope = this.settings.scope\n    return this.#scope\n  }\n  get parentElement() {\n    if(this.#parentElement !== undefined) return this.#parentElement\n    this.#parentElement = this.settings.parentElement\n    return this.#parentElement\n  }\n  get #template() {\n    if(this.#_template !== undefined) { return this.#_template }\n    this.#_template = document.createElement('template')\n    return this.#_template\n  }\n  set #template($templateString) {\n    this.disableQuerySelectors()\n    this.#template.innerHTML = $templateString\n    this.children = this.#template.content.children\n    this.parentElement.append(...this.children.values())\n    this.enableQuerySelectors()\n    this.retroReenableEvents()\n  }\n  get children() {\n    if(this.#children !== undefined) return this.#children\n    this.#children = new Map()\n    return this.#children\n  }\n  set children($children) {\n    const children = this.children\n    children.forEach(($child, $childIndex) => $child?.parentElement.removeChild($child))\n    children.clear()\n    Array.from($children).forEach(($child, $childIndex) => {\n      children.set($childIndex, $child)\n    })\n  }\n  querySelector($queryString, $queryScope) {\n    const query = this.#query('querySelector', $queryString, $queryScope)\n    return query[0] || null\n  }\n  querySelectorAll($queryString, $queryScope) {\n    const query = this.#query('querySelectorAll', $queryString, $queryScope)\n    return query\n  }\n  #query($queryMethod, $queryString) {\n    const queryElement = (this.scope === 'template')\n      ? { children: Array.from(this.children.values()) }\n      : { children: Array.from(this.parentElement.children) }\n    return Query(queryElement, $queryMethod, $queryString)\n  }\n  addQuerySelectors($queryMethods) {\n    if($queryMethods === undefined) return this\n    const { querySelectors } = this.settings\n    for(const [$queryMethod, $selectors] of Object.entries($queryMethods)) {\n      for(const [$selectorName, $selector] of Object.entries($selectors)) {\n        querySelectors[$queryMethod] = querySelectors[$queryMethod] || {}\n        querySelectors[$queryMethod][$selectorName] = new QuerySelector({\n          context: this,\n          name: $selectorName,\n          method: $queryMethod,\n          selector: $selector,\n          enable: false,\n        })\n      }\n    }\n    return this\n  }\n  removeQuerySelectors($queryMethods) {\n    $queryMethods = $queryMethods || this.settings.querySelectors\n    for(const [\n      $queryMethod, $selectors\n    ] of Object.entries($queryMethods)) {\n      for(const [\n        $selectorName, $selector\n      ] of Object.entries($selectors)) {\n        if(this.settings.querySelectors[$queryMethod] !== undefined) {\n          delete this.settings.querySelectors[$queryMethod][$selectorName]\n        }\n      }\n    }\n    return this\n  }\n  enableQuerySelectors($queryMethods) {\n    $queryMethods = $queryMethods || this.settings.querySelectors\n    const $this = this \n    for(const $selectors of Object.values($queryMethods)) {\n      for(const $selector of Object.values($selectors)) {\n        $selector.enable = true\n      }\n    }\n    return this\n  }\n  disableQuerySelectors($queryMethods) {\n    $queryMethods = $queryMethods || this.settings.querySelectors\n    for(const $selectors of Object.values($queryMethods)) {\n      for(const $selector of Object.values($selectors)) {\n        $selector.enable = false\n      }\n    }\n    return this\n  }\n  render($models = {}, $template = 'default') {\n    this.#template = this.templates[$template]($models)\n    return this\n  }\n}","import { recursiveAssign } from 'recourse'\nexport default ($settings) => recursiveAssign({\n  scope: 'template', // 'parent',\n  templates: {},\n  querySelectors: {},\n}, $settings)","export default ($options) => Object.assign({\n  events: false,\n  eventListeners: false,\n  enableEvents: true,\n  enableQuerySelectors: true,\n}, $options)\n","const Events = {\n  // Fetch Response Interface Events\n  // OK\n  'ok': ($response, $requestMethod) => {\n    const eventType = `${$requestMethod}:ok`\n    const event = new CustomEvent(eventType, {\n      detail: {\n        response: $response,\n      },\n    })\n    return event\n  },\n  // Status\n  'status': ($response, $requestMethod) => {\n    const eventType = `${$requestMethod}:status`\n    const event = new CustomEvent(eventType, {\n      detail: {\n        response: $response,\n      },\n    })\n    return event\n  },\n  // Status Code\n  'statusCode': ($response, $requestMethod) => {\n    const eventType = `${$requestMethod}:status:${$response.status}`\n    const event = new CustomEvent(eventType, {\n      detail: {\n        response: $response,\n      },\n    })\n    return event\n  },\n  // Status Text\n  'statusText': ($response, $requestMethod) => {\n    const eventType = `${$requestMethod}:statusText`\n    const event = new CustomEvent(eventType, {\n      detail: {\n        response: $response,\n      },\n    })\n    return event\n  },\n  // Status Text Message\n  'statusTextMessage': ($response, $requestMethod) => {\n    const eventType = `${$requestMethod}:statusText:${$response.statusText}`\n    const event = new CustomEvent(eventType, {\n      detail: {\n        response: $response,\n      },\n    })\n    return event\n  },\n  // Abort\n  'abort': ($abortController) => {\n    const eventType = 'abort'\n    const event = new CustomEvent(eventType, {\n      detail: {\n        abortController: $abortController,\n      },\n    })\n    return event\n  },\n}\n\nexport default Events","import Events from '../interfaces/response/events/index.js'\nexport default class FetchRoute extends EventTarget {\n  #settings = {}\n  #name\n  #origin\n  #path\n  constructor($settings = {}) {\n    super()\n    this.#settings = $settings\n    this.#name = this.#settings.name\n    this.#origin = this.#settings.origin\n    this.#path = this.#settings.path\n    this.addMethods(this.#settings.methods)\n  }\n  addMethods($methods) {\n    const $this = this\n    iterateMethods:\n    for(const [\n      $methodName, $methodOptions\n    ] of Object.entries($methods)) {\n      const abortKey = `${$methodName}AbortSignal`\n      Object.defineProperties($this, {\n        [abortKey]: {\n          enumerable: false,\n          writable: true,\n          value: undefined,\n        },\n        [$methodName]: {\n          enumerable: true,\n          writable: false,\n          configurable: false,\n          value: async function() {\n            const $arguments = [...arguments]\n            let $resourcePath, $resourceOptions\n            if($arguments.length === 0) {\n              $resourcePath = ''\n              $resourceOptions = {}\n            } else\n            if($arguments.length === 1) {\n              if(typeof $arguments[0] === 'string') {\n                $resourcePath = $arguments[0]\n                $resourceOptions = {}\n              } else\n              if(typeof $arguments[0] === 'object') {\n                $resourcePath = ''\n                $resourceOptions = $arguments[0]\n              }\n            } else\n            if($arguments.length === 2) {\n              if(typeof $arguments[0] === 'string') {\n                $resourcePath = $arguments[0]\n              }\n              if(typeof $arguments[1] === 'object') {\n                $resourceOptions = $arguments[1]\n              }\n            }\n            const methodName = $methodName\n            const resourceOptions = Object.assign({}, $methodOptions)\n            let { urlSearchParams, headers, body, priority } = $resourceOptions\n            let pathParameters = new URLSearchParams(urlSearchParams).toString()\n            if(pathParameters.length > 0) pathParameters = '?'.concat(pathParameters)\n            if(headers !== undefined) Object.assign(resourceOptions.headers, headers)\n            if(body !== undefined) resourceOptions.body = body\n            if(priority !== undefined) resourceOptions.priority = priority\n            const resource = String.prototype.concat(\n              $this.#origin, this.#decodePath($this.#path, $resourcePath), pathParameters\n            )\n            if($this[abortKey] !== undefined) {\n              $this[abortKey].abort()\n              $this.createEvent($this, 'abort', $this[abortKey])\n            }\n            $this[abortKey] = new AbortController()\n            resourceOptions.signal = $this[abortKey].signal\n            let fetchSource = await fetch(resource, resourceOptions)\n            .then(($fetchSource) => {\n              $this\n              .createEvent($this, 'ok', $fetchSource.clone(), $methodName)\n              .createEvent($this, 'status', $fetchSource.clone(), $methodName)\n              .createEvent($this, 'statusCode', $fetchSource.clone(), $methodName)\n              .createEvent($this, 'statusText', $fetchSource.clone(), $methodName)\n              .createEvent($this, 'statusTextMessage', $fetchSource.clone(), $methodName)\n              return $fetchSource\n            })\n            .catch(($err) => { /* console.error($err) */ })\n            return fetchSource\n          }\n        }\n      })\n    }\n  }\n  #decodePath($path, $resourcePath) {\n    if($path.includes(':') === false) return $path \n    const pathFragments = $path.split('/')\n    const resourcePathFragments = $resourcePath.split('/')\n    if(pathFragments.length !== resourcePathFragments.length) return $path\n    let decodedPathFragments = []\n    let pathFragmentsIndex = 0\n    iteratePathFragments: \n    while(pathFragmentsIndex < pathFragments.length) {\n      let pathFragment = pathFragments[pathFragmentsIndex]\n      const resourcePathFragment = resourcePathFragments[pathFragmentsIndex]\n      if(pathFragment.includes(':')) {\n        pathFragment = resourcePathFragments[pathFragmentsIndex]\n      } else if(\n        pathFragment !== resourcePathFragment\n      ) {\n        return $path\n      }\n      decodedPathFragments.push(pathFragment)\n      pathFragmentsIndex++\n    }\n    return decodedPathFragments.join('/')\n  }\n  removeMethods($methods) {\n    iterateMethods: \n    for(const $methodName of Object.values($methods)) {\n      const abortKey = `${$methodName}AbortSignal`\n      if(this[abortKey].signal.aborted === false) {\n        this[abortKey].abort()\n      }\n      delete this[abortKey]\n      delete this[$methodName]\n    }\n  }\n  createEvent($eventTarget, $eventType, $response, $requestMethod) {\n    const event = Events[$eventType]($response, $requestMethod)\n    $eventTarget.dispatchEvent(event)\n    return this\n  }\n}","import FetchRoute from './fetchRoute/index.js'\nimport Core from '../../core/index.js'\nimport Settings from './settings/index.js'\nimport Options from './options/index.js'\nexport default class FetchRouter extends Core {\n  #scheme\n  #domain\n  #port\n  #_authority\n  #_origin\n  #routes = {}\n  constructor($settings, $options) {\n    super(Settings($settings), Options($options))\n    const { scheme, domain, port, routes } = $settings\n    this.#scheme = scheme\n    this.#domain = domain\n    this.#port = port\n    this.routes = routes\n    if($options.enableEvents === true) this.enableEvents()\n  }\n  get #authority() {\n    if(this.#_authority === undefined) {\n      this.#_authority = String.prototype.concat(\n        this.#domain, ':', this.#port\n      )\n    }\n    return this.#_authority\n  }\n  get #origin() {\n    if(this.#_origin === undefined) {\n      this.#_origin = String.prototype.concat(\n        this.#scheme, '://', this.#authority\n      )\n    }\n    return this.#_origin\n  }\n  get routes() { return this.#routes }\n  set routes($routes) { this.addRoutes($routes) }\n  addRoutes($routes) {\n    const $this = this\n    const _routes = this.#routes\n    for(let [\n      $routePath, $routeSettings\n    ] of Object.entries($routes)) {\n      $routeSettings.origin = this.#origin\n      $routeSettings.path = $routePath\n      _routes[$routeSettings.name] = new FetchRoute($routeSettings)\n    }\n    return this\n  }\n  removeRoutes($routes) {\n    const _routes = this.#routes\n    for(const $path of $routes) {\n      delete _routes[$path]\n    }\n    return this\n  }\n}\n","export default ($settings) => Object.assign({}, $settings)","export default ($options) => Object.assign({\n  enableEvents: true\n}, $options)","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenData = void 0;\nexports.parse = parse;\nexports.compile = compile;\nexports.match = match;\nexports.pathToRegexp = pathToRegexp;\nexports.stringify = stringify;\nconst DEFAULT_DELIMITER = \"/\";\nconst NOOP_VALUE = (value) => value;\nconst ID_START = /^[$_\\p{ID_Start}]$/u;\nconst ID_CONTINUE = /^[$\\u200c\\u200d\\p{ID_Continue}]$/u;\nconst DEBUG_URL = \"https://git.new/pathToRegexpError\";\nconst SIMPLE_TOKENS = {\n    // Groups.\n    \"{\": \"{\",\n    \"}\": \"}\",\n    // Reserved.\n    \"(\": \"(\",\n    \")\": \")\",\n    \"[\": \"[\",\n    \"]\": \"]\",\n    \"+\": \"+\",\n    \"?\": \"?\",\n    \"!\": \"!\",\n};\n/**\n * Escape text for stringify to path.\n */\nfunction escapeText(str) {\n    return str.replace(/[{}()\\[\\]+?!:*]/g, \"\\\\$&\");\n}\n/**\n * Escape a regular expression string.\n */\nfunction escape(str) {\n    return str.replace(/[.+*?^${}()[\\]|/\\\\]/g, \"\\\\$&\");\n}\n/**\n * Tokenize input string.\n */\nfunction* lexer(str) {\n    const chars = [...str];\n    let i = 0;\n    function name() {\n        let value = \"\";\n        if (ID_START.test(chars[++i])) {\n            value += chars[i];\n            while (ID_CONTINUE.test(chars[++i])) {\n                value += chars[i];\n            }\n        }\n        else if (chars[i] === '\"') {\n            let pos = i;\n            while (i < chars.length) {\n                if (chars[++i] === '\"') {\n                    i++;\n                    pos = 0;\n                    break;\n                }\n                if (chars[i] === \"\\\\\") {\n                    value += chars[++i];\n                }\n                else {\n                    value += chars[i];\n                }\n            }\n            if (pos) {\n                throw new TypeError(`Unterminated quote at ${pos}: ${DEBUG_URL}`);\n            }\n        }\n        if (!value) {\n            throw new TypeError(`Missing parameter name at ${i}: ${DEBUG_URL}`);\n        }\n        return value;\n    }\n    while (i < chars.length) {\n        const value = chars[i];\n        const type = SIMPLE_TOKENS[value];\n        if (type) {\n            yield { type, index: i++, value };\n        }\n        else if (value === \"\\\\\") {\n            yield { type: \"ESCAPED\", index: i++, value: chars[i++] };\n        }\n        else if (value === \":\") {\n            const value = name();\n            yield { type: \"PARAM\", index: i, value };\n        }\n        else if (value === \"*\") {\n            const value = name();\n            yield { type: \"WILDCARD\", index: i, value };\n        }\n        else {\n            yield { type: \"CHAR\", index: i, value: chars[i++] };\n        }\n    }\n    return { type: \"END\", index: i, value: \"\" };\n}\nclass Iter {\n    constructor(tokens) {\n        this.tokens = tokens;\n    }\n    peek() {\n        if (!this._peek) {\n            const next = this.tokens.next();\n            this._peek = next.value;\n        }\n        return this._peek;\n    }\n    tryConsume(type) {\n        const token = this.peek();\n        if (token.type !== type)\n            return;\n        this._peek = undefined; // Reset after consumed.\n        return token.value;\n    }\n    consume(type) {\n        const value = this.tryConsume(type);\n        if (value !== undefined)\n            return value;\n        const { type: nextType, index } = this.peek();\n        throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}: ${DEBUG_URL}`);\n    }\n    text() {\n        let result = \"\";\n        let value;\n        while ((value = this.tryConsume(\"CHAR\") || this.tryConsume(\"ESCAPED\"))) {\n            result += value;\n        }\n        return result;\n    }\n}\n/**\n * Tokenized path instance.\n */\nclass TokenData {\n    constructor(tokens) {\n        this.tokens = tokens;\n    }\n}\nexports.TokenData = TokenData;\n/**\n * Parse a string for the raw tokens.\n */\nfunction parse(str, options = {}) {\n    const { encodePath = NOOP_VALUE } = options;\n    const it = new Iter(lexer(str));\n    function consume(endType) {\n        const tokens = [];\n        while (true) {\n            const path = it.text();\n            if (path)\n                tokens.push({ type: \"text\", value: encodePath(path) });\n            const param = it.tryConsume(\"PARAM\");\n            if (param) {\n                tokens.push({\n                    type: \"param\",\n                    name: param,\n                });\n                continue;\n            }\n            const wildcard = it.tryConsume(\"WILDCARD\");\n            if (wildcard) {\n                tokens.push({\n                    type: \"wildcard\",\n                    name: wildcard,\n                });\n                continue;\n            }\n            const open = it.tryConsume(\"{\");\n            if (open) {\n                tokens.push({\n                    type: \"group\",\n                    tokens: consume(\"}\"),\n                });\n                continue;\n            }\n            it.consume(endType);\n            return tokens;\n        }\n    }\n    const tokens = consume(\"END\");\n    return new TokenData(tokens);\n}\n/**\n * Compile a string to a template function for the path.\n */\nfunction compile(path, options = {}) {\n    const { encode = encodeURIComponent, delimiter = DEFAULT_DELIMITER } = options;\n    const data = path instanceof TokenData ? path : parse(path, options);\n    const fn = tokensToFunction(data.tokens, delimiter, encode);\n    return function path(data = {}) {\n        const [path, ...missing] = fn(data);\n        if (missing.length) {\n            throw new TypeError(`Missing parameters: ${missing.join(\", \")}`);\n        }\n        return path;\n    };\n}\nfunction tokensToFunction(tokens, delimiter, encode) {\n    const encoders = tokens.map((token) => tokenToFunction(token, delimiter, encode));\n    return (data) => {\n        const result = [\"\"];\n        for (const encoder of encoders) {\n            const [value, ...extras] = encoder(data);\n            result[0] += value;\n            result.push(...extras);\n        }\n        return result;\n    };\n}\n/**\n * Convert a single token into a path building function.\n */\nfunction tokenToFunction(token, delimiter, encode) {\n    if (token.type === \"text\")\n        return () => [token.value];\n    if (token.type === \"group\") {\n        const fn = tokensToFunction(token.tokens, delimiter, encode);\n        return (data) => {\n            const [value, ...missing] = fn(data);\n            if (!missing.length)\n                return [value];\n            return [\"\"];\n        };\n    }\n    const encodeValue = encode || NOOP_VALUE;\n    if (token.type === \"wildcard\" && encode !== false) {\n        return (data) => {\n            const value = data[token.name];\n            if (value == null)\n                return [\"\", token.name];\n            if (!Array.isArray(value) || value.length === 0) {\n                throw new TypeError(`Expected \"${token.name}\" to be a non-empty array`);\n            }\n            return [\n                value\n                    .map((value, index) => {\n                    if (typeof value !== \"string\") {\n                        throw new TypeError(`Expected \"${token.name}/${index}\" to be a string`);\n                    }\n                    return encodeValue(value);\n                })\n                    .join(delimiter),\n            ];\n        };\n    }\n    return (data) => {\n        const value = data[token.name];\n        if (value == null)\n            return [\"\", token.name];\n        if (typeof value !== \"string\") {\n            throw new TypeError(`Expected \"${token.name}\" to be a string`);\n        }\n        return [encodeValue(value)];\n    };\n}\n/**\n * Transform a path into a match function.\n */\nfunction match(path, options = {}) {\n    const { decode = decodeURIComponent, delimiter = DEFAULT_DELIMITER } = options;\n    const { regexp, keys } = pathToRegexp(path, options);\n    const decoders = keys.map((key) => {\n        if (decode === false)\n            return NOOP_VALUE;\n        if (key.type === \"param\")\n            return decode;\n        return (value) => value.split(delimiter).map(decode);\n    });\n    return function match(input) {\n        const m = regexp.exec(input);\n        if (!m)\n            return false;\n        const path = m[0];\n        const params = Object.create(null);\n        for (let i = 1; i < m.length; i++) {\n            if (m[i] === undefined)\n                continue;\n            const key = keys[i - 1];\n            const decoder = decoders[i - 1];\n            params[key.name] = decoder(m[i]);\n        }\n        return { path, params };\n    };\n}\nfunction pathToRegexp(path, options = {}) {\n    const { delimiter = DEFAULT_DELIMITER, end = true, sensitive = false, trailing = true, } = options;\n    const keys = [];\n    const sources = [];\n    const flags = sensitive ? \"\" : \"i\";\n    const paths = Array.isArray(path) ? path : [path];\n    const items = paths.map((path) => path instanceof TokenData ? path : parse(path, options));\n    for (const { tokens } of items) {\n        for (const seq of flatten(tokens, 0, [])) {\n            const regexp = sequenceToRegExp(seq, delimiter, keys);\n            sources.push(regexp);\n        }\n    }\n    let pattern = `^(?:${sources.join(\"|\")})`;\n    if (trailing)\n        pattern += `(?:${escape(delimiter)}$)?`;\n    pattern += end ? \"$\" : `(?=${escape(delimiter)}|$)`;\n    const regexp = new RegExp(pattern, flags);\n    return { regexp, keys };\n}\n/**\n * Generate a flat list of sequence tokens from the given tokens.\n */\nfunction* flatten(tokens, index, init) {\n    if (index === tokens.length) {\n        return yield init;\n    }\n    const token = tokens[index];\n    if (token.type === \"group\") {\n        const fork = init.slice();\n        for (const seq of flatten(token.tokens, 0, fork)) {\n            yield* flatten(tokens, index + 1, seq);\n        }\n    }\n    else {\n        init.push(token);\n    }\n    yield* flatten(tokens, index + 1, init);\n}\n/**\n * Transform a flat sequence of tokens into a regular expression.\n */\nfunction sequenceToRegExp(tokens, delimiter, keys) {\n    let result = \"\";\n    let backtrack = \"\";\n    let isSafeSegmentParam = true;\n    for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n        if (token.type === \"text\") {\n            result += escape(token.value);\n            backtrack += token.value;\n            isSafeSegmentParam || (isSafeSegmentParam = token.value.includes(delimiter));\n            continue;\n        }\n        if (token.type === \"param\" || token.type === \"wildcard\") {\n            if (!isSafeSegmentParam && !backtrack) {\n                throw new TypeError(`Missing text after \"${token.name}\": ${DEBUG_URL}`);\n            }\n            if (token.type === \"param\") {\n                result += `(${negate(delimiter, isSafeSegmentParam ? \"\" : backtrack)}+)`;\n            }\n            else {\n                result += `([\\\\s\\\\S]+)`;\n            }\n            keys.push(token);\n            backtrack = \"\";\n            isSafeSegmentParam = false;\n            continue;\n        }\n    }\n    return result;\n}\nfunction negate(delimiter, backtrack) {\n    if (backtrack.length < 2) {\n        if (delimiter.length < 2)\n            return `[^${escape(delimiter + backtrack)}]`;\n        return `(?:(?!${escape(delimiter)})[^${escape(backtrack)}])`;\n    }\n    if (delimiter.length < 2) {\n        return `(?:(?!${escape(backtrack)})[^${escape(delimiter)}])`;\n    }\n    return `(?:(?!${escape(backtrack)}|${escape(delimiter)})[\\\\s\\\\S])`;\n}\n/**\n * Stringify token data into a path string.\n */\nfunction stringify(data) {\n    return data.tokens\n        .map(function stringifyToken(token, index, tokens) {\n        if (token.type === \"text\")\n            return escapeText(token.value);\n        if (token.type === \"group\") {\n            return `{${token.tokens.map(stringifyToken).join(\"\")}}`;\n        }\n        const isSafe = isNameSafe(token.name) && isNextNameSafe(tokens[index + 1]);\n        const key = isSafe ? token.name : JSON.stringify(token.name);\n        if (token.type === \"param\")\n            return `:${key}`;\n        if (token.type === \"wildcard\")\n            return `*${key}`;\n        throw new TypeError(`Unexpected token: ${token}`);\n    })\n        .join(\"\");\n}\nfunction isNameSafe(name) {\n    const [first, ...rest] = name;\n    if (!ID_START.test(first))\n        return false;\n    return rest.every((char) => ID_CONTINUE.test(char));\n}\nfunction isNextNameSafe(token) {\n    if ((token === null || token === void 0 ? void 0 : token.type) !== \"text\")\n        return true;\n    return !ID_CONTINUE.test(token.value[0]);\n}\n//# sourceMappingURL=index.js.map","import { match } from 'path-to-regexp'\nexport default class Route extends EventTarget {\n  #_settings\n  #enable\n  #active\n  #match\n  constructor($settings = {}) {\n    super()\n    this.#settings = $settings\n  }\n  get #settings() { return this.#_settings }\n  set #settings($settings) {\n    this.#_settings = $settings\n    for(const [$settingKey, $settingVal] of Object.entries($settings)) {\n      Object.defineProperty(this, $settingKey, { value: $settingVal })\n    }\n  }\n  get pathname() { return this.#settings.pathname }\n  get enable() {\n    if(this.#enable !== undefined) return this.#enable\n    if(this.#settings.enable !== undefined) {\n      this.#enable = this.#settings.enable\n    }\n    else { this.#enable = true }\n    return this.#enable\n  }\n  set enable($enable) {\n    if(this.#enable !== $enable) this.#enable = $enable\n  }\n  get active() {\n    if(this.#active !== undefined) return this.#active\n    if(this.#settings.active === undefined) { this.#active = false }\n    return this.#active\n  }\n  set active($active) {\n    if(this.#active !== $active) this.#active = $active\n  }\n  get match() {\n    if(this.#match !== undefined) return this.#match\n    this.#match = match(this.pathname)\n    return this.#match\n  }\n}","export default class RouteEvent extends CustomEvent {\n  #options\n  constructor($type, $options) {\n    super($type, $options)\n    this.#options = $options\n  }\n  get path() { return this.#options.path }\n  get route() { return this.#options.route }\n  get location() { return this.#options.location }\n}","import Core from '../../core/index.js'\nimport { recursiveAssign } from 'recourse'\nimport Route from './route/index.js'\nimport RouteEvent from './routeEvent/index.js'\nimport Settings from './settings/index.js' \nimport Options from './options/index.js' \nexport default class LocationRouter extends Core {\n  #window\n  #hashpath\n  #routes\n  #location\n  #route\n  #enable\n  #regularExpressions = {\n    windowLocationOrigin: new RegExp(`^${this.window.location.origin}`)\n  }\n  constructor($settings, $options) {\n    super(Settings($settings), Options($options))\n    if($options.enableEvents === true) this.enableEvents()\n    this.enable = true\n  }\n  get base() { return this.settings.base }\n  get window() {\n    if(this.#window !== undefined) return this.#window\n    this.#window = window\n    return this.#window\n  }\n  get hashpath() {\n    if(this.#hashpath !== undefined) return this.#hashpath\n    this.#hashpath = (\n      this.settings.hashpath === undefined\n    ) ? false\n      : this.settings.hashpath\n    return this.#hashpath\n  }\n  get routes() {\n    if(this.#routes !== undefined) return this.#routes\n    this.#routes = {}\n    const routeEntries = Object.entries(this.settings.routes)\n    for(const [$routePath, $routeSettings] of routeEntries) {\n      this.setRoute($routePath, $routeSettings)\n    }\n    return this.#routes\n  }\n  get location() { return this.#location }\n  get route() { return this.#route }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    if(this.#enable === $enable) return\n    const boundPopstate = this.#popstate.bind(this)\n    if($enable === true) {\n      this.#window.addEventListener('popstate', boundPopstate)\n    }\n    else if($enable === false) {\n      this.#window.removeEventListener('popstate', boundPopstate)\n    }\n    this.#enable = $enable\n  }\n  #popstate() { this.navigate() }\n  navigate($path, $method) {\n    if(\n      typeof $path === 'string' && \n      ['assign', 'replace'].includes($method)\n    ) {\n      this.window?.location[$method]($path)\n      return this\n    }\n    const base = [this.window.origin, this.base].join('')\n    let matchPath, matchRoute\n    if(this.hashpath) {\n      matchPath = this.window.location.hash.slice(1)\n      matchRoute = this.#matchRoute(matchPath)\n    }\n    else {\n      matchPath = this.window.location.href\n      .replace(new RegExp(`^${this.window.origin}`), '')\n      .replace(new RegExp(`^${this.base}`), '')\n      matchRoute = this.#matchRoute(matchPath)\n    }\n    const { route, location } = matchRoute\n    const routeEventOptions = {\n      route: route,\n      location: location,\n      path: matchPath,\n    }\n    const preterRoute = this.route\n    if(preterRoute) { preterRoute.active = false }\n    if(route && route?.enable) {\n      route.active = true\n      location.state = this.window.history.state\n      location.base = this.base\n      location.pathname = this.window.location.pathname\n      .replace(new RegExp(`^${this.base}`), '')\n      location.hash = this.window.location.hash\n      location.search = this.window.location.search\n      delete location.path\n      this.#route = route\n      this.#location = location\n      this.dispatchEvent(\n        new RouteEvent(\"route\", routeEventOptions)\n      )\n      this.dispatchEvent(\n        new RouteEvent(`route:${route.name}`, routeEventOptions)\n      )\n    }\n    else {\n      this.#route = null\n      this.#location = null\n      this.dispatchEvent(\n        new RouteEvent(\"nonroute\", routeEventOptions)\n      )\n    }\n    return this\n  }\n  // Route Ability\n  enableRoute($path) {\n    const route = this.getRoute($path)\n    route.enable = true\n    return route\n  }\n  disableRoute($path) {\n    const route = this.getRoute($path)\n    route.enable = false\n    return route\n  }\n  // Route Ministration \n  setRoute($routePath, $routeSettings) {\n    const routeSettings = recursiveAssign({\n      pathname: $routeSettings.pathname || $routePath,\n    }, $routeSettings)\n    this.#routes[$routePath] = new Route(routeSettings)\n    return this.#routes[$routePath]\n  }\n  getRoute($routePath) {\n    return this.#routes[$routePath]\n  }\n  deleteRoute($routePath) {\n    delete this.#routes[$routePath]\n    return this.#routes[$routePath]\n  }\n  #matchRoute($path) {\n    const routeEntries = Object.entries(this.routes)\n    let routeEntryIndex = 0\n    let route = null\n    let location = null\n    iterateMatchEntries: \n    while(routeEntryIndex < routeEntries.length) {\n      const [$routePath, $route] = routeEntries[routeEntryIndex]\n      location = $route.match($path) || null\n      if(location) {\n        route = $route\n        break iterateMatchEntries\n      }\n      routeEntryIndex++\n    }\n    return { route, location }\n  }\n}","export default ($settings) => Object.assign({\n  routes: {}\n}, $settings)","export default ($options) => Object.assign({\n  enableEvents: true\n}, $options)","export default class SocketEvent extends CustomEvent {\n  #settings\n  #socket\n  constructor($type, $settings, $socket) {\n    super($type, $settings)\n    this.#settings = $settings\n    this.#socket = $socket\n  }\n  get isBinary() { return this.#settings.isBinary }\n  get message() { return this.#settings.message }\n  get detail() { return this.#settings.detail }\n}","import Settings from './settings/index.js'\nexport default class MessageAdapter extends EventTarget {\n  #settings\n  #messages\n  #message\n  constructor($settings) {\n    super()\n    this.#settings = $settings\n  }\n  get name() { return this.#settings.name }\n  get messages() {\n    if(this.#messages !== undefined) {\n      return this.#messages\n    }\n    if(this.#settings.messages !== undefined) {\n      this.#messages = this.#settings.messages\n    }\n    else {\n      this.#messages = {}\n    }\n    return this.#messages\n  }\n  get message() {\n    if(this.#message !== undefined) {\n      return this.#message\n    }\n    this.#message = this.#settings.message\n    return this.#message\n  }\n}","import SocketEvent from './event/index.js'\nimport Core from '../../core/index.js'\nimport MessageAdapter from './messageAdapter/index.js'\nimport Settings from './settings/index.js'\nimport Options from './options/index.js'\nexport default class SocketRouter extends Core {\n  #webSocket\n  #active = false\n  #messageAdapters\n  #url\n  #boundMessage\n  constructor($settings = {}, $options = {}) {\n    super(Settings($settings), Options($options))\n    this.#boundMessage = this.#message.bind(this)\n    Object.defineProperties(this, {\n      webSocket: {\n        enumerable: true,\n        get() {\n          if(this.#webSocket !== undefined) return this.#webSocket\n          this.#webSocket = new WebSocket(this.url)\n          this.#webSocket.addEventListener('message', this.#boundMessage)\n          return this.#webSocket\n        },\n      }\n    })\n    this.active = this.settings.active\n    if(this.options.enableEvents === true) { this.enableEvents() }\n  }\n  get active() { return this.#active }\n  set active($active) {\n    if(this.#active === $active) { return }\n    if($active === true) {\n      this.webSocket\n    }\n    else if($active === false) {\n      this.#webSocket = undefined\n    }\n    this.#active = $active\n  }\n  get path() { return this.settings.path }\n  get url() {\n    if(this.#url !== undefined) { return this.#url }\n    let { protocol, host, port } = this.settings\n    let base\n    if(protocol && host && port) {\n        base = [protocol, '//', host, ':', port].join('')\n      }\n    else {\n      base = window.location.url.origin\n    }\n    this.#url = new URL(this.path, base)\n    return this.#url\n  }\n  #message($data, $isBinary) {\n    iterateAdapters: \n    for(const $messageAdapter of this.messageAdapters) {\n      try {\n        const message = $messageAdapter.message($data, $isBinary)\n        const { type, detail } = message\n        const messageEvent = new SocketEvent(type, {\n          detail, message: $data, isBinary: $isBinary\n        }, this)\n        this.webSocket.dispatchEvent(messageEvent)\n      }\n      catch($err) {  console.error($err)  }\n    }\n  }\n  get messageAdapters() {\n    if(this.#messageAdapters !== undefined) { return this.#messageAdapters }\n    const messageAdapters = []\n    for(const $adapter of this.settings.messageAdapters) {\n      let adapter\n      if($adapter instanceof MessageAdapter) { adapter = adapter }\n      else { adapter = new MessageAdapter($adapter, this) }\n      messageAdapters.push(adapter)\n    }\n    this.#messageAdapters = messageAdapters\n    return this.#messageAdapters\n  }\n  send() { this.webSocket.send(...arguments) }\n}","export default ($settings) => Object.assign({\n  active: false, // Boolean\n  /*\n  name: String, // \"$name\",\n  protocol: String, // [\"wss:\", \"ws:\"],\n  port: Number, // 3338\n  host: String, // \"demonstrament.mvc-framework\",\n  path: String, // '/',\n  open: function() {},\n  close: function() {},\n  error: function() {},\n  messageAdapters: [\n    // ['MessageAdapter', $MessageAdapter]\n  ],\n  */\n}, $settings)","export default ($options) => Object.assign({\n  events: false,\n  enableEvents: true, // Boolean\n}, $options)","import Core from '../core/index.js'\nimport Settings from './settings/index.js'\nimport Options from './options/index.js'\nimport Model from '../model/index.js'\nimport View from '../view/index.js'\nimport { LocationRouter, FetchRouter, SocketRouter } from '../routers/index.js'\nfunction Instate($target, $property, $value, $definition) {\n  const definition = $definition\n  const parent = $target\n  const path = ($target?.path) ? [\n    $target.path, $definition.name, $property\n  ].join('.') : [$definition.name, $property].join('.')\n  if($value && ValidClasses.includes($value.constructor)) {\n    $value.mount({ path, parent })\n  }\n  else if(Array.isArray($value)) {\n    const { Class } = definition\n    if(Class === Model) {\n      let [properties, schema, options] = $value\n      schema = schema || null\n      options = options || {}\n      Object.assign(options, {\n        definition, parent, path\n      })\n      $value = new Class(properties, schema, options)\n    }\n    else if(ValidClasses.includes(Class)) {\n      if($value.length === 2) {\n        const [settings, options] = $value\n        Object.assign(options, {\n          definition, parent, path\n        })\n        $value = new Class(settings, options)\n      }\n      if($value.length === 1) {\n        const [settings] = $value\n        $value = new Class(settings)\n      }\n    }\n  }\n  return $value\n}\nfunction Deinstate($target, $property, $definition) { return }\nclass Control extends Core {\n  static propertyClasses = [{\n    name: \"models\", targetType: 'Object',\n    administer: \"addModels\", deadminister: \"removeModels\",\n    instate: Instate, deinstate: Deinstate, Class: Model,\n  }, {\n    name: \"views\", targetType: 'Object',\n    administer: \"addViews\", deadminister: \"removeViews\",\n    instate: Instate, deinstate: Deinstate, Class: View,\n  }, {\n    name: \"locationRouters\", targetType: 'Object',\n    administer: \"addLocationRouters\", deadminister: \"removeLocationRouters\",\n    instate: Instate, deinstate: Deinstate, Class: LocationRouter,\n  }, {\n    name: \"fetchRouters\", targetType: 'Object',\n    administer: \"addFetchRouters\", deadminister: \"removeFetchRouters\",\n    instate: Instate, deinstate: Deinstate, Class: FetchRouter,\n  }, {\n    name: \"socketRouters\", targetType: 'Object',\n    administer: \"addSocketRouters\", deadminister: \"removeSocketRouters\",\n    instate: Instate, deinstate: Deinstate, Class: SocketRouter,\n  }, {\n    name: \"controls\", targetType: 'Object',\n    administer: \"addControls\", deadminister: \"removeControls\",\n    instate: Instate, deinstate: Deinstate, Class: Control,\n  }]\n  constructor($settings = {}, $options = {}) {\n    super(\n      Settings(Object.assign({}, $settings)),\n      Options(Object.assign({\n        propertyClasses: Control.propertyClasses,\n      }, $options)),\n    )\n  }\n}\nconst ValidClasses = [Model, View, Control, LocationRouter, FetchRouter, SocketRouter]\nexport default Control","export default ($settings) => {\n  const settings = Object.assign({\n    models: {},\n    views: {},\n    controls: {},\n    fetchRouters: {},\n    locationRouters: {},\n  }, $settings)\n  return settings\n}\n","export default ($options) => {\n  const options = Object.assign({\n    events: false,\n    enableEvents: true,\n  }, $options)\n  return options\n}","const Primitives$1 = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n};\nObject.values(Primitives$1);\nconst Objects$1 = {\n  'object': Object,\n  'array': Array,\n};\nObject.values(Objects$1);\nconst Types$1 = Object.assign({}, Primitives$1, Objects$1);\nObject.values(Types$1);\n[\n Primitives$1.String, Primitives$1.Number, Primitives$1.Boolean, \n Objects$1.Object, Objects$1.Array\n];\n\nvar typeOf$1 = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nconst defaultAccessor$1 = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n};\nvar Accessors = {\n  default: defaultAccessor$1};\n\nconst Options$2$1 = {\n  depth: 0,\n  maxDepth: 10,\n  accessors: [Accessors.default],\n  ancestors: [],\n};\nfunction propertyDirectory($object, $options) {\n  const _propertyDirectory = [];\n  const options = Object.assign({}, Options$2$1, $options, {\n    ancestors: [].concat($options.ancestors)\n  });\n  options.depth++;\n  if(options.depth > options.maxDepth) { return _propertyDirectory }\n  iterateAccessors: \n  for(const $accessor of options.accessors) {\n    const accessor = $accessor.bind($object);\n    const object = accessor($object);\n    if(!object) { continue iterateAccessors }\n    if(!options.ancestors.includes(object)) { options.ancestors.unshift(object); }\n    for(const [$key, $value] of Object.entries(object)) {\n      if(!options.values) { _propertyDirectory.push($key); }\n      else if(options.values) { _propertyDirectory.push([$key, $value]); }\n      if(\n        typeof $value === 'object' &&\n        $value !== null &&\n        !Object.is($value, object) && \n        !options.ancestors.includes($value)\n      ) {\n        const subtargets = propertyDirectory($value, options);\n        if(!options.values) {\n          for(const $subtarget of subtargets) {\n            const path = [$key, $subtarget].join('.');\n            _propertyDirectory.push(path);\n          }\n        }\n        else if(options.values) {\n          for(const [$subtargetKey, $subtarget] of subtargets) {\n            const path = [$key, $subtargetKey].join('.');\n            _propertyDirectory.push([path, $subtarget]);\n          }\n        }\n      }\n    }\n  }\n  return _propertyDirectory\n}\n\nfunction recursiveAssign$2($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf$1($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf$1($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssign$2($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nfunction expandEvents($propEvents, $scopeKey = ':scope') {\n  if(\n    Array.isArray($propEvents) ||\n    $propEvents === undefined\n  ) { return $propEvents }\n  const propEvents = [];\n  for(const [\n    $propEventSettings, $propEventListener\n  ] of Object.entries($propEvents)) {\n    const propEventSettings = $propEventSettings.trim().split(' ');\n    let path, type, listener;\n    if(propEventSettings.length === 1) {\n      path = $scopeKey;\n      type = propEventSettings[0];\n    }\n    else if(propEventSettings.length > 1) {\n      path = propEventSettings[0];\n      type = propEventSettings[1];\n    }\n    if(Array.isArray($propEventListener)) {\n      listener = $propEventListener[0];\n      $propEventListener[1];\n    }\n    else {\n      listener = $propEventListener;\n    }\n    const propEvent = {\n      type,\n      path,\n      listener,\n      enable: false,\n    };\n    propEvents.push(propEvent);\n  }\n  return propEvents\n}\n\nconst defaultAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n};\nvar accessors = {\n  default: defaultAccessor};\n\nvar Settings$1 = ($settings = {}) => {\n  const Settings = {\n    events: {},\n    enableEvents: false,\n    propertyDirectory: {\n      accessors: [accessors.default],\n      scopeKey: ':scope', \n      maxDepth: 10,\n    },\n    propertyDefinitions: {\n      getEvents: 'getEvents',\n      addEvents: 'addEvents',\n      removeEvents: 'removeEvents',\n      enableEvents: 'enableEvents',\n      disableEvents: 'disableEvents',\n      reenableEvents: 'reenableEvents',\n      emitEvents: 'emitEvents',\n    },\n  };\n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'propertyDefinitions':\n      case 'propertyDirectory':\n        Settings[$settingKey] = Object.assign(Settings[$settingKey], $settingValue);\n        break\n      default: \n        Settings[$settingKey] = $settingValue;\n        break\n    }\n  }\n  return Settings\n};\n\nfunction handleNoCommaBraces(span) {\n    if (span.length < 3) {\n        return \"{\" + span + \"}\";\n    }\n    var separatorI = -1;\n    for (var i = 2; i < span.length; i++) {\n        if (span[i] === '.' && span[i - 1] === '.' && (i < 2 || span[i - 2] !== '\\\\')) {\n            if (separatorI > -1) {\n                return \"{\" + span + \"}\";\n            }\n            separatorI = i - 1;\n        }\n    }\n    if (separatorI > -1) {\n        var rangeStart = span.substr(0, separatorI);\n        var rangeEnd = span.substr(separatorI + 2);\n        if (rangeStart.length > 0 && rangeEnd.length > 0) {\n            return \"[\" + span.substr(0, separatorI) + \"-\" + span.substr(separatorI + 2) + \"]\";\n        }\n    }\n    return \"{\" + span + \"}\";\n}\nfunction expand(pattern) {\n    if (typeof pattern !== 'string') {\n        throw new TypeError(\"A pattern must be a string, but \" + typeof pattern + \" given\");\n    }\n    var scanning = false;\n    var openingBraces = 0;\n    var closingBraces = 0;\n    var handledUntil = -1;\n    var results = [''];\n    var alternatives = [];\n    var span;\n    for (var i = 0; i < pattern.length; i++) {\n        var char = pattern[i];\n        if (char === '\\\\') {\n            i++;\n            continue;\n        }\n        if (char === '{') {\n            if (scanning) {\n                openingBraces++;\n            }\n            else if (i > handledUntil && !openingBraces) {\n                span = pattern.substring(handledUntil + 1, i);\n                for (var j = 0; j < results.length; j++) {\n                    results[j] += span;\n                }\n                alternatives = [];\n                handledUntil = i;\n                scanning = true;\n                openingBraces++;\n            }\n            else {\n                openingBraces--;\n            }\n        }\n        else if (char === '}') {\n            if (scanning) {\n                closingBraces++;\n            }\n            else if (closingBraces === 1) {\n                span = pattern.substring(handledUntil + 1, i);\n                if (alternatives.length > 0) {\n                    var newResults = [];\n                    alternatives.push(expand(span));\n                    for (var j = 0; j < results.length; j++) {\n                        for (var k = 0; k < alternatives.length; k++) {\n                            for (var l = 0; l < alternatives[k].length; l++) {\n                                newResults.push(results[j] + alternatives[k][l]);\n                            }\n                        }\n                    }\n                    results = newResults;\n                }\n                else {\n                    span = handleNoCommaBraces(span);\n                    for (var j = 0; j < results.length; j++) {\n                        results[j] += span;\n                    }\n                }\n                handledUntil = i;\n                closingBraces--;\n            }\n            else {\n                closingBraces--;\n            }\n        }\n        else if (!scanning && char === ',' && closingBraces - openingBraces === 1) {\n            span = pattern.substring(handledUntil + 1, i);\n            alternatives.push(expand(span));\n            handledUntil = i;\n        }\n        if (scanning && (closingBraces === openingBraces || i === pattern.length - 1)) {\n            scanning = false;\n            i = handledUntil - 1;\n        }\n    }\n    if (handledUntil === -1) {\n        return [pattern];\n    }\n    var unhandledFrom = pattern[handledUntil] === '{' ? handledUntil : handledUntil + 1;\n    if (unhandledFrom < pattern.length) {\n        span = pattern.substr(unhandledFrom);\n        for (var j = 0; j < results.length; j++) {\n            results[j] += span;\n        }\n    }\n    return results;\n}\n\nfunction negate(pattern, options) {\n    var supportNegation = options['!'] !== false;\n    var supportParens = options['()'] !== false;\n    var isNegated = false;\n    var i;\n    if (supportNegation) {\n        for (i = 0; i < pattern.length && pattern[i] === '!'; i++) {\n            if (supportParens && pattern[i + 1] === '(') {\n                i--;\n                break;\n            }\n            isNegated = !isNegated;\n        }\n        if (i > 0) {\n            pattern = pattern.substr(i);\n        }\n    }\n    return { pattern: pattern, isNegated: isNegated };\n}\n\nfunction escapeRegExpChar(char) { if (char === '-' ||\n    char === '^' ||\n    char === '$' ||\n    char === '+' ||\n    char === '.' ||\n    char === '(' ||\n    char === ')' ||\n    char === '|' ||\n    char === '[' ||\n    char === ']' ||\n    char === '{' ||\n    char === '}' ||\n    char === '*' ||\n    char === '?' ||\n    char === '\\\\') {\n    return \"\\\\\" + char;\n}\nelse {\n    return char;\n} }\nfunction escapeRegExpString(str) {\n    var result = '';\n    for (var i = 0; i < str.length; i++) {\n        result += escapeRegExpChar(str[i]);\n    }\n    return result;\n}\n\nfunction Pattern(source, options, excludeDot) {\n    var separator = typeof options.separator === 'undefined' ? true : options.separator;\n    var separatorSplitter = '';\n    var separatorMatcher = '';\n    var wildcard = '.';\n    if (separator === true) {\n        separatorSplitter = '/';\n        separatorMatcher = '[/\\\\\\\\]';\n        wildcard = '[^/\\\\\\\\]';\n    }\n    else if (separator) {\n        separatorSplitter = separator;\n        separatorMatcher = escapeRegExpString(separatorSplitter);\n        if (separatorMatcher.length > 1) {\n            separatorMatcher = \"(?:\" + separatorMatcher + \")\";\n            wildcard = \"((?!\" + separatorMatcher + \").)\";\n        }\n        else {\n            wildcard = \"[^\" + separatorMatcher + \"]\";\n        }\n    }\n    else {\n        wildcard = '.';\n    }\n    var requiredSeparator = separator ? separatorMatcher + \"+?\" : '';\n    var optionalSeparator = separator ? separatorMatcher + \"*?\" : '';\n    var segments = separator ? source.split(separatorSplitter) : [source];\n    var support = {\n        qMark: options['?'] !== false,\n        star: options['*'] !== false,\n        globstar: separator && options['**'] !== false,\n        brackets: options['[]'] !== false,\n        extglobs: options['()'] !== false,\n        excludeDot: excludeDot && options.excludeDot !== false,\n    };\n    return {\n        source: source,\n        segments: segments,\n        options: options,\n        separator: separator,\n        separatorSplitter: separatorSplitter,\n        separatorMatcher: separatorMatcher,\n        optionalSeparator: optionalSeparator,\n        requiredSeparator: requiredSeparator,\n        wildcard: wildcard,\n        support: support,\n    };\n}\nfunction Segment(source, pattern, isFirst, isLast) { return {\n    source: source,\n    isFirst: isFirst,\n    isLast: isLast,\n    end: source.length - 1,\n}; }\nfunction Result() {\nreturn {\n    match: '',\n    unmatch: '',\n    useUnmatch: false,\n}; }\nfunction State(pattern, segment, result) { return {\n    pattern: pattern,\n    segment: segment,\n    result: result,\n    openingBracket: segment.end + 1,\n    closingBracket: -1,\n    openingParens: 0,\n    closingParens: 0,\n    parensHandledUntil: -1,\n    extglobModifiers: [],\n    scanningForParens: false,\n    escapeChar: false,\n    addToMatch: true,\n    addToUnmatch: pattern.support.extglobs,\n    dotHandled: false,\n    i: -1,\n    char: '',\n    nextChar: '',\n}; }\n\nvar EXCLUDE_DOT_PATTERN = '(?!\\\\.)';\nfunction add(state, addition, excludeDot) {\n    if (state.addToUnmatch) {\n        state.result.unmatch += addition;\n    }\n    if (state.addToMatch) {\n        if (excludeDot && !state.dotHandled) {\n            addition = EXCLUDE_DOT_PATTERN + addition;\n        }\n        state.dotHandled = true;\n        state.result.match += addition;\n    }\n    return state.result;\n}\nfunction convertSegment(pattern, segment, result) {\n    var support = pattern.support;\n    var state = State(pattern, segment, result);\n    var separatorMatcher = segment.isLast\n        ? pattern.optionalSeparator\n        : pattern.requiredSeparator;\n    if (!support.excludeDot) {\n        state.dotHandled = true;\n    }\n    if (segment.end === -1) {\n        return segment.isLast && !segment.isFirst ? result : add(state, separatorMatcher);\n    }\n    if (support.globstar && segment.source === '**') {\n        var prefix = !state.dotHandled ? EXCLUDE_DOT_PATTERN : '';\n        var globstarSegment = prefix + pattern.wildcard + \"*?\" + separatorMatcher;\n        return add(state, \"(?:\" + globstarSegment + \")*?\");\n    }\n    while (++state.i <= segment.end) {\n        state.char = state.segment.source[state.i];\n        state.nextChar = state.i < segment.end ? segment.source[state.i + 1] : '';\n        if (state.char === '\\\\') {\n            if (state.i < state.segment.end) {\n                state.escapeChar = true;\n                continue;\n            }\n            else {\n                state.char = '';\n            }\n        }\n        var pattern = state.pattern, segment = state.segment, char = state.char, i = state.i;\n        if (pattern.support.brackets && !state.scanningForParens) {\n            if (i > state.openingBracket && i <= state.closingBracket) {\n                if (state.escapeChar) {\n                    add(state, escapeRegExpChar(char));\n                }\n                else if (i === state.closingBracket) {\n                    add(state, ']');\n                    state.openingBracket = segment.source.length;\n                }\n                else if (char === '-' && i === state.closingBracket - 1) {\n                    add(state, '\\\\-');\n                }\n                else if (char === '!' && i === state.openingBracket + 1) {\n                    add(state, '^');\n                }\n                else if (char === ']') {\n                    add(state, '\\\\]');\n                }\n                else {\n                    add(state, char);\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (i > state.openingBracket) {\n                if (char === ']' &&\n                    !state.escapeChar &&\n                    i > state.openingBracket + 1 &&\n                    i > state.closingBracket) {\n                    state.closingBracket = i;\n                    state.i = state.openingBracket;\n                    if (pattern.separator) {\n                        add(state, \"(?!\" + pattern.separatorMatcher + \")[\", true);\n                    }\n                    else {\n                        add(state, '[', true);\n                    }\n                }\n                else if (i === segment.end) {\n                    add(state, '\\\\[');\n                    state.i = state.openingBracket;\n                    state.openingBracket = segment.source.length;\n                    state.closingBracket = segment.source.length;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (char === '[' &&\n                !state.escapeChar &&\n                i > state.closingBracket &&\n                i < segment.end) {\n                state.openingBracket = i;\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        if (state.pattern.support.extglobs) {\n            var extglobModifiers = state.extglobModifiers, char = state.char, nextChar = state.nextChar, i = state.i;\n            if (nextChar === '(' &&\n                !state.escapeChar &&\n                (char === '@' || char === '?' || char === '*' || char === '+' || char === '!')) {\n                if (state.scanningForParens) {\n                    state.openingParens++;\n                }\n                else if (i > state.parensHandledUntil && !state.closingParens) {\n                    state.parensHandledUntil = i;\n                    state.scanningForParens = true;\n                    state.openingParens++;\n                }\n                else if (state.closingParens >= state.openingParens) {\n                    if (char === '!') {\n                        state.addToMatch = true;\n                        state.addToUnmatch = false;\n                        add(state, state.pattern.wildcard + \"*?\", true);\n                        state.addToMatch = false;\n                        state.addToUnmatch = true;\n                        state.result.useUnmatch = true;\n                    }\n                    extglobModifiers.push(char);\n                    add(state, '(?:', true);\n                    state.openingParens--;\n                    state.i++;\n                    continue;\n                }\n                else {\n                    state.openingParens--;\n                }\n            }\n            else if (char === ')' && !state.escapeChar) {\n                if (state.scanningForParens) {\n                    state.closingParens++;\n                }\n                else if (extglobModifiers.length) {\n                    var modifier_1 = extglobModifiers.pop();\n                    if (modifier_1 === '!' && extglobModifiers.indexOf('!') !== -1) {\n                        throw new Error(\"Nested negated extglobs aren't supported\");\n                    }\n                    modifier_1 = modifier_1 === '!' || modifier_1 === '@' ? '' : modifier_1;\n                    add(state, \")\" + modifier_1);\n                    state.addToMatch = true;\n                    state.addToUnmatch = true;\n                    state.closingParens--;\n                    continue;\n                }\n            }\n            else if (char === '|' && state.closingParens &&\n                !state.scanningForParens &&\n                !state.escapeChar) {\n                add(state, '|');\n                continue;\n            }\n            if (state.scanningForParens) {\n                if (state.closingParens === state.openingParens || i === state.segment.end) {\n                    state.scanningForParens = false;\n                    state.i = state.parensHandledUntil - 1;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        var pattern = state.pattern;\n        var support = pattern.support;\n        if (!state.escapeChar && support.star && state.char === '*') {\n            if (state.i === state.segment.end || state.nextChar !== '*') {\n                add(state, pattern.wildcard + \"*?\", true);\n            }\n        }\n        else if (!state.escapeChar && support.qMark && state.char === '?') {\n            add(state, pattern.wildcard, true);\n        }\n        else {\n            add(state, escapeRegExpChar(state.char));\n        }\n        state.escapeChar = false;\n    }\n    return add(state, separatorMatcher);\n}\nfunction convert(source, options, excludeDot) {\n    var pattern = Pattern(source, options, excludeDot);\n    var result = Result();\n    var segments = pattern.segments;\n    for (var i = 0; i < segments.length; i++) {\n        var segment = Segment(segments[i], pattern, i === 0, i === segments.length - 1);\n        convertSegment(pattern, segment, result);\n    }\n    if (result.useUnmatch) {\n        return \"(?!^\" + result.unmatch + \"$)\" + result.match;\n    }\n    else {\n        return result.match;\n    }\n}\n\nfunction flatMap(array, predicate) {\n    var results = [];\n    for (var i = 0; i < array.length; i++) {\n        var mappedValue = predicate(array[i]);\n        for (var j = 0; j < mappedValue.length; j++) {\n            results.push(mappedValue[j]);\n        }\n    }\n    return results;\n}\nfunction compile(patterns, options) {\n    patterns = Array.isArray(patterns) ? patterns : [patterns];\n    if (options['{}'] !== false) {\n        patterns = flatMap(patterns, expand);\n    }\n    var positiveResults = [];\n    var negativeResults = [];\n    var result = '';\n    for (var i = 0; i < patterns.length; i++) {\n        var negatedPattern = negate(patterns[i], options);\n        var convertedPattern = convert(negatedPattern.pattern, options, !negatedPattern.isNegated);\n        if (negatedPattern.isNegated) {\n            negativeResults.push(convertedPattern);\n        }\n        else {\n            positiveResults.push(convertedPattern);\n        }\n    }\n    if (negativeResults.length) {\n        result = \"(?!(?:\" + negativeResults.join('|') + \")$)\";\n    }\n    if (positiveResults.length > 1) {\n        result += \"(?:\" + positiveResults.join('|') + \")\";\n    }\n    else if (positiveResults.length === 1) {\n        result += positiveResults[0];\n    }\n    else if (result.length) {\n        result += convert('**', options, true);\n    }\n    return \"^\" + result + \"$\";\n}\nfunction isMatch(regexp, sample) { if (typeof sample !== 'string') {\n    throw new TypeError(\"Sample must be a string, but \" + typeof sample + \" given\");\n} return regexp.test(sample); }\n/**\n * Compiles one or more glob patterns into a RegExp and returns an isMatch function.\n * The isMatch function takes a sample string as its only argument and returns true\n * if the string matches the pattern(s).\n *\n * ```js\n * outmatch('src/*.js')('src/index.js') //=> true\n * ```\n *\n * ```js\n * const isMatch = outmatch('*.example.com', '.')\n * isMatch('foo.example.com') //=> true\n * isMatch('foo.bar.com') //=> false\n * ```\n */\nfunction outmatch(pattern, options) {\n    if (typeof pattern !== 'string' && !Array.isArray(pattern)) {\n        throw new TypeError(\"The first argument must be a single pattern string or an array of patterns, but \" + typeof pattern + \" given\");\n    }\n    if (typeof options === 'string' || typeof options === 'boolean') {\n        options = { separator: options };\n    }\n    if (arguments.length === 2 &&\n        !(typeof options === 'undefined' ||\n            (typeof options === 'object' && options !== null && !Array.isArray(options)))) {\n        throw new TypeError(\"The second argument must be an options object or a string/boolean separator, but \" + typeof options + \" given\");\n    }\n    options = options || {};\n    if (options.separator === '\\\\') {\n        throw new Error('\\\\ is not a valid separator');\n    }\n    var regexpPattern = compile(pattern, options);\n    var regexp = new RegExp(regexpPattern, options.flags);\n    var fn = isMatch.bind(null, regexp);\n    fn.options = options;\n    fn.pattern = pattern;\n    fn.regexp = regexp;\n    return fn;\n}\n\nvar Settings$2 = ($settings = {}) => {\n  const Settings = {\n    enable: false,\n    assign: 'addEventListener', deassign: 'removeEventListener', transsign: 'dispatchEvent',\n    bindListener: true,\n    errorLog: false,\n    methods: {\n      assign: {\n        addEventListener: function addEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition;\n          const { options, useCapture } = settings;\n          return $target['addEventListener'](type, listener, options || useCapture)\n        },\n        on: function on($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['on'](type, listener)\n        },\n        once: function once($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['once'](type, listener)\n        },\n      }, \n      deassign: {\n        removeEventListener: function removeEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition;\n          const { options, useCapture } = settings;\n          return $target['removeEventListener'](type, listener, options || useCapture)\n        },\n        off: function off($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['off'](type, listener)\n        },\n      },\n      transsign: {\n        dispatchEvent: function dispatchEvent($eventDefinition, $target, $event) {\n          return $target['dispatchEvent']($event)\n        },\n        emit: function emit($eventDefinition, $target, $type, ...$arguments) {\n          return $target['emit']($type, ...$arguments)\n        },\n      },\n    },\n  };\n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'methods': \n        Settings[$settingKey] = recursiveAssign$2(Settings[$settingKey], $settingValue);\n        break\n      case 'enableEvents': break\n      default: \n        Settings[$settingKey] = $settingValue;\n        break\n    }\n  }\n  return Settings\n};\n\nclass EventDefinition {\n  #context\n  #enable = false\n  #nontranssigned = []\n  #_targets = []\n  #_assign\n  #_deassign\n  #_transsign\n  constructor($settings, $context) { \n    if(!$settings || !$context) { return this }\n    const settings = Settings$2($settings);\n    const assigned = [];\n    const deassigned = [];\n    const transsigned = [];\n    Object.defineProperties(this, {\n      'settings': { value: settings },\n      'path': { value: settings.path },\n      'type': { value: settings.type },\n      'assigned': { value: assigned },\n      'deassigned': { value: deassigned },\n      'transsigned': { value: transsigned },\n      'listener':  { configurable: true, get() {\n        const typeOfListener = typeOf$1(settings.listener);\n        let listener; \n        if(typeOfListener === 'string') {\n          let listenerTarget = $context;\n          iterateListenerPathKeys: \n          for(const $pathKey of settings.listener.split('.')) {\n            const value = listenerTarget[$pathKey];\n            if(value !== undefined) { listenerTarget = listenerTarget[$pathKey]; }\n            else { break iterateListenerPathKeys }\n          }\n          if(typeOf$1(listenerTarget) === 'function') {\n            listener = listenerTarget;\n          }\n        }\n        else { listener = settings.listener; }\n        if(settings.bindListener === true) {\n          listener = listener.bind(this.#context);\n        }\n        Object.defineProperty(this, 'listener', { value: listener });\n        return listener\n      } }\n    });\n    this.#context = $context;\n    this.enable = this.settings.enable;\n  }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    const targets = this.#targets;\n    const assigned = this.assigned;\n    const deassigned = this.deassigned;\n    assigned.length = 0;\n    deassigned.length = 0;\n    iterateTargetElements: \n    for(const $targetElement of targets) {\n      const { path, target, enable } = $targetElement;\n      this.settings;\n      if(enable === $enable) { continue iterateTargetElements }\n      if($enable === true) {\n        try {\n          this.#assign(target);\n          $targetElement.enable = $enable;\n          assigned.push($targetElement);\n          \n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err); } }\n      }\n      else if($enable === false) {\n        try {\n          this.#deassign(target);\n          $targetElement.enable = $enable;\n          deassigned.push($targetElement);\n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err); } }\n      }\n    }\n    this.#enable = $enable;\n  }\n  get #target() { return this.settings.target }\n  get #targets() {\n    const pretargets = this.#_targets;\n    const targets = [];\n    if(this.#target) {\n      for(const $target of [].concat(this.#target)) {\n        const pretargetElement = pretargets.find(\n          ($pretarget) => $pretarget?.path === this.path\n        );\n        if(pretargetElement !== undefined) {\n          targets.push(pretargetElement);\n        }\n        else if(pretargetElement === undefined) {ptargets.push({\n            path: this.path,\n            target: $target,\n            enable: false,\n          });\n        }\n      }\n    }\n    else if(typeOf$1(this.path) === 'string') {\n      const targetPaths = [];\n      if(this.path === this.#scopeKey) {\n        const targetElement = {\n          path: this.path,\n          target: this.#context,\n          enable: false,\n        };\n        targets.push(targetElement);\n      }\n      else {\n        if(this.settings.propertyDirectory) {\n          const propertyDirectory = this.#propertyDirectory;\n          const propertyPathMatcher = outmatch(this.path, {\n            separator: '.',\n          });\n          for(const [$propertyPath, $propertyValue] of propertyDirectory) {\n            const propertyPathMatch = propertyPathMatcher($propertyPath);\n            if(propertyPathMatch === true) { targetPaths.push([$propertyPath, $propertyValue]); }\n          }\n          if(this.path.charAt(0) === '*') {\n            targetPaths.unshift([this.#scopeKey, this.#context]);\n          }\n        }\n        else {\n          targetPaths.push(this.path);\n        }\n        for(const [$targetPath, $targetValue] of targetPaths) {\n          const pretargetElement = pretargets.find(\n            ($pretarget) => $pretarget.path === $targetPath\n          );\n          let target = $targetValue;\n          let targetElement;\n          if(target !== undefined) {\n            if(target === pretargetElement?.target) {\n              targetElement = pretargetElement;\n            }\n            else if(typeof target === 'object') {\n              targetElement = {\n                path: $targetPath,\n                target: target,\n                enable: false,\n              };\n            }\n          }\n          if(targetElement !== undefined) { targets.push(targetElement); }\n        }\n      }\n    }\n    this.#_targets = targets;\n    return this.#_targets\n  }\n  get #scopeKey() { return this.settings.propertyDirectory.scopeKey }\n  get #assign() {\n    if(this.#_assign !== undefined) { return this.#_assign }\n    this.#_assign = this.settings.methods.assign[this.settings.assign].bind(null, this);\n    return this.#_assign\n  }\n  get #deassign() {\n    if(this.#_deassign !== undefined) { return this.#_deassign }\n    this.#_deassign = this.settings.methods.deassign[this.settings.deassign].bind(null, this);\n    return this.#_deassign\n  }\n  get #transsign() {\n    if(this.#_transsign !== undefined) { return this.#_transsign }\n    this.#_transsign = this.settings.methods.transsign[this.settings.transsign].bind(null, this);\n    return this.#_transsign\n  }\n  get #propertyDirectory() {\n    if(!this.settings.propertyDirectory) { return null }\n    const propertyDirectorySettings = Object.assign(this.settings.propertyDirectory, { values: true });\n    return propertyDirectory(this.#context, propertyDirectorySettings)\n  }\n  emit() {\n    const targets = this.#targets;\n    const transsigned = this.transsigned;\n    const nontranssigned = this.#nontranssigned;\n    transsigned.length = 0;\n    nontranssigned.length = 0;\n    for(const $targetElement of targets) {\n      const { target } = $targetElement;\n      try {\n        this.#transsign(target, ...arguments);\n        transsigned.push($targetElement);\n      }\n      catch($err) { nontranssigned.push($targetElement); }\n    }\n    return this\n  }\n}\n\nclass Core extends EventTarget {\n  static implement = function ($target, $settings) {\n    if(!$target || !$settings) { return undefined }\n    const settings = Settings$1($settings);\n    const events = [];\n    Object.defineProperties($target, {\n      [settings.propertyDefinitions.getEvents]: {\n        enumerable: false, writable: false, \n        value: function getEvents() {\n          if(!arguments[0]) { return events }\n          const getEvents = [];\n          const $filterEvents = [].concat(arguments[0]);\n          for(const $filterEvent of $filterEvents) {\n            for(const $event of events) {\n              let match;\n              iterateEventFilterProperties: \n              for(const [\n                $filterEventPropertyKey, $filterEventPropertyValue\n              ] of Object.entries($filterEvent)) {\n                let eventFilterMatch;\n                if($filterEventPropertyKey === 'listener') {\n                  eventFilterMatch = (\n                    $event.settings[$filterEventPropertyKey] === $filterEventPropertyValue\n                  );\n                }\n                else {\n                  eventFilterMatch = (\n                    $event[$filterEventPropertyKey] === $filterEventPropertyValue\n                  );\n                }\n                if(match !== false) { match = eventFilterMatch; }\n                else { break iterateEventFilterProperties }\n              }\n              if(match === true) { getEvents.push($event); }\n            }\n          }\n          return getEvents\n        }\n      },\n      [settings.propertyDefinitions.addEvents]: {\n        enumerable: false, writable: false, \n        value: function addEvents() {\n          if(!arguments.length) { return $target }\n          let $addEvents = expandEvents(arguments[0], settings.propertyDirectory.scopeKey);\n          let $enableEvents = arguments[1] || false;\n          for(let $addEvent of $addEvents) {\n            const event = {};\n            for(const $settingKey of [\n              'assign', 'deassign', 'transsign', 'propertyDirectory', 'bindListener'\n            ]) {\n              const settingValue = settings[$settingKey];\n              if(settingValue !== undefined) { event[$settingKey] = settingValue; }\n            }\n            recursiveAssign$2(event, $addEvent);\n            const eventDefinition = new EventDefinition(event, $target);\n            if($enableEvents) { eventDefinition.enable = true; }\n            events.push(eventDefinition);\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.removeEvents]: {\n        enumerable: false, writable: false, \n        value: function removeEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          let eventsIndex = events.length - 1;\n          while(eventsIndex > -1) {\n            const event = events[eventsIndex];\n            if($events.includes(event)) {\n              event.enable = false;\n              events.splice(eventsIndex, 1);\n            }\n            eventsIndex--;\n          }\n          return $target\n        }\n      },\n      [settings.propertyDefinitions.enableEvents]: {\n        enumerable: false, writable: false, \n        value: function enableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          for(const $event of $events) { $event.enable = true; }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.disableEvents]: {\n        enumerable: false, writable: false, \n        value: function disableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          for(const $event of $events) { $event.enable = false; }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.reenableEvents]: {\n        enumerable: false, writable: false, \n        value: function reenableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          for(const $event of $events) {\n            $event.enable = false;\n            $event.enable = true;\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.emitEvents]: {\n        enumerable: false, writable: false, \n        value: function emitEvents($filterEvents, ...$eventParameters) {\n          const $events = $target[settings.propertyDefinitions.getEvents]($filterEvents);\n          for(const $event of $events) {\n            $event.emit(...$eventParameters);\n          }\n          return $target\n        },\n      },\n    });\n    if(settings.events) { $target[settings.propertyDefinitions.addEvents](settings.events); }\n    if(settings.enableEvents === true) { $target[settings.propertyDefinitions.enableEvents](); }\n    return $target\n  }\n  constructor($settings = {}) {\n    super();\n    return Core.implement(this, $settings)\n  }\n}\n\nconst Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n};\nconst PrimitiveKeys = Object.keys(Primitives);\nconst PrimitiveValues = Object.values(Primitives);\nconst Objects = {\n  'object': Object,\n  'array': Array,\n};\nconst ObjectKeys$1 = Object.keys(Objects);\nconst ObjectValues = Object.values(Objects);\nconst Types = Object.assign({}, Primitives, Objects);\nconst TypeKeys$1 = Object.keys(Types);\nconst TypeValues = Object.values(Types);\nconst TypeMethods = [\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n];\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ObjectKeys: ObjectKeys$1,\n  ObjectValues: ObjectValues,\n  Objects: Objects,\n  PrimitiveKeys: PrimitiveKeys,\n  PrimitiveValues: PrimitiveValues,\n  Primitives: Primitives,\n  TypeKeys: TypeKeys$1,\n  TypeMethods: TypeMethods,\n  TypeValues: TypeValues,\n  Types: Types\n});\n\nvar typeOf = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nfunction typedObjectLiteral($value) {\n  let _typedObjectLiteral;\n  const typeOfValue = typeOf($value);\n  if(typeOfValue === 'string') {\n    const value = $value.toLowerCase();\n    if(value === 'object') { _typedObjectLiteral = {}; }\n    else if(value === 'array') { _typedObjectLiteral = []; }\n  }\n  else  {\n    if(typeOfValue === 'object') { _typedObjectLiteral = {}; }\n    else if(typeOfValue === 'array') { _typedObjectLiteral = []; }\n  }\n  return _typedObjectLiteral\n}\n\nvar regularExpressions = {\n  quotationEscape: /\\.(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,\n};\n\nfunction get($path, $source) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n  const key = subpaths.pop();\n  let subtarget = $source;\n  for(const $subpath of subpaths) { subtarget = subtarget[$subpath]; }\n  return subtarget[key]\n}\n\nfunction impandTree($source, $property) {\n  const typeOfProperty = typeOf($property);\n  const typeOfSource = typeOf($source);\n  if(\n    !['string', 'function'].includes(typeOfProperty) ||\n    !['array', 'object'].includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source);\n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = get($property, $sourceValue); }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue); }\n    if(target[$sourceKey] && typeof target[$sourceKey] === 'object') {\n      target[$sourceKey] = impandTree(target[$sourceKey], $property);\n    }\n  }\n  return target\n}\n\nvar isArrayLike = ($source) => {\n  let isArrayLike;\n  const typeOfSource = typeOf($source);\n  if(typeOfSource === 'array') { isArrayLike = true; }\n  else if(\n    typeOfSource === 'object' &&\n    Number.isInteger($source.length) && $source.length >= 0\n  ) {\n    iterateSourceKeys: \n    for(const $sourceKey of Object.keys(\n      Object.getOwnPropertyDescriptors($source)\n    )) {\n      if($sourceKey === 'length') { continue iterateSourceKeys }\n      isArrayLike = !isNaN($sourceKey);\n      if(!isArrayLike) { break iterateSourceKeys }\n    }\n  }\n  else { isArrayLike = false; }\n  return isArrayLike\n};\n\nfunction recursiveAssign$1($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssign$1($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nvar Settings = {\n  depth: 0,\n  path: null,\n  ancestors: [],\n};\n\nvar Options$1$1 = {\n  delimiter: '.',\n  maxDepth: 10,\n  path: false,\n  retrocursion: false,\n  type: false,\n};\n\nfunction recursiveGetOwnPropertyDescriptor($properties, $propertyKey, $options) {\n  const options = Object.assign({}, Settings, Options$1$1, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  });\n  const propertyDescriptor = Object.getOwnPropertyDescriptor($properties, $propertyKey);\n  if(!options.ancestors.includes($properties)) { options.ancestors.unshift($properties); }\n  if(!options.retrocursion && options.ancestors.includes(propertyDescriptor.value)) { return }\n  if(options.path) {\n    options.path = (typeOf(options.path) === 'string') ? [options.path, $propertyKey].join(options.delimiter) : $propertyKey;\n    propertyDescriptor.path = options.path;\n  }\n  if(options.type) { propertyDescriptor.type = typeOf(propertyDescriptor.value); }\n  if(['array', 'object'].includes(typeOf(propertyDescriptor.value))) {\n    propertyDescriptor.value = recursiveGetOwnPropertyDescriptors(propertyDescriptor.value, options);\n  }\n  return propertyDescriptor\n}\n\nfunction recursiveGetOwnPropertyDescriptors($properties, $options) {\n  const propertyDescriptors = {};\n  const options = Object.assign({}, Settings, Options$1$1, $options);\n  if(options.depth >= options.maxDepth) { return propertyDescriptors }\n  else { options.depth++; }\n  for(const [$propertyKey, $propertyDescriptor] of Object.entries(Object.getOwnPropertyDescriptors($properties))) {\n    const propertyDescriptor = recursiveGetOwnPropertyDescriptor($properties, $propertyKey, options);\n    if(propertyDescriptor !== undefined) { propertyDescriptors[$propertyKey] = propertyDescriptor; }\n  }\n  return propertyDescriptors\n}\n\nvar Options$2 = { typeCoercion: false };\n\nfunction recursiveDefineProperty($target, $propertyKey, $propertyDescriptor, $options) {\n  const propertyDescriptor = Object.assign({}, $propertyDescriptor);\n  const options = Object.assign({}, Options$2, $options);\n  const typeOfPropertyValue = typeOf(propertyDescriptor.value);\n  if(['array', 'object'].includes(typeOfPropertyValue)) {\n    const propertyValue = isArrayLike(Object.defineProperties(\n      typedObjectLiteral(typeOfPropertyValue), propertyDescriptor.value\n    )) ? [] : {};\n    propertyDescriptor.value = recursiveDefineProperties(propertyValue, propertyDescriptor.value, options);\n  }\n  else if(\n    options.typeCoercion && \n    Object.getOwnPropertyDescriptor(propertyDescriptor, 'type') !== undefined &&\n    !['undefined', 'null'].includes(typeOfPropertyValue)\n  ) {\n    propertyDescriptor.value = Primitives[propertyDescriptor.type](propertyDescriptor.value);\n  }\n  Object.defineProperty($target, $propertyKey, propertyDescriptor);\n  return $target\n}\n\nfunction recursiveDefineProperties($target, $propertyDescriptors, $options) {\n  const options = Object.assign({}, Options$2, $options);\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of Object.entries($propertyDescriptors)) {\n    recursiveDefineProperty($target, $propertyKey, $propertyDescriptor, options);\n  }\n  return $target\n}\n\nclass LocalStorage extends EventTarget {\n  #db = localStorage\n  #path\n  constructor($path) {\n    super();\n    this.path = $path;\n  }\n  get path() { return this.#path }\n  set path($path) {\n    if(this.#path !== undefined) return\n    this.#path = $path;\n  }\n  get() {\n    let model = this.#db.getItem(this.path);\n    if(model) {\n      model = recursiveDefineProperties(JSON.parse(model), {\n        typeCoercion: true\n      });\n    }\n    return model\n  }\n  set($data) {\n    return this.#db.setItem(this.path, JSON.stringify(\n      recursiveGetOwnPropertyDescriptors($data, {\n        path: true,\n        retrocursion: false,\n        type: true,\n      })\n    ))\n  }\n  remove() {\n    try { return this.#db.removeItem(this.path) }\n    catch($err) { console.error($err); }\n  }\n}\n\nclass Verification extends EventTarget {\n  constructor($settings) {\n    super();\n    const settings = Object.assign({}, $settings);\n    Object.defineProperties(this, {\n      'type': { value: settings.type },\n      'key': { value: settings.key },\n      'value': { value: settings.value },\n      'message': { configurable: true, get() {\n        let message;\n        if(this.pass !== undefined) {\n          message = settings.messages[String(this.pass)](this);\n          Object.defineProperty(this, 'message', { value: message });\n        }\n        return message\n      } },\n      'pass': { writable: true, \n        set pass($pass) {\n          Object.defineProperty(this, 'pass', { value: $pass });\n        },\n      },\n    });\n  }\n}\n\nconst Messages$1 = {\n  'true': ($validation) => `${$validation.valid}`,\n  'false': ($validation) => `${$validation.valid}`,\n};\nfunction report($format = \"expand\", $prevalidation) {\n  const prevalidation = $prevalidation || this;\n  const schema = prevalidation.schema;\n  const validations = [].concat(\n    prevalidation.advance, prevalidation.deadvance, prevalidation.unadvance\n  );\n  if($format === \"expand\") {\n    const _report = typedObjectLiteral(schema.type);\n    for(const $validation of validations) {\n      const verifications = [].concat(\n        $validation.advance, $validation.deadvance, $validation.unadvance\n      );\n      _report[$validation.key] = {};\n      for(const $verification of verifications) {\n        _report[$validation.key][$verification.type] = {};\n        if($verification.validation) {\n          _report[$validation.key][$verification.type] = this.report($format, $verification.validation);\n        }\n        else {\n          _report[$validation.key][$verification.type] = $verification;\n        }\n      }\n    }\n    return _report\n  }\n  if($format === \"impand\") {\n    if(prevalidation.valid === false) { return false }\n    const _report = typedObjectLiteral(schema.type);\n    for(const $validation of validations) {\n      const verifications = [].concat(\n        $validation.advance, $validation.deadvance, $validation.unadvance\n      );\n      let reportValue;\n      iterateVerifications: \n      for(const $verification of verifications) {\n        if($verification.type === 'type') {\n          if($verification.validation && $validation.valid) {\n            reportValue = this.report($format, $verification.validation);\n          }\n          break iterateVerifications\n        }\n      }\n      if(!reportValue) { reportValue = $validation.valid; }\n      _report[$validation.key] = reportValue;\n    }\n    return _report\n  }\n}\nclass Validation extends EventTarget {\n  constructor($settings = {}, $schema) {\n    super();\n    const settings = Object.assign({ messages: Messages$1 }, $settings);\n    let valid;\n    const advance = [];\n    const deadvance = [];\n    const unadvance = [];\n    Object.defineProperties(this, {\n      'schema': { value: $schema },\n      'verificationType': { value: settings.verificationType },\n      'required': { value: settings.required },\n      'definition': { value: settings.definition },\n      'key': { value: settings.key },\n      'value': { value: settings.value },\n      'advance': { value: advance },\n      'deadvance': { value: deadvance },\n      'unadvance': { value: unadvance },\n      'valid': {\n        writable: true,\n        get valid() { return valid },\n        set valid($valid) { Object.defineProperty(this, 'valid', { value: $valid }); }\n      },\n      'report': { configurable: true, get() {\n        const _report = report.bind(this);\n        Object.defineProperty(this, 'report', { value: _report });\n        return _report\n      } },\n    });\n  }\n}\n\nconst Messages = {\n  'true': ($verification) => `${$verification.pass}`,\n  'false': ($verification) => `${$verification.pass}`,\n};\nclass Validator extends EventTarget {\n  constructor($definition = {}, $schema) {\n    super();\n    const definition = Object.freeze(\n      Object.assign({ messages: Messages }, $definition)\n    );\n    Object.defineProperties(this, {\n      'definition': { value: definition },\n      'schema': { value: $schema },\n      'type': { value: definition.type },\n      'messages': { value: definition.messages },\n      'validate': { configurable: true, get() {\n        function validate($key, $value, $source, $target) {\n          const { definition, messages, type } = this;\n          let verification = new Verification({\n            type: type,\n            key: $key,\n            value: definition.value,\n            messages: recursiveAssign$1({}, messages, definition.messages),\n          });\n          const validation = definition.validate(...arguments);\n          if(typeof validation === 'object') {\n            verification.validation = validation;\n            verification.pass = validation.valid;\n          }\n          else { verification.pass = validation; }\n          return verification\n        }\n        const boundValidate = validate.bind(this);\n        Object.defineProperty(this, 'validate', {\n          value: boundValidate\n        });\n        return boundValidate\n      } },\n    });\n  }\n}\n\nclass RequiredValidator extends Validator {\n  constructor($definition, $schema) {\n    super(Object.assign({}, $definition, {\n      type: 'required',\n      validate: ($key, $value, $source, $target) => {\n        const { requiredProperties, requiredPropertiesSize, type } = $schema;\n        const corequiredProperties = Object.assign({}, requiredProperties);\n        let corequiredPropertiesSize = requiredPropertiesSize;\n        Object.assign(typedObjectLiteral(type), $source, $target);\n        this.definition;\n        let pass;\n        if(!requiredPropertiesSize) { pass = true; }\n        else {\n          if(Object.hasOwn(corequiredProperties, $key)) {\n            delete corequiredProperties[$key];\n            corequiredPropertiesSize--;\n          }\n          if(corequiredPropertiesSize) {\n            const coschema = new Schema(corequiredProperties, {\n              path: $schema.path,\n              parent: $schema.parent,\n            });\n            const comodel = Object.assign({}, $target, $source);\n            const covalidation = coschema.validate(comodel);\n            pass = covalidation.valid;\n          }\n        }\n        return pass\n      }\n    }), $schema);\n  }\n}\n\nconst { ObjectKeys, TypeKeys } = index;\nclass TypeValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign({}, $definition, {\n      type: 'type',\n      validate: ($key, $value, $source, $target) => {\n        let pass;\n        const definition = this.definition;\n        let typeOfDefinitionValue = typeOf(definition.value);\n        if(typeOfDefinitionValue === 'function') {\n          typeOfDefinitionValue = typeOf(definition.value());\n        }\n        else if(definition.value instanceof Schema) {\n          typeOfDefinitionValue = definition.value.type;\n        }\n        else {\n          typeOfDefinitionValue = typeOf(definition.value);\n        }\n        if(TypeKeys.includes(typeOfDefinitionValue)) {\n          const typeOfValue = typeOf($value);\n          if(typeOfValue === 'undefined') { pass = false; }\n          else if(typeOfDefinitionValue === 'undefined') { pass = true; }\n          else if(definition.value instanceof Schema) {\n            const validation = definition.value.validate($value, $source);\n            pass = validation;\n          }\n          else { pass = (typeOfDefinitionValue === typeOfValue); }\n        }\n        else { pass = false; }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass RangeValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'range',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(typeof $value !== 'number') { pass = false; }\n        else {\n          const { min, max } = definition;\n          let validMin, validMax;\n          if(min !== undefined) { validMin = ($value >= min.value); }\n          else { validMin = true; }\n          if(max !== undefined) { validMax = ($value <= max.value); }\n          else { validMax = true; }\n          if(validMin && validMax) { pass = true; }\n          else { pass = false;}\n        }\n        return pass\n      }\n    }), $schema);\n  }\n}\n\nclass LengthValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'length',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(typeof $value !== 'string') { pass = false; }\n        else {\n          const { min, max } = definition;\n          let validMin, validMax;\n          if(min !== undefined) {\n            validMin = ($value.length >= min.value);\n          }\n          else { validMin = true; }\n          if(max !== undefined) {\n            validMax = ($value.length <= max.value);\n          }\n          else { validMax = true; }\n          if(validMin && validMax) { pass = true; }          \n          else { pass = false;}\n        }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass EnumValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'enum',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(![\n          'string', 'number', 'boolean'\n        ].includes(typeof $value)) { pass = false;}\n        else {\n          const enumeration = definition.value;\n          pass = enumeration.includes($value);\n        }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass MatchValidator extends Validator {\n  constructor($settings = {}, $schema) {\n    super(Object.assign($settings, {\n      type: 'match',\n      validate: ($key, $value) => {\n        const definition = this.settings;\n        let pass;\n        if(![\n          'string', 'number', 'boolean'\n        ].includes(typeof $value)) { pass = false;}\n        else {\n          const match = definition;\n          (match.value.exec($value) !== null);\n        }\n        return pass ? true : false\n      },\n    }), $schema);\n  }\n}\n\nvar Options$1 = (...$options) => Object.assign({\n  required: false,\n  verificationType: 'all', \n  // verificationType: 'one',\n  strict: false,\n  properties: {\n    type: 'type',\n    value: 'value',\n  },\n}, ...$options);\n\nclass Schema extends EventTarget {\n  constructor($properties = {}, $options = {}) {\n    super();\n    Object.defineProperties(this, {\n      'options': { value: Options$1($options) },\n      'type': { value: typeOf($properties) },\n      'parent': { configurable: true, get() {\n        const { options } = this;\n        const parent = (options.parent) ? options.parent : null;\n        Object.defineProperty(this, 'parent', { value: parent });\n        return parent\n      } },\n      'root': { configurable: true, get() {\n        let root = this;\n        iterateParents: \n        while(root) {\n          if([undefined, null].includes(root.parent)) { break iterateParents }\n          root = root.parent;\n        }\n        return root\n      } },\n      'key': { configurable: true, get() {\n        const { path } = this;\n        const key = (path) ? path.split('.').pop() : null;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'path': { configurable: true, get() {\n        const { options } = this;\n        const path = (options.path)\n          ? String(options.path)\n          : null;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'required': { configurable: true, get() {\n        const required = this.options.required;\n        Object.defineProperty(this, 'required', { value: required });\n        return required\n      } },\n      'requiredProperties': { configurable: true, get() {\n        const requiredProperties = typedObjectLiteral(this.type);\n        for(const [$propertyKey, $propertyDefinition] of Object.entries(this.target)) {\n          if($propertyDefinition.required?.value === true) {\n            requiredProperties[$propertyKey] = $propertyDefinition;\n          }\n        }\n        Object.defineProperty(this, 'requiredProperties', { value: Object.freeze(requiredProperties) });\n        return requiredProperties\n      } },\n      'requiredPropertiesSize': { configurable: true, get() {\n        const requiredPropertiesSize = Object.keys(this.requiredProperties).length;\n        Object.defineProperty(this, 'requiredPropertiesSize', { value: requiredPropertiesSize });\n        return requiredPropertiesSize\n      } },\n      'verificationType': { configurable: true, get() {\n        const verificationType = this.options.verificationType;\n        Object.defineProperty(this, 'verificationType', { value: verificationType });\n        return verificationType\n      } },\n      'target': { configurable: true, get() {\n        let properties;\n        const type = this.type;\n        if(type === 'array') { properties = $properties.slice(0, 1); }\n        else if(type === 'object') { properties = $properties; }\n        const target = parseProperties(properties, this);\n        Object.defineProperty(this, 'target', { value: target });\n        return target\n      } },\n      'validate': { value: function(...$arguments) {\n        let { $sourceName, $source, $target } = parseValidateArguments(...$arguments);\n        $target = $target || typedObjectLiteral($source);\n        const { target, path, required, type, verificationType } = this;\n        let validation = new Validation({\n          required, verificationType,\n          definition: target,\n          key: $sourceName, \n          value: $source,\n        }, this);\n        const sourceProperties = Object.entries($source);\n        let sourcePropertyIndex = 0;\n        while(sourcePropertyIndex < sourceProperties.length) {\n          const [$sourceKey, $sourceValue] = sourceProperties[sourcePropertyIndex];\n          const propertyValidation = this.validateProperty($sourceKey, $sourceValue, $source, $target);\n          if(propertyValidation.valid === true) { validation.advance.push(propertyValidation); } \n          else if(propertyValidation.valid === false) { validation.deadvance.push(propertyValidation); } \n          else if(propertyValidation.valid === undefined) { validation.unadvance.push(propertyValidation );}\n          sourcePropertyIndex++;\n        }\n        if(validation.advance.length) { validation.valid = true; }\n        else if(validation.deadvance.length) { validation.valid = false; }\n        else if(validation.unadvance.length) { validation.valid = undefined; }\n        else { validation.valid = true; }\n        return validation\n      } },\n      'validateProperty': { value: function() {\n        const { $key, $value, $source, $target } = parseValidatePropertyArguments(...arguments);\n        const { target, path, required, schema, type, verificationType } = this;\n        let propertyDefinition;\n        if(type === 'array') { propertyDefinition = target[0]; }\n        else if(type === 'object') { propertyDefinition = target[$key]; }\n        const propertyValidation = new Validation({\n          required,\n          verificationType,\n          definition: propertyDefinition,\n          key: $key,\n          value: $value,\n        }, this);\n        if(propertyDefinition === undefined) {\n          const verification = new Verification({\n            type: null,\n            definition: null,\n            key: $key,\n            value: $value,\n          }, this);\n          verification.pass = false;\n          propertyValidation.unadvance.push(verification);\n        }\n        else {\n          iteratePropertyDefinitionValidators:\n          for(const [$validatorIndex, $validator] of Object.entries(propertyDefinition.validators)) {\n            const verification = $validator.validate($key, $value, $source, $target);\n            if(verification.pass === true) { propertyValidation.advance.push(verification); }\n            else if(verification.pass === false) { propertyValidation.deadvance.push(verification); }\n            else if(verification.pass === undefined) { propertyValidation.unadvance.push(verification); }\n            if(this.verificationType === 'one' && propertyValidation.deadvance.length) {\n              break iteratePropertyDefinitionValidators\n            }\n          }\n        }\n        if(propertyValidation.deadvance.length) { propertyValidation.valid = false; }\n        else if(propertyValidation.advance.length) { propertyValidation.valid = true; }\n        else if(propertyValidation.unadvance.length) { propertyValidation.valid = false; }\n        return propertyValidation\n      } },\n    });\n  }\n}\nfunction parseValidateArguments(...$arguments) {\n  let $sourceName, $source, $target;\n  if($arguments.length === 1) {\n    $sourceName = null; $source = $arguments.shift(); $target = null;\n  }\n  else if($arguments.length === 2) {\n    if(['number', 'string'].includes(typeof $arguments[0])) {\n      $sourceName = $arguments.shift(); $source = $arguments.shift(); $target = null;\n    }\n    else if($arguments[0] && typeof $arguments[0] === 'object') {\n      $sourceName = null; $source = $arguments.shift(); $target = $arguments.shift();\n    }\n  }\n  else if($arguments.length === 3) {\n    if(['number', 'string'].includes(typeof $arguments[0])) {\n      $sourceName = $arguments.shift(); $source = $arguments.shift(); $target = $arguments.shift();\n    }\n  }\n  return { $sourceName, $source, $target }\n}\nfunction parseValidatePropertyArguments(...$arguments) {\n  let [$key, $value, $source, $target] = $arguments;\n  return { $key, $value, $source, $target }\n}\nfunction parseProperties($properties, $schema) {\n  const properties = typedObjectLiteral($properties);\n  if(_isPropertyDefinition($properties, $schema)) { return $properties }\n  for(const [\n    $propertyKey, $propertyValue\n  ] of Object.entries($properties)) {\n    let propertyDefinition = {};\n    typeOf($propertyValue);\n    const isPropertyDefinition = _isPropertyDefinition($propertyValue, $schema);\n    if(index.TypeValues.includes($propertyValue)) {\n      Object.assign(propertyDefinition, { type: { value: $propertyValue } });\n    }\n    else if(index.TypeKeys.includes($propertyValue)) {\n      Object.assign(propertyDefinition, { type: { value: index.Types[$propertyValue] } });\n    }\n    else if(!isPropertyDefinition) {\n      const subpropertyPath = ($schema.path) ? [$schema.path, $propertyKey].join('.') : $propertyKey;\n      Object.assign(propertyDefinition, {\n        type: { type: 'type', value: new Schema($propertyValue, Object.assign({}, $schema.options, {\n          parent: $schema,\n          path: subpropertyPath\n        })) }\n      });\n    }\n    else if(isPropertyDefinition) {\n      for(const [$propertyValidatorName, $propertyValidator] of Object.entries($propertyValue)) {\n        const isValidatorDefinition = _isValidatorDefinition($propertyValidator, $schema);\n        if(!isValidatorDefinition) {\n          let propertyValidator;\n          if($propertyValidatorName === 'type') {\n            if($propertyValidator && typeof $propertyValidator === 'object') {\n              const subpropertyPath = ($schema.path) ? [$schema.path, $propertyKey].join('.') : $propertyKey;\n              propertyValidator = new Schema($propertyValidator, Object.assign({}, $schema.options, {\n                parent: $schema, \n                path: subpropertyPath,\n              }));\n            }\n            else {\n              propertyValidator = $propertyValidator;\n            }\n          }\n          else {\n            propertyValidator = $propertyValidator;\n          }\n          propertyDefinition[$propertyValidatorName] = {\n            type: $propertyValidatorName, value: propertyValidator\n          };\n        }\n        else if(isValidatorDefinition) {\n          propertyDefinition[$propertyValidatorName] = $propertyValidator;\n        }\n      }\n    }\n    propertyDefinition.validators = [];\n    properties[$propertyKey] = propertyDefinition;\n    const validators = new Map();\n    validators.set('type', Object.assign({}, {\n      type: 'type', validator: TypeValidator, value: propertyDefinition.type.value\n    }));\n    validators.set('required', Object.assign({}, {\n      type: 'required', validator: RequiredValidator, value: propertyDefinition.required?.value || false\n    }));\n    if(propertyDefinition.range) { validators.set('range', Object.assign({}, propertyDefinition.range, {\n      type: 'range', validator: RangeValidator\n    })); }\n    else if(propertyDefinition.min || propertyDefinition.max) { validators.set('range', Object.assign({}, {\n      type: 'range', min: propertyDefinition.min, max: propertyDefinition.max, validator: RangeValidator\n    })); }\n    if(propertyDefinition.length) { validators.set('length', Object.assign({}, propertyDefinition.length, {\n      type: 'length', validator: LengthValidator\n    })); }\n    else if(propertyDefinition.minLength || propertyDefinition.maxLength) { validators.set('length', Object.assign({}, {\n      type: 'length', min: propertyDefinition.minLength, max: maxLength, validator: LengthValidator\n    })); }\n    if(propertyDefinition.enum) { validators.set('enum', Object.assign({}, propertyDefinition.enum, {\n      type: 'enum', validator: EnumValidator\n    })); }\n    if(propertyDefinition.match) { validators.set('match', Object.assign({}, propertyDefinition.match, {\n      type: 'match', validator: MatchValidator\n    })); }\n    delete propertyDefinition.min;\n    delete propertyDefinition.max;\n    delete propertyDefinition.minLength;\n    delete propertyDefinition.maxLength;\n    for(const [\n      $validatorName, $validatorSettings\n    ] of validators.entries()) {\n      const ValidatorClass = $validatorSettings.validator;\n      propertyDefinition[$validatorName] = $validatorSettings;\n      propertyDefinition.validators.push(new ValidatorClass($validatorSettings, $schema));\n    }\n  }\n  return properties\n}\nfunction _isPropertyDefinition($object, $schema) {\n  if(!$object || $object instanceof Schema) { return false }\n  const typeKey = $schema.options.properties.type;\n  return Object.hasOwn($object, typeKey)\n}\nfunction _isValidatorDefinition($object, $schema) {\n  if(!$object) { return false }\n  const valueKey = $schema.options.properties.value;\n  return Object.hasOwn($object, valueKey)\n}\n\nvar Options = ($options) => {\n  const Options = recursiveAssign$1({\n    autoload: false, \n    autosave: false, \n    localStorage: false, \n    path: null, \n    parent: null, \n    enableEvents: false,\n    enableValidation: true, \n    validationEvents: {\n      'validProperty:$key': true,\n      'validProperty': true,\n      'nonvalidProperty:$key': true,\n      'nonvalidProperty': true,\n    },\n    pathkey: true,\n    subpathError: false,\n    assignObject: 'set', \n    assignArray: 'set', \n    methods: {\n      map: {\n        get: {\n          mutatorEvents: {\n            'get': true,\n            'getProperty': true,\n            'getProperty:$key': true,\n          },\n        },\n        set: {\n          recursive: true,\n          mutatorEvents: {\n            'set': true,\n            'setProperty': true,\n            'setProperty:$key': true,\n          },\n        },\n        delete: {\n          mutatorEvents: {\n            'delete': true,\n            'deleteProperty': true,\n            'deleteProperty:$key': true,\n          },\n        },\n      },\n      array: {\n        concat: {\n          mutatorEvents: {\n            'concatElement:$index': true,\n            'concatElement': true,\n            'concat': true,\n          }\n        },\n        copyWithin: {\n          mutatorEvents: {\n            'copyWithinElement:$index': true,\n            'copyWithinElement': true,\n            'copyWithin': true,\n          }\n        },\n        fill: {\n          lengthen: true,\n          mutatorEvents: {\n            'fillElement:$index': true,\n            'fillElement': true,\n            'fill': true,\n          }\n        },\n        pop: {\n          mutatorEvents: { 'pop': true  },\n        },\n        push: {\n          mutatorEvents: {\n            'pushElement:$index': true,\n            'pushElement': true,\n            'push': true,\n          }\n        },\n        reverse: {\n          mutatorEvents: { 'reverse': true  },\n        },\n        shift: {\n          mutatorEvents: { 'shift': true  },\n        },\n        splice: {\n          mutatorEvents: {\n            'spliceDeleteElement:$index': true,\n            'spliceDeleteElement': true,\n            'spliceAddElement:$index': true,\n            'spliceAddElement': true,\n            'splice': true,\n          }\n        },\n        unshift: {\n          mutatorEvents: {\n            'unshiftElement:$index': true,\n            'unshiftElement': true,\n            'unshift': true,\n          }\n        },\n      },\n      object: {\n        assign: {\n          sourceTree: true,\n          mutatorEvents: {\n            'assignSourceProperty:$key': true,\n            'assignSourceProperty': true,\n            'assignSource': true,\n            'assign': true,\n          },\n        },\n        defineProperties: {\n          descriptorTree: true,\n          mutatorEvents: { 'defineProperties': true },\n        },\n        defineProperty: {\n          descriptorTree: true,\n          mutatorEvents: {\n            'defineProperty': true,\n            'defineProperty:$key': true,\n          },\n        },\n        freeze: {\n          recursive: true,\n          mutatorEvents: {\n            'freezeProperty': true,\n            'freeze': true,\n          },\n        },\n        seal: {\n          recursive: true,\n          mutatorEvents: {\n            'sealProperty': true,\n            'seal': true,\n          },\n        },\n      },\n    },\n  }, $options);\n  return Options\n};\n\nclass ModelEvent extends CustomEvent {\n  constructor($type, $settings, $model) {\n    super($type, $settings);\n    Object.defineProperties(this, {\n      'model': { get () { return $model } },\n      'key': { configurable: true, get () {\n        const key = (this.path) ? this.path.split('.').pop() : null;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'change': { configurable: true, get () {\n        const change = $settings.change;\n        Object.defineProperty(this, 'change', { value: change });\n        return change\n      } },\n      'value': { configurable: true, get () {\n        const value = $settings.value;\n        Object.defineProperty(this, 'value', { value: value });\n        return value\n      } },\n      'path': { configurable: true, get () {\n        const path = $settings.path;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'detail': { configurable: true, get () {\n        const detail = $settings.detail;\n        Object.defineProperty(this, 'detail', { value: detail });\n        return detail\n      } },\n    });\n  }\n}\n\nclass Change {\n  #_keyter = false \n  #_preter = false \n  #_anter = false \n  #_conter = false\n  #keyter\n  #preter\n  #anter\n  #conter\n  constructor($settings = {}) {\n    for(const [$key, $value] of Object.entries($settings)) { this[$key] = $value; }\n  }\n  get preter() { return this.#preter }\n  set preter($preter) {\n    if(this.#_preter === true) { return this.#preter }\n    this.#preter = $preter?.valueOf();\n    this.#_preter = true;\n  }\n  get anter() { return this.#anter }\n  set anter($anter) {\n    if(this.#_anter === true) { return this.#anter }\n    this.#anter = $anter?.valueOf();\n    this.#_anter = true;\n  }\n  get conter() {\n    if(\n      this.#_conter === true ||\n      [this.#_preter, this.#_anter].includes(false)\n    ) { return this.#conter }\n    const preter = JSON.stringify(this.preter);\n    const anter = JSON.stringify(this.anter);\n    let conter;\n    if(anter !== preter) { conter = true; }\n    else { conter = false; }\n    this.#conter = conter;\n    this.#_conter = true;\n    return this.#conter\n  }\n}\n\nlet ValidatorEvent$1 = class ValidatorEvent extends CustomEvent {\n  constructor($type, $settings, $model) {\n    super($type);\n    Object.defineProperties(this, {\n      'key': { configurable: true, get () {\n        const key = $settings.key;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'path': { configurable: true, get () {\n        const path = ($model.path)\n          ? [$model.path, $settings.key].join('.')\n          : $settings.key;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'value': { configurable: true, get () {\n        const value = $settings.value;\n        Object.defineProperty(this, 'value', { value: value, });\n        return value\n      } },\n      'valid': { configurable: true, get () {\n        const valid = $settings.valid;\n        Object.defineProperty(this, 'valid', { value: valid });\n        return valid\n      } },\n    });\n  }\n};\n\nfunction assign($model, $options, ...$sources) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'assign';\n  const assignArray = options.assignArray || 'assign';\n  const { path, schema, source, target } = $model;\n  const { enableValidation, mutatorEvents, required, sourceTree, validationEvents } = options;\n  const assignedSources = [];\n  const assignChange = new Change({ preter: $model });\n  for(let $source of $sources) {\n    let assignedSource;\n    const assignSourceChange = new Change({ preter: $model });\n    if(Array.isArray($source)) { assignedSource = []; }\n    else if($source && typeof $source === 'object') { assignedSource = {}; }\n    let validObject;\n    if(enableValidation && schema) {\n      validObject = schema.validate($source, $model.valueOf());\n      validObject.report();\n    }\n    iterateSourceProperties:\n    for(let [$sourceKey, $sourceValue] of Object.entries($source)) {\n      const assignSourcePropertyChange = new Change({ preter: target[$sourceKey] });\n      const assignSourcePropertyKeyChange = new Change({ preter: target[$sourceKey] });\n      if(schema && enableValidation) {\n        const validatorTarget = $model.valueOf();\n        const validatorSource = $source;\n        const validSourceProperty = schema.validateProperty($sourceKey, $sourceValue, validatorSource, validatorTarget);\n        if(validationEvents) {\n          let type, propertyType;\n          if(validSourceProperty.valid) {\n            type = 'validProperty';\n            propertyType = ['validProperty', $sourceKey].join(':');\n          }\n          else {\n            type = 'nonvalidProperty';\n            propertyType = ['nonvalidProperty', $sourceKey].join(':');\n          }\n          for(const $eventType of [type, propertyType]) {\n            $model.dispatchEvent(new ValidatorEvent$1($eventType, validSourceProperty, $model));\n          }\n        }\n        if(!validSourceProperty.valid) { continue iterateSourceProperties }\n      }\n      let sourceValue;\n      if($sourceValue && typeof $sourceValue === 'object') {\n        if($sourceValue instanceof $model.constructor) {\n          sourceValue = $sourceValue.valueOf();\n        }\n        let subschema;\n        if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema?.type === 'object') { subschema = schema.target[$sourceKey].type.value; }\n        else { subschema = null; }\n        const modelPath = (path)\n          ? [path, $sourceKey].join('.')\n          : String($sourceKey);\n        if(sourceTree === false) {\n          const suboptions = recursiveAssign$1({}, options, {\n            path: modelPath,\n            parent: $model,\n          });\n          sourceValue = new $model.constructor($sourceValue, subschema, suboptions);\n          const assignment = { [$sourceKey]: sourceValue };\n          Object.assign(target, assignment);\n          Object.assign(assignedSource, assignment);\n        }\n        else {\n          if(target[$sourceKey] instanceof $model.constructor) {\n            sourceValue = target[$sourceKey];\n          }\n          else {\n            const subproperties = typedObjectLiteral($sourceValue);\n            const suboptions = recursiveAssign$1({}, options, {\n              path: modelPath,\n              parent: $model,\n            });\n            sourceValue = new $model.constructor(subproperties, subschema, suboptions);\n          }\n          const assignment = { [$sourceKey]: sourceValue };\n          Object.assign(target, assignment);\n          Object.assign(assignedSource, assignment);\n          $model.retroReenableEvents();\n          if(sourceValue.type === 'array') {\n            if(['push', 'unshift'].includes(assignArray)) { sourceValue[assignArray](...$sourceValue); }\n            else { sourceValue[assignArray]($sourceValue); }\n          }\n          else if(sourceValue.type === 'object') { sourceValue[assignObject]($sourceValue); }\n        }\n      }\n      else {\n        sourceValue = $sourceValue;\n        const assignment = { [$sourceKey]: sourceValue };\n        Object.assign(target, assignment);\n        Object.assign(assignedSource, assignment);\n      }\n      if(mutatorEvents) {\n        const modelEventPath = (path) ? [path, $sourceKey].join('.') : String($sourceKey);\n        if(mutatorEvents['assignSourceProperty:$key']) {\n          const type = ['assignSourceProperty', $sourceKey].join(':');\n          assignSourcePropertyKeyChange.anter = target[$sourceKey];\n          $model.dispatchEvent(\n            new ModelEvent(type, {\n              path: modelEventPath,\n              value: sourceValue,\n              change: assignSourcePropertyKeyChange,\n              detail: {\n                source: assignedSource,\n              }\n            }, $model)\n          );\n        }\n        if(mutatorEvents['assignSourceProperty']) {\n          assignSourcePropertyChange.anter = target[$sourceKey];\n          $model.dispatchEvent(\n            new ModelEvent('assignSourceProperty', {\n              path: modelEventPath,\n              value: sourceValue,\n              change: assignSourcePropertyChange,\n              detail: {\n                source: assignedSource,\n              }\n            }, $model)\n          );\n        }\n      }\n    }\n    assignedSources.push(assignedSource);\n    if(mutatorEvents && mutatorEvents['assignSource']) {\n      assignSourceChange.anter = $model;\n      $model.dispatchEvent(\n        new ModelEvent('assignSource', {\n          path,\n          change: assignSourceChange,\n          detail: {\n            source: assignedSource,\n          },\n        }, $model)\n      );\n    }\n  }\n  if(mutatorEvents && mutatorEvents['assign']) {\n    assignChange.anter = $model;\n    $model.dispatchEvent(\n      new ModelEvent('assign', { \n        path,\n        change: assignChange,\n        detail: {\n          sources: assignedSources,\n        },\n      }, $model)\n    );\n  }\n  return $model\n}\n\nfunction defineProperties($model, $options, $propertyDescriptors) {\n  const { path, schema } = $model;\n  let {\n    enableValidation, mutatorEvents, required, \n    validation, validationEvents, validationReport\n  } = $options;\n  const propertyDescriptorEntries = Object.entries($propertyDescriptors);\n  const definePropertiesChange = new Change({ preter: $model });\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of propertyDescriptorEntries) {\n    $model.defineProperty($propertyKey, $propertyDescriptor, Object.assign({}, $options, {\n      validation, validationReport\n    }));\n  }\n  if(mutatorEvents && mutatorEvents['defineProperties']) {\n    definePropertiesChange.anter = $model;\n    $model.dispatchEvent(\n      new ModelEvent(\n        'defineProperties',\n        {\n          path,\n          value: $model.valueOf(),\n          detail: {\n            descriptors: $propertyDescriptors,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction defineProperty($model, $options, $propertyKey, $propertyDescriptor) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'defineProperties';\n  const assignArray = options.assignArray || 'defineProperties';\n  const {\n    descriptorTree, enableValidation, mutatorEvents, \n    validation, validationEvents, validationReport\n  } = options;\n  const { target, path, schema } = $model;\n  const propertyValue = $propertyDescriptor.value;\n  const targetPropertyDescriptor = Object.getOwnPropertyDescriptor(target, $propertyKey) || {};\n  const targetPropertyValue = targetPropertyDescriptor.value;\n  const definePropertyChange = new Change({ preter: targetPropertyValue });\n  const definePropertyKeyChange = new Change({ preter: targetPropertyValue });\n  const targetPropertyValueIsModelInstance = targetPropertyValue instanceof $model.constructor;\n  if(schema && enableValidation) {\n    const validProperty = schema.validateProperty(\n      $propertyKey, \n      impandTree(propertyValue, 'value') || propertyValue,\n      {},\n      $model.valueOf()\n    );\n    if(validationEvents) {\n      let type, propertyType;\n      if(validProperty.valid) {\n        type = 'validProperty';\n        propertyType = ['validProperty', $propertyKey].join(':');\n      }\n      else {\n        type = 'nonvalidProperty';\n        propertyType = ['nonvalidProperty', $propertyKey].join(':');\n      }\n      for(const $eventType of [type, propertyType]) {\n        $model.dispatchEvent(new ValidatorEvent$1($eventType, validProperty, $model));\n      }\n    }\n    if(!validProperty.valid) { return $model }\n  }\n  if(propertyValue && typeof propertyValue === 'object') {\n    const modelPath = (path)\n      ? [path, $propertyKey].join('.')\n      : String($propertyKey);\n    if(targetPropertyValueIsModelInstance) {\n      if(descriptorTree === true) {\n        targetPropertyValue.defineProperties($propertyDescriptor);\n      }\n      else {\n        Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n      }\n    }\n    else {\n      let subschema;\n      if(schema) {\n        if(schema.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema.type === 'object') { subschema = schema.target[$propertyKey].type.value; }\n        else { subschema = undefined; }\n      }\n      let subtarget = typedObjectLiteral(propertyValue);\n      const suboptions = recursiveAssign$1({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      const submodel = new $model.constructor(\n        subtarget, subschema, suboptions\n      );\n      if(descriptorTree === true) {\n        target[$propertyKey] = submodel;\n        $model.retroReenableEvents();\n        if(submodel.type === 'array') {\n          if(['push', 'unshift'].includes(assignArray)) { submodel[assignArray](...propertyValue); }\n          else { submodel[assignArray](propertyValue); }\n        }\n        else if(submodel.type === 'object') { submodel[assignObject](propertyValue); }\n      }\n      else if(descriptorTree === false) {\n        Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n      }\n    }\n  }\n  else {\n    Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n  }\n  if(mutatorEvents) {\n    const modelEventPath = (path)\n      ? [path, $propertyKey].join('.')\n      : String($propertyKey);\n    if(mutatorEvents['defineProperty:$key']) {\n      definePropertyKeyChange.anter = target[$propertyKey];\n      const type = ['defineProperty', $propertyKey].join(':');\n      $model.dispatchEvent(\n        new ModelEvent(type, {\n          path: modelEventPath,\n          value: propertyValue,\n          change: definePropertyKeyChange,\n          detail: {\n            prop: $propertyKey,\n            descriptor: $propertyDescriptor,\n          },\n        }, $model\n      ));\n    }\n    if(mutatorEvents['defineProperty']) {\n      definePropertyChange.anter = target[$propertyKey];\n      $model.dispatchEvent(\n        new ModelEvent('defineProperty', {\n          path: modelEventPath,\n          value: propertyValue,\n          change: definePropertyChange,\n          detail: {\n            prop: $propertyKey,\n            descriptor: $propertyDescriptor,\n          },\n        }, $model\n      ));\n    }\n  }\n  return $model\n}\n\nfunction freeze($model, $options) {\n  const { recursive, mutatorEvents } = $options;\n  const { target } = $model;\n  if(recursive === true) {\n    for(const [\n      $propertyKey, $propertyValue\n    ] of Object.entries(target)) {\n      if($propertyValue instanceof $model.constructor) {\n        $propertyValue.freeze();\n        if(mutatorEvents && mutatorEvents['freezeProperty']) {\n          $model.dispatchEvent(\n            new ModelEvent(\n              'freezeProperty',\n              { path: $propertyValue.path },\n              $model\n            )\n          );\n        }\n      }\n    }\n  }\n  Object.freeze(target);\n  if(mutatorEvents && mutatorEvents['freeze']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'freeze',\n        { path: $model.path },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction seal($model, $options) {\n  const { recursive, mutatorEvents } = $options;\n  const { target } = $model;\n  if(recursive === true) {\n    for(const [\n      $propertyKey, $propertyValue\n    ] of Object.entries(target)) {\n      if($propertyValue instanceof $model.constructor) {\n        $propertyValue.seal();\n        if(mutatorEvents && mutatorEvents['sealProperty']) {\n          $model.dispatchEvent(\n            new ModelEvent(\n              'sealProperty',\n              { path: $propertyValue.path },\n              $model\n            )\n          );\n        }\n      }\n    }\n  }\n  Object.seal(target);\n  if(mutatorEvents && mutatorEvents['seal']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'seal',\n        { path: $model.path },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nvar ObjectProperty = {\n  assign,\n  defineProperties,\n  defineProperty,\n  freeze,\n  seal,\n};\n\nfunction concat($model, $options) {\n  const { target, path, schema } = $model;\n  const { enableValidation, mutatorEvents, source, validationEvents } = $options;\n  const $arguments = [].concat(...arguments);\n  let valueIndex = target.length;\n  const values = [];\n  let targetConcat = [...Array.from(target)];\n  let model;\n  iterateValues: \n  for(let $value of $arguments) {\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral(validatorTarget);\n      const validValue = schema.validateProperty(valueIndex, $subvalue, validatorSource, validatorTarget);\n      if(schema &&validationEvents) {\n        let type, propertyType;\n        if(validValue.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', valueIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', valueIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validValue, $model));\n        }\n      }\n      if(!validValue.valid) { valueIndex++; continue iterateValues }\n    }\n    const modelPath = (path)\n      ? [path, valueIndex].join('.')\n      : String(valueIndex);\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      let subschema = schema?.target[0].type.value || null;\n      const submodel = typedObjectLiteral($value);\n      let value = new $model.constructor(submodel, subschema, {\n        path: modelPath,\n        parent: $model,\n      });\n      value.concat($value);\n      values[valueIndex] = value;\n    }\n    else {\n      values[valueIndex] = $value;\n    }\n    targetConcat = Array.prototype.concat.call(targetConcat, values[valueIndex]);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, valueIndex].join('.')\n        : String(valueIndex);\n      if(mutatorEvents['concatElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('concatElement', {\n            path: modelEventPath,\n            value: values[valueIndex],\n            detail: {\n              valueIndex,\n              value: values[valueIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['concatElement:$index']) {\n        $model.dispatchEvent(\n          new ModelEvent('concatElement', {\n            path: modelEventPath,\n            value: values[valueIndex],\n            detail: {\n              valueIndex,\n              value: values[valueIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    valueIndex++;\n  }\n  model = new $model.constructor(targetConcat, schema, $model.options);\n  if(mutatorEvents && mutatorEvents['concat']) {\n    $model.dispatchEvent(\n      new ModelEvent('concat', {\n        path,\n        detail: {\n          values: model,\n        },\n      }, $model)\n    );\n  }\n  return model\n}\n\nfunction copyWithin($model, $options) {\n  const { target, path } = $model;\n  const { enableValidation, validationEvents, mutatorEvents } = $options;\n  const copyTarget = (\n    arguments[0] >= 0\n  ) ? arguments[0]\n    : target.length = arguments[0];\n  const start = (\n    arguments[1] >= 0\n  ) ? arguments[1]\n    : target.length + arguments[1];\n  const end = (\n    arguments[2] === undefined\n  ) ? target.length\n    : (\n    arguments[2] >= 0\n  ) ? arguments[2]\n    : target.length + arguments[2];\n  const copiedItems = [];\n  let copyIndex = start;\n  let targetIndex = copyTarget;\n  while(copyIndex < end) {\n    const copyItem = target[copyIndex];\n    copiedItems.push(copyItem);\n    Array.prototype.copyWithin.call(\n      target,\n      targetIndex,\n      copyIndex,\n      copyIndex + 1\n    );\n    $model.retroReenableEvents();\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, copyIndex].join('.')\n        : String(copyIndex);\n      if(mutatorEvents['copyWithinElement']) {\n        $model.dispatchEvent(\n          new ModelEvent(\n            'copyWithinElement',\n            {\n              path: modelEventPath,\n              value: copyItem,\n              detail: {\n                target: targetIndex,\n                start: copyIndex,\n                end: copyIndex + 1,\n                item: copyItem,\n              },\n            },\n            $model\n          )\n        );\n      }\n      if(mutatorEvents['copyWithinElement:$index']) {\n        const type  = ['copyWithinElement', copyIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(\n            type,\n            {\n              path: modelEventPath,\n              value: copyItem,\n              detail: {\n                target: targetIndex,\n                start: copyIndex,\n                end: copyIndex + 1,\n                item: copyItem,\n              },\n            },\n            $model\n          )\n        );\n      }\n    }\n    copyIndex++;\n    targetIndex++;\n  }\n  // Array Copy Within Event\n  if(mutatorEvents && mutatorEvents['copyWithin']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'copyWithin',\n        {\n          path,\n          detail: {\n            target: copyTarget,\n            start: start,\n            end: end,\n            items: copiedItems,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction fill($model, $options, ...$arguments) {\n  const options = Object.assign({}, $options);\n  const { target, path, schema } = $model;\n  const assignObject = options.assignObject;\n  const assignArray = options.assignArray || assignObject;\n  const { enableValidation, lengthen, mutatorEvents, validationEvents } = options;\n  const filled = [];\n  let $start;\n  if(typeof $arguments[1] === 'number') {\n    $start = ($arguments[1] >= 0)\n      ? $arguments[1]\n      : target.length + $arguments[1];\n  }\n  else { $start = 0; }\n  let $end;\n  if(typeof $arguments[2] === 'number') {\n    $end = ($arguments[2] >= 0)\n      ? $arguments[2]\n      : target.length + $arguments[2];\n  } else { $end = target.length; }\n  if(lengthen && target.length < $end) { target.length = $end; }\n  let fillIndex = $start;\n  iterateFillIndexes: \n  while(\n    fillIndex < target.length &&\n    fillIndex < $end\n  ) {\n    if(schema && enableValidation) {\n      let validValue = schema.validate(validValue, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        if(validValue.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', fillIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', fillIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validValue, $model));\n        }\n      }\n      if(!validValue.valid) { continue iterateFillIndexes }\n    }\n    const modelPath = (path)\n      ? [path, fillIndex].join('.')\n      : String(fillIndex);\n    let $value = $arguments[0];\n    let value;\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral($value);\n      const suboptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      value = new $model.constructor(subproperties, subschema, suboptions);\n    }\n    Array.prototype.fill.call(target, value, fillIndex, fillIndex + 1);\n    $model.retroReenableEvents();\n    if(value.type === 'array') {\n      if(['push', 'unshift'].includes(assignArray)) { value[assignArray](...$value); }\n      else { value[assignArray]($value); }\n    }\n    else if(value.type === 'object') { value[assignObject]($value); }\n    filled.push(value);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, fillIndex].join('.')\n        : String(fillIndex);\n      if(mutatorEvents['fillElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('fillElement', {\n            path: modelEventPath, \n            value: value,\n            detail: {\n              start: fillIndex,\n              end: fillIndex + 1,\n              value,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['fillElement:$index']) {\n        const type = ['fillElement', fillIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            detail: {\n              start: fillIndex,\n              end: fillIndex + 1,\n              value,\n            },\n          }, $model)\n        );\n      }\n    }\n    fillIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['fill']) {\n    $model.dispatchEvent(\n      new ModelEvent('fill', {\n        path,\n        detail: {\n          start: $start,\n          end: $end,\n          filled,\n        },\n      },\n      $model)\n    );\n  }\n  return $model\n}\n\nfunction pop($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  const popElement = Array.prototype.pop.call(target);\n  const popElementIndex = target.length - 1;\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['pop']) {\n    const modelEventPath = (path)\n      ? [path, popElementIndex].join('.')\n      : String(popElementIndex);\n      $model.dispatchEvent(\n      new ModelEvent(\n        'pop',\n        {\n          path: modelEventPath,\n          value: popElement,\n          detail: {\n            elementIndex: popElementIndex,\n            element: popElement,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return popElement\n}\n\nfunction push($model, $options, ...$elements) {\n  const options = Object.assign({}, $options);\n  const assignArray = 'push';\n  const assignObject = options.assignObject;\n  const { enableValidation, mutatorEvents, source, validationEvents } = options;\n  const { target, path, schema } = $model;\n  const elements = [];\n  let elementsIndex = 0;\n  for(let $element of $elements) {\n    let element;\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral(validatorTarget);\n      const validElement = schema.validateProperty(elementsIndex, $element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validElement.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', elementsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', elementsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validElement, $model));\n        }\n      }\n      if(!validElement.valid) { return target.length }\n    }\n    const modelPath = (path)\n      ? [path, elementsIndex].join('.')\n      : String(elementsIndex);\n    if($element && typeof $element === 'object') {\n      $element = ($element instanceof $model.constructor) ? $element.valueOf() : $element;\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral(typeOf($element));\n      const submodelOptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      element = new $model.constructor(subproperties, subschema, submodelOptions);\n      Array.prototype.push.call(target, element);\n      $model.retroReenableEvents();\n      if(element.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { element[assignArray](...$element); }\n        else { element[assignArray]($element); }\n      }\n      else if(element.type === 'object') { element[assignObject]($element); }\n    }\n    else {\n      element = $element;\n      Array.prototype.push.call(target, element);\n    }\n    elements.push(element);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, elementsIndex].join('.')\n        : String(elementsIndex);\n      if(mutatorEvents['pushElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('pushElement', {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['pushElement:$index']) {\n        const type = ['pushElement', elementsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    elementsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['push']) {\n    $model.dispatchEvent(\n      new ModelEvent('push', {\n        path,\n        detail: {\n          elements,\n        },\n      }, $model)\n    );\n  }\n  return target.length\n}\n\nfunction reverse($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  Array.prototype.reverse.call(target, ...arguments);\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['reverse']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'reverse',\n        {\n          path,\n          detail: {\n            reference: target\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction shift($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  const shiftElement = Array.prototype.shift.call(target);\n  const shiftElementIndex = 0;\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['shift']) {\n    const modelEventPath = (path)\n      ? [path, shiftElementIndex].join('.')\n      : String(shiftElementIndex);\n    $model.dispatchEvent(\n      new ModelEvent(\n        'shift',\n        {\n          path: modelEventPath,\n          value: shiftElement,\n          detail: {\n            elementIndex: shiftElementIndex,\n            element: shiftElement,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return shiftElement\n}\n\nfunction splice($model, $options) {\n  const options = Object.assign({}, $options);\n  const assignObject = options.assignObject;\n  const assignArray = options.assignArray || assignObject;\n  const { mutatorEvents, source } = options;\n  const { target, path, schema } = $model;\n  const { enableValidation, validationEvents } = options;\n  const $arguments = [...arguments];\n  const $start = ($arguments[0] >= 0)\n    ? $arguments[0]\n    : target.length + $arguments[0];\n  const $deleteCount = ($arguments[1] <= 0)\n    ? 0\n    : (\n      $arguments[1] === undefined ||\n      $start + $arguments[1] >= target.length\n    ) ? target.length - $start\n      : $arguments[1];\n  const $addItems = $arguments.slice(2);\n  const addCount = $addItems.length;\n  const deleteItems = [];\n  let deleteItemsIndex = 0;\n  while(deleteItemsIndex < $deleteCount) {\n    const deleteItem = Array.prototype.splice.call(target, $start, 1)[0];\n    deleteItems.push(deleteItem);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, deleteItemsIndex].join('.')\n        : String(deleteItemsIndex);\n      if(mutatorEvents['spliceDeleteElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('spliceDeleteElement', {\n            path: modelEventPath,\n            value: deleteItem,\n            detail: {\n              index: $start + deleteItemsIndex,\n              deleteIndex: deleteItemsIndex,\n              deleteItem: deleteItem,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['spliceDeleteElement:$index']) {\n        const type = ['spliceDeleteElement', deleteItemsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: deleteItem,\n            detail: {\n              index: $start + deleteItemsIndex,\n              deleteIndex: deleteItemsIndex,\n              deleteItem: deleteItem,\n            },\n          }, $model)\n        );\n      }\n    }\n    deleteItemsIndex++;\n  }\n  let addItemsIndex = 0;\n  spliceAdd: \n  while(addItemsIndex < addCount) {\n    let addItem = $addItems[addItemsIndex];\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral(validatorTarget);\n      const validAddItem = schema.validateProperty(elementIndex, element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validAddItem.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', addItemsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', addItemsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validAddItem, $model));\n        }\n      }\n      if(!validAddItem.valid) { addItemsIndex++; continue spliceAdd }\n    }\n    const modelPath = (path)\n      ? [path, addItemsIndex].join('.')\n      : String(addItemsIndex);\n    let startIndex = $start + addItemsIndex;\n    if(addItem && typeof addItem === 'object') {\n      if(addItem instanceof $model.constructor) { addItem = addItem.valueOf(); }\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral(addItem);\n      const suboptions = recursiveAssign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      addItem = new $model.constructor(subproperties, subschema, suboptions);\n      Array.prototype.splice.call(target, startIndex, 0, addItem);\n      $model.retroReenableEvents();\n      if(addItem.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { addItem[assignArray](...$value); }\n        else { addItem[assignArray]($value); }\n      }\n      else if(addItem.type === 'object') { addItem[assignObject]($value); }\n    }\n    else {\n      Array.prototype.splice.call(target, startIndex, 0, addItem);\n    }\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, addItemsIndex].join('.')\n        : String(addItemsIndex);\n      if(mutatorEvents['spliceAddElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('spliceAddElement', {\n            path: modelEventPath,\n            value: addItem,\n            detail: {\n              index: $start + addItemsIndex,\n              addIndex: addItemsIndex,\n              addItem: addItem,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['spliceAddElement:$index']) {\n        const type = ['spliceAddElement', addItemsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: addItem,\n            detail: {\n              index: $start + addItemsIndex,\n              addIndex: addItemsIndex,\n              addItem: addItem,\n            },\n          }, $model)\n        );\n      }\n    }\n    addItemsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['splice']) {\n    $model.dispatchEvent(\n      new ModelEvent('splice', {\n        path,\n        detail: {\n          $start,\n          deleted: deleteItems,\n          added: $addItems,\n          length: target.length,\n        },\n      },\n      $model)\n    );\n  }\n  return deleteItems\n}\n\nfunction unshift($model, $options, ...$elements) {\n  const options = Object.assign({}, $options);\n  const assignArray = 'unshift';\n  const assignObject = options.assignObject;\n  const { enableValidation, mutatorEvents, source, validationEvents } = options;\n  const { target, path, schema } = $model;\n  const elements = [];\n  let elementsIndex = 0;\n  for(let $element of $elements) {\n    let element;\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral(validatorTarget);\n      const validElement = schema.validateProperty(elementsIndex, $element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validElement.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', elementsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', elementsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validElement, $model));\n        }\n      }\n      if(!validElement.valid) { return target.length }\n    }\n    const modelPath = (path)\n      ? [path, elementsIndex].join('.')\n      : String(elementsIndex);\n    if($element && typeof $element === 'object') {\n      $element = ($element instanceof $model.constructor) ? $element.valueOf() : $element;\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral(typeOf($element));\n      const submodelOptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      element = new $model.constructor(subproperties, subschema, submodelOptions);\n      Array.prototype.unshift.call(target, element);\n      $model.retroReenableEvents();\n      if(element.type === 'array') { element[assignArray](...$element); }\n      else if(element.type === 'object') { element[assignObject]($element); }\n    }\n    else {\n      element = $element;\n      Array.prototype.unshift.call(target, element);\n    }\n    elements.unshift(element);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, elementsIndex].join('.')\n        : String(elementsIndex);\n      if(mutatorEvents['unshiftElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('unshiftElement', {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['unshiftElement:$index']) {\n        const type = ['unshiftElement', elementsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    elementsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['unshift']) {\n    $model.dispatchEvent(\n      new ModelEvent('unshift', {\n        path,\n        detail: {\n          elements,\n        },\n      }, $model)\n    );\n  }\n  return target.length\n}\n\nvar ArrayProperty = {\n  concat: concat,\n  copyWithin: copyWithin,\n  fill: fill,\n  pop: pop,\n  push: push,\n  reverse: reverse,\n  shift: shift,\n  splice: splice,\n  unshift: unshift,\n};\n\nfunction getContent($model, $options) {\n  const { path } = $model;\n  const { mutatorEvents } = $options;\n  if(mutatorEvents && mutatorEvents['get']) {\n    $model.dispatchEvent(\n      new ModelEvent('get', {\n        path,\n        value: $model.valueOf(),\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nfunction getContentProperty($model, $options, $path) {\n  const { target, path } = $model;\n  const { mutatorEvents, pathkey, subpathError } = $options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue = target[propertyKey];\n    if(subpaths.length) {\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      return propertyValue.get(subpaths.join('.'), $options)\n    }\n    if(mutatorEvents) {\n      if(mutatorEvents['getProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('getProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['getProperty:$key']) {\n        const type = ['getProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n  else if(pathkey === false) {\n    const propertyValue = target[propertyKey];\n    return propertyValue\n  }\n}\n\nfunction getProperty($model, $options, ...$arguments) {\n  let getProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 2) { recursiveAssign$1(options, $arguments[1]); }\n    getProperty = getContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 1) { recursiveAssign$1(options, $arguments[0]); }\n    getProperty = getContent($model, options, ...$arguments);\n  }\n  return getProperty\n}\n\nfunction setContent($model, $options, $properties) {\n  const { path, schema } = $model;\n  let { enableValidation, mutatorEvents, required, validationEvents  } = $options;\n  for(const [$propertyKey, $propertyValue] of Object.entries($properties)) {\n    $model.set($propertyKey, $propertyValue, Object.assign($options, {\n      source: $properties,\n    }));\n  }\n  if(mutatorEvents && mutatorEvents['set']) {\n    $model.dispatchEvent(\n      new ModelEvent('set', {\n        path,\n        value: $model.valueOf(),\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nfunction setContentProperty($model, $options, $path, $value) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'set';\n  const assignArray = options.assignArray || 'set';\n  const { target, path, schema } = $model;\n  const {\n    enableValidation, mutatorEvents, pathkey, \n    recursive, subpathError, \n    validationEvents, source, \n  } = options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue;\n    const typeOfPropertyValue = typeOf($value);\n    const modelPath = (path)\n      ? [path, propertyKey].join('.')\n      : String(propertyKey);\n    if(subpaths.length) {\n      if(recursive && target[propertyKey] === undefined) {\n        let subschema;\n        if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema?.type === 'object') { subschema = schema.target[propertyKey].type.value; }\n        else { subschema = undefined; }\n        let submodel;\n        if(typeOfPropertyValue === 'array') { submodel = []; }\n        else if(typeOfPropertyValue === 'object') { submodel = {}; }\n        else {\n          if(isNaN(Number(propertyKey))) { submodel = {}; }\n          else { submodel = []; }\n        }\n        const submodelOptions = recursiveAssign$1({}, options, {\n          path: modelPath,\n          parent: $model,\n        });\n        propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      }\n      else {\n        propertyValue = target[propertyKey];\n      }\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject](subpaths.join('.'), $value, options); }\n      return propertyValue\n    }\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral(validatorTarget);\n      const validTargetProp = schema.validateProperty(propertyKey, $value, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validTargetProp, $model));\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const typeOfPropertyValue= typeOf($value);\n      let subschema;\n      let submodel;\n      if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n      else if(schema?.type === 'object') { subschema = schema.target[propertyKey].type.value; }\n      else { subschema = undefined; }\n      if(typeOfPropertyValue === 'array') { submodel = []; }\n      else if(typeOfPropertyValue === 'object') { submodel = {}; }\n      else {\n        if(isNaN(Number(propertyKey))) { submodel = {}; }\n        else { submodel = []; }\n      }\n      const submodelOptions = recursiveAssign$1({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      target[propertyKey] = propertyValue;\n      $model.retroReenableEvents();\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject]($value); }\n    }\n    else {\n      propertyValue = $value;\n      target[propertyKey] = propertyValue;\n    }\n    // const _propertyValue = (propertyValue === null) ? null : propertyValue.valueOf()\n    const _propertyValue = propertyValue.valueOf();\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      if(mutatorEvents['setProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('setProperty', {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              key: propertyKey,\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['setProperty:$key']) {\n        const type = ['setProperty', propertyKey].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n  else if(pathkey === false) {\n    let propertyKey = $path;\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const typeOfPropertyValue = typeOf($value);\n      let subschema;\n      let submodel;\n      if(schema?.type === 'array') {\n        subschema = schema.target[0].type.value;\n      }\n      if(schema?.type === 'object') {\n        subschema = schema.target[propertyKey].type.value;\n      }\n      else { subschema = undefined; }\n      if(typeOfPropertyValue === 'array') { submodel = []; }\n      else if(typeOfPropertyValue === 'object') { submodel = {}; }\n      else {\n        if(isNaN(Number(propertyKey))) { submodel = {}; }\n        else { submodel = []; }\n      }\n      const modelPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      const submodelOptions = recursiveAssign$1({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      target[propertyKey] = propertyValue;\n      $model.retroReenableEvents();\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject]($value); }\n    }\n    else {\n      propertyValue = $value;\n      target[propertyKey] = propertyValue;\n    }\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      if(mutatorEvents['setProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('setProperty', {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              key: propertyKey,\n              value: _propertyValue,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['setProperty:$key']) {\n        const type = ['setProperty', propertyKey].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n}\n\nfunction setProperty($model, $options, ...$arguments) {\n  let setProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 3) { recursiveAssign$1(options, $arguments[2]); }\n    setProperty = setContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 2) { recursiveAssign$1(options, $arguments[1]); }\n    setProperty = setContent($model, options, ...$arguments);\n  }\n  return setProperty\n}\n\nfunction deleteContent($model, $options) {\n  const { target } = $model;\n  for(const [$targetPropertyKey, $targetPropertyValue] of Object.entries(target)) {\n    $model.delete($targetPropertyKey, $options);\n  }\n  const { path } = $model;\n  const { mutatorEvents } = $options;\n  if(mutatorEvents && mutatorEvents['delete']) {\n    $model.dispatchEvent(\n      new ModelEvent('delete', {\n        path,\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nfunction deleteContentProperty($model, $options, $path) {\n  const { target, path, schema } = $model;\n  const { mutatorEvents, pathkey, subpathError, enableValidation, validationEvents } = $options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue = target[propertyKey];\n    if(subpaths.length) {\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      return propertyValue.delete(subpaths.join('.'), $options)\n    }\n    if(schema && enableValidation) {\n      const differedPropertyProxy = $model.valueOf();\n      delete differedPropertyProxy[propertyKey];\n      const validTargetProp = schema.validate(propertyKey, differedPropertyProxy, {}, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        const validatorEventPath = (path)\n          ? [path, propertyKey].join('.')\n          : String(propertyKey);\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(\n            new ValidatorEvent$1($eventType, Object.assign(validTargetProp, {\n              path: validatorEventPath\n            }), $model)\n          );\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n    if(propertyValue && typeof propertyValue === 'object') {\n      propertyValue.delete($options);\n    }\n    delete target[propertyKey];\n    if(mutatorEvents) {\n      if(mutatorEvents['deleteProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('deleteProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['deleteProperty:$key']) {\n        const type = ['deleteProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            value: propertyValue,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return undefined\n  }\n  else if(pathkey === false) {\n    const propertyKey = $path;\n    const propertyValue = target[propertyKey];\n\n    if(schema && enableValidation) {\n      const differedPropertyProxy = $model.valueOf();\n      delete differedPropertyProxy[propertyKey];\n      const validTargetProp = schema.validate(propertyKey, differedPropertyProxy, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(\n            new ValidatorEvent$1($eventType, validTargetProp, $model)\n          );\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n  \n    if(propertyValue instanceof $model.constructor) {\n      propertyValue.delete($options);\n    }\n    delete target[propertyKey];\n    if(mutatorEvents) {\n      if(mutatorEvents['deleteProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('deleteProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['deleteProperty:$key']) {\n        const type = ['deleteProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            value: propertyValue,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return undefined\n  }\n}\n\nfunction deleteProperty($model, $options, ...$arguments) {\n  let deleteProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 2) { recursiveAssign$1(options, $arguments[1]); }\n    deleteProperty = deleteContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 1) { recursiveAssign$1(options, $arguments[0]); }\n    deleteProperty = deleteContent($model, options, ...$arguments);\n  }\n  return deleteProperty\n}\n\nvar MapProperty = {\n  get: getProperty,\n  set: setProperty,\n  delete: deleteProperty,\n};\n\nconst Defaults = Object.freeze({\n  object: [{\n    keys: ['valueOf'],\n    methodDescriptor: function($methodName, $model) {\n      return { value: function valueOf() { return $model.parse({ type: 'object' }) } }\n    },\n  }, {\n    keys: ['toString'],\n    methodDescriptor: function($methodName, $model) {\n      return { value: function toString($parseSettings = {}) {\n        const replacer = ($parseSettings.replacer !== undefined)\n          ? $parseSettings.replacer : null;\n        const space = ($parseSettings.space !== undefined)\n          ? $parseSettings.space : 0;\n        return $model.parse({ type: 'string', replacer, space })\n      } }\n    }, \n  }, {\n    keys: [\n      'entries', 'fromEntries', 'getOwnPropertyDescriptors', \n      'getOwnPropertyDescriptor', 'getOwnPropertyNames', \n      /* 'getOwnPropertySymbols', */ 'groupBy', 'hasOwn', 'is', \n      'getPrototypeOf', 'isExtensible', 'isFrozen', 'isSealed', \n      'keys', 'preventExtensions', 'values',\n    ],\n    methodDescriptor: function($methodName, $model) {\n      return { value: Object[$methodName].bind(null, $model.valueOf()) }\n    },\n  }, {\n    keys: ['propertyIsEnumerable', 'hasOwnProperty'], \n    methodDescriptor: function($methodName, $model) {\n      return { value: () => $model.parse({ type: 'object' })[$methodName] }\n    },\n  }, {\n    type: 'mutators',\n    keys: Object.keys(ObjectProperty), \n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: ObjectProperty[$methodName].bind(null, $model, $options) }\n    }\n  }],\n  array: [{\n    keys: ['length'], \n    methodDescriptor: function($propertyName, $model, $options) {\n      return {\n        get() { return $model.target.length },\n        set($propertyValue) { $model.target.length = $propertyValue; },\n      }\n    }\n  }, {\n    keys: [\n      'from', 'fromAsync', 'isArray', 'of', \n    ], \n    methodDescriptor: function($methodName, $model) {\n      return { value: Array[$methodName] }\n    }, \n  }, {\n    keys: [\n      'at', 'every', 'filter', 'find', 'findIndex', 'findLast',\n      'findLastIndex', 'flat', 'flatMap', 'forEach', 'includes', \n      'indexOf', 'join', 'lastIndexOf', 'map', 'reduce', 'reduceRight', \n      'slice', 'some', 'sort', 'toReversed',  'toSorted', 'toSpliced', \n      'with', \n    ], \n    methodDescriptor: function($methodName, $model) {\n      return { value: Array.prototype[$methodName].bind(null, $model) }\n    }\n  }, {\n    type: 'mutators',\n    keys: Object.keys(ArrayProperty), \n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: ArrayProperty[$methodName].bind(null, $model, $options) }\n    }\n  }],\n  map: [{\n    type: 'mutators',\n    keys: Object.keys(MapProperty),\n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: MapProperty[$methodName].bind(null, $model, $options) }\n    }\n  }]\n});\nfunction Methods($model) {\n  // Object, Array, Map\n  for(const [$propertyClassName, $propertyClasses] of Object.entries(Defaults)) {\n    for(const $propertyClass of $propertyClasses) {\n      const { keys, methodDescriptor, type } = $propertyClass;\n      for(const $methodName of keys) {\n        if($propertyClassName === 'map' || type === 'mutators') {\n          const modelMethodOptions = structuredClone(\n            $model.options.methods[$propertyClassName][$methodName]\n          );\n          const methodOptions = Object.assign({}, $model.options, modelMethodOptions);\n          delete methodOptions.mutatorEvents;\n          methodOptions.mutatorEvents = modelMethodOptions.mutatorEvents;\n          Object.defineProperty(\n            $model, $methodName, methodDescriptor($methodName, $model, methodOptions)\n          );\n        }\n        else {\n          Object.defineProperty(\n            $model, $methodName, methodDescriptor($methodName,  $model)\n          );\n        }\n      }\n    }\n  }\n  return $model\n}\n\nconst ValidArrayAssigmentMethods = Object.freeze(\n  ['push', 'unshift']\n);\nconst ValidObjectAssigmentMethods = Object.freeze(\n  ['assign', 'defineProperties', 'set']\n);\n\nfunction Assign($model, $properties, $options) {\n  const { type } = $model;\n  const { assignObject, assignArray /*, autoload */ } = $options;\n  if(type === 'array' && ValidArrayAssigmentMethods.includes(assignArray)) {\n    $model[assignArray](...$properties);\n  }\n  else if(type === 'object' && ValidObjectAssigmentMethods.includes(assignObject)) {\n    $model[assignObject]($properties);\n  }\n  return $model\n}\n\nclass Model extends Core {\n  constructor($properties = {}, $schema = null, $options = {}) {\n    super({ propertyDirectory: { accessors: [($target, $property) => {\n      if($property === undefined) { return $target.target }\n      else { return $target.get($property) }\n    }] } });\n    if($properties instanceof Model) { $properties = $properties.valueOf(); }\n    let parent = null;\n    let path = null;\n    try {\n      Object.defineProperty(this, 'mount', { value: function($mount) {\n        const mountParent = $mount.parent;\n        const mountPath = $mount.path;\n        const property = (mountPath) ? mountPath.split('.').pop() : mountPath;\n        if(parent) { parent.unmount(property); }\n        parent = mountParent;\n        path = mountPath;\n      } });\n    }\n    catch($err) { console.error($err); }\n    try {\n      Object.defineProperty(this, 'unmount', { value: function($unmount) {\n        const unmountPath = $unmount.path;\n        delete this[$property];\n      } });\n    }\n    catch($err) { console.error($err); }\n    Object.defineProperties(this, {\n      'options': { configurable: true, get() {\n        const options = Options($options);\n        if(options.events) {\n          this.addEvents(options.events);\n          delete options.events;\n        }\n        if(options.enableEvents) {\n          const typeofEnableEvents = typeof options.enableEvents;\n          if(typeofEnableEvents === 'boolean') { this.enableEvents(); }\n          else if(typeofEnableEvents === 'object') { this.enableEvents(options.enableEvents); }\n        }\n        Object.defineProperty(this, 'options', { value: options });\n        return options\n      } },\n      'parent': { get() { return parent } },\n      'path': { get() { return path } },\n      'key': { get() { return (path) ? path.pop() : path } },\n      'target': { configurable: true, get() {\n        const target = typedObjectLiteral($properties);\n        Object.defineProperty(this, 'target', { value: target });\n        return target\n      } },\n      'type': { configurable: true, get() {\n        const type = typeOf(this.target);\n        Object.defineProperty(this, 'type', { value: type });\n        return type\n      } },\n      'schema': { configurable: true, get() {\n        const typeOfSchema = typeOf($schema);\n        let schema;\n        if(['undefined', 'null'].includes(typeOfSchema)) { schema = null; }\n        else if($schema instanceof Schema) { schema = $schema; }\n        else if(['array', 'object'].includes(typeOfSchema)) { schema = new Schema($schema); }\n        Object.defineProperty(this, 'schema', { value: schema });\n        return schema\n      } },\n    });\n    this.mount({\n      parent: this.options.parent,\n      path: this.options.path\n    });\n    if(localStorage && this.options.localStorage) {\n      Object.defineProperties(this,  {\n        'localStorage': { configurable: true, get() {\n          let _localStorage;\n          let path = [window.location.pathname];\n          if(this.path) { path.push(this.path); }\n          path = path.join('');\n          _localStorage = new LocalStorage(path);\n          Object.defineProperty(this, 'localStorage', { value: _localStorage });\n          return _localStorage\n        } },\n        'save': { value: function save() {\n          return this.localStorage.set(this.valueOf())\n        } },\n        'load': { value: function load() {\n          return this.localStorage.get()\n        } },\n        'unload': { value: function unload() {\n          return this.localStorage.remove()\n        } },\n      });\n    }\n    Methods(this);\n    if(this.options.autoload) {\n      Assign(this, this.load() || $properties, this.options);\n    }\n    else {\n      Assign(this, $properties, this.options);\n    }\n  }\n  retroReenableEvents() {\n    let model = this;\n    while(model) {\n      model.reenableEvents({ enable: true });\n      model = model.parent;\n    }\n    return this\n  }\n  parse($settings = { type: 'object', replacer: null, space: 0 }) {\n    let parsement = typedObjectLiteral(this.type);\n    for(const [\n      $propertyDescriptorName, $propertyDescriptor\n    ] of Object.entries(\n      Object.getOwnPropertyDescriptors(this.target))\n    ) {\n      let { enumerable, value, writable, configurable } = $propertyDescriptor;\n      if(value instanceof Model) {\n        Object.defineProperty(parsement, $propertyDescriptorName, {\n          enumerable, value: value.valueOf(), writable, configurable\n        });\n      }\n      else {\n        Object.defineProperty(parsement, $propertyDescriptorName, {\n          enumerable, value, writable, configurable\n        });\n      }\n    }\n    let { type, replacer, space } = $settings;\n    if(type === 'object') { return parsement }\n    else if(type === 'string') { return JSON.stringify(parsement, replacer, space) }\n    else { return undefined }\n  }\n}\n\nexport { Model, Schema, Validation, Validator, Verification };\n//# sourceMappingURL=objecture.js.map\n"],"names":["Primitives","string","String","number","Number","boolean","Boolean","bigint","BigInt","undefined","null","Object","values","Objects","object","array","Array","Types","assign","typeOf","$data","prototype","toString","call","slice","toLowerCase","Options$2","depth","maxDepth","accessors","default","$target","$property","ancestors","propertyDirectory","$object","$options","_propertyDirectory","options","concat","$accessor","bind","accessor","includes","unshift","$key","$value","entries","push","is","subtargets","$subtargetKey","$subtarget","path","join","recursiveAssign","$sources","$source","$sourcePropertyKey","$sourcePropertyValue","typeOfTargetPropertyValue","typeOfSourcePropertyValue","handleNoCommaBraces","span","length","separatorI","i","rangeStart","substr","rangeEnd","expand","pattern","TypeError","scanning","openingBraces","closingBraces","handledUntil","results","alternatives","char","substring","j","newResults","k","l","unhandledFrom","negate","supportNegation","supportParens","isNegated","escapeRegExpChar","Pattern","source","excludeDot","separator","separatorSplitter","separatorMatcher","wildcard","str","result","escapeRegExpString","requiredSeparator","optionalSeparator","segments","split","support","qMark","star","globstar","brackets","extglobs","Segment","isFirst","isLast","end","EXCLUDE_DOT_PATTERN","add","state","addition","addToUnmatch","unmatch","addToMatch","dotHandled","match","convertSegment","segment","openingBracket","closingBracket","openingParens","closingParens","parensHandledUntil","extglobModifiers","scanningForParens","escapeChar","nextChar","State","modifier_1","pop","indexOf","Error","useUnmatch","convert","isMatch","regexp","sample","test","outmatch","isArray","arguments","regexpPattern","patterns","predicate","mappedValue","flatMap","positiveResults","negativeResults","negatedPattern","convertedPattern","compile","RegExp","flags","fn","EventDefinition","context","enable","nontranssigned","_targets","_assign","_deassign","_transsign","constructor","$settings","$context","this","settings","Settings","deassign","transsign","bindListener","errorLog","methods","addEventListener","$eventDefinition","type","listener","useCapture","on","once","removeEventListener","off","dispatchEvent","$event","emit","$type","$arguments","$settingKey","$settingValue","defineProperties","value","assigned","deassigned","transsigned","configurable","get","listenerTarget","iterateListenerPathKeys","$pathKey","defineProperty","$enable","targets","$targetElement","target","$err","console","error","pretargets","pretargetElement","find","$pretarget","ptargets","targetPaths","scopeKey","targetElement","propertyPathMatcher","$propertyPath","$propertyValue","charAt","$targetPath","$targetValue","propertyDirectorySettings","Core","EventTarget","static","events","enableEvents","propertyDefinitions","getEvents","addEvents","removeEvents","disableEvents","reenableEvents","emitEvents","Settings$1","enumerable","writable","$filterEvents","$filterEvent","iterateEventFilterProperties","$filterEventPropertyKey","$filterEventPropertyValue","eventFilterMatch","$addEvents","$propEvents","$scopeKey","propEvents","$propEventSettings","$propEventListener","propEventSettings","trim","propEvent","expandEvents","$enableEvents","$addEvent","event","settingValue","eventDefinition","$events","eventsIndex","splice","$eventParameters","super","implement","typedObjectLiteral","_typedObjectLiteral","typeOfValue","Settings$6","Options$6","parent","definition","propertyClasses","MVCFrameworkCore","Map","fromEntries","$mount","mountParent","mountPath","property","unmount","$unmount","Options","key","root","iterateParents","retroReenableEvents","core","addPropertyClasses","$this","$addPropertyClasses","iteratePropertyClasses","$addPropertyClass","targetType","name","administer","deadminister","instate","deinstate","$properties","$propertyKey","properties","keys","reverse","removePropertyClasses","$removePropertyClasses","reduce","$propertyClasses","propertyClass","$propertyClass","$removePropertyClass","propertyClassIndex","findIndex","mount","map","addProperties","PrimitiveKeys","PrimitiveValues","ObjectKeys$1","ObjectValues","TypeKeys$1","TypeValues","TypeMethods","index","freeze","__proto__","ObjectKeys","TypeKeys","regularExpressions","$path","subpaths","subtarget","$subpath","impandTree","typeOfProperty","typeOfSource","$sourceKey","$sourceValue","recursiveAssign$1","Options$1$1","delimiter","retrocursion","recursiveGetOwnPropertyDescriptor","propertyDescriptor","getOwnPropertyDescriptor","recursiveGetOwnPropertyDescriptors","propertyDescriptors","$propertyDescriptor","getOwnPropertyDescriptors","typeCoercion","recursiveDefineProperty","typeOfPropertyValue","propertyValue","isArrayLike","isInteger","iterateSourceKeys","isNaN","recursiveDefineProperties","$propertyDescriptors","LocalStorage","db","localStorage","model","getItem","JSON","parse","set","setItem","stringify","remove","removeItem","message","pass","messages","$pass","Messages$1","true","$validation","valid","false","report","$format","$prevalidation","prevalidation","schema","validations","advance","deadvance","unadvance","_report","verifications","$verification","validation","reportValue","iterateVerifications","$schema","verificationType","required","$valid","Messages","$definition","validate","boundValidate","verification","Verification","RequiredValidator","Validator","requiredProperties","requiredPropertiesSize","corequiredProperties","corequiredPropertiesSize","hasOwn","coschema","Schema","comodel","TypeValidator","typeOfDefinitionValue","RangeValidator","min","max","validMin","validMax","LengthValidator","EnumValidator","MatchValidator","exec","Options$1","strict","$propertyDefinition","_isPropertyDefinition","propertyDefinition","isPropertyDefinition","$propertyValidatorName","$propertyValidator","isValidatorDefinition","_isValidatorDefinition","propertyValidator","subpropertyPath","validators","validator","range","minLength","maxLength","enum","$validatorName","$validatorSettings","ValidatorClass","parseProperties","$sourceName","shift","parseValidateArguments","Validation","sourceProperties","sourcePropertyIndex","propertyValidation","validateProperty","parseValidatePropertyArguments","iteratePropertyDefinitionValidators","$validatorIndex","$validator","typeKey","valueKey","ModelEvent","CustomEvent","$model","change","detail","Change","_keyter","_preter","_anter","_conter","keyter","preter","anter","conter","$preter","valueOf","$anter","ValidatorEvent$1","ObjectProperty","assignArray","enableValidation","mutatorEvents","sourceTree","validationEvents","assignedSources","assignChange","assignedSource","assignSourceChange","validObject","iterateSourceProperties","assignSourcePropertyChange","assignSourcePropertyKeyChange","validatorTarget","validatorSource","validSourceProperty","propertyType","$eventType","sourceValue","subschema","modelPath","suboptions","assignment","subproperties","modelEventPath","sources","validationReport","propertyDescriptorEntries","definePropertiesChange","descriptors","descriptorTree","targetPropertyValue","definePropertyChange","definePropertyKeyChange","targetPropertyValueIsModelInstance","validProperty","submodel","prop","descriptor","recursive","seal","ArrayProperty","valueIndex","targetConcat","from","iterateValues","validValue","$subvalue","copyWithin","copyTarget","start","copiedItems","copyIndex","targetIndex","copyItem","item","items","fill","assignObject","lengthen","filled","$start","$end","fillIndex","iterateFillIndexes","popElement","popElementIndex","elementIndex","element","$elements","elements","elementsIndex","$element","validElement","submodelOptions","reference","shiftElement","shiftElementIndex","$deleteCount","$addItems","addCount","deleteItems","deleteItemsIndex","deleteItem","deleteIndex","addItemsIndex","spliceAdd","addItem","validAddItem","ValidatorEvent","startIndex","addIndex","deleted","added","MapProperty","getProperty","pathkey","subpathError","propertyKey","_path","getContentProperty","getContent","setProperty","validTargetProp","_propertyValue","setContentProperty","setContent","delete","deleteProperty","differedPropertyProxy","validatorEventPath","deleteContentProperty","$targetPropertyKey","$targetPropertyValue","deleteContent","Defaults","methodDescriptor","$methodName","$parseSettings","replacer","space","$propertyName","ValidArrayAssigmentMethods","ValidObjectAssigmentMethods","Assign","Model","autoload","autosave","nonvalidProperty","concatElement","copyWithinElement","fillElement","pushElement","spliceDeleteElement","spliceAddElement","unshiftElement","assignSourceProperty","assignSource","freezeProperty","sealProperty","typeofEnableEvents","typeOfSchema","_localStorage","window","location","pathname","save","load","unload","$propertyClassName","modelMethodOptions","structuredClone","methodOptions","Methods","parsement","$propertyDescriptorName","TOKENS","attribute","id","class","comma","combinator","universal","TRIM_TOKENS","Set","RECURSIVE_PSEUDO_CLASSES","nthChildRegExp","RECURSIVE_PSEUDO_CLASSES_ARGS","getArgumentPatternByType","replace","gobbleParens","text","offset","nesting","STRING_PATTERN","ESCAPE_PATTERN","tokenize","selector","grammar","replacements","repeat","quote","content","pos","tokens","token","lastIndex","args","before","groups","after","has","tokenizeBy","changedTokens","replacement","tokenOffset","nestTokens","list","t","selectors","temp","left","right","flatten","node","child","ast","argument","childArg","subtree","listOrNode","QuerySelector","method","querySelectors","Combinators","Query","$queryMethod","$queryString","query","queryString","queryTokens","parsel.tokenize","scopeCombinator","scopeQueryString","parsel.stringify","scopeQueryParse","parsel.parse","children","$childIndex","$child","dexter","matches","childQuery","NodeList","Node","View","templates","scope","parentElement","_template","eventListeners","enableQuerySelectors","_querySelectors","qs","addQuerySelectors","template","document","createElement","$templateString","disableQuerySelectors","innerHTML","append","$children","forEach","removeChild","clear","querySelector","$queryScope","querySelectorAll","$queryMethods","$selectors","$selectorName","$selector","removeQuerySelectors","render","$models","$template","Events","ok","$response","$requestMethod","response","status","statusCode","eventType","statusText","statusTextMessage","abort","$abortController","abortController","FetchRoute","origin","addMethods","$methods","$methodOptions","abortKey","async","$resourcePath","$resourceOptions","resourceOptions","urlSearchParams","headers","body","priority","pathParameters","URLSearchParams","resource","decodePath","createEvent","AbortController","signal","fetch","then","$fetchSource","clone","catch","pathFragments","resourcePathFragments","decodedPathFragments","pathFragmentsIndex","pathFragment","resourcePathFragment","removeMethods","aborted","$eventTarget","FetchRouter","scheme","domain","port","_authority","_origin","routes","authority","$routes","addRoutes","_routes","$routePath","$routeSettings","removeRoutes","dist","TokenData","encode","encodeURIComponent","DEFAULT_DELIMITER","tokensToFunction","data","missing","decode","decodeURIComponent","pathToRegexp","decoders","NOOP_VALUE","input","m","params","create","decoder","stringifyToken","isSafe","first","rest","ID_START","every","ID_CONTINUE","isNameSafe","isNextNameSafe","DEBUG_URL","SIMPLE_TOKENS","escape","Iter","peek","_peek","next","tryConsume","consume","nextType","encodePath","it","chars","lexer","endType","param","encoders","encodeValue","tokenToFunction","encoder","extras","sensitive","trailing","seq","sequenceToRegExp","init","fork","backtrack","isSafeSegmentParam","Route","_settings","active","$settingVal","$active","RouteEvent","route","LocationRouter","hashpath","windowLocationOrigin","base","routeEntries","setRoute","boundPopstate","popstate","navigate","$method","matchPath","matchRoute","hash","href","routeEventOptions","preterRoute","history","search","enableRoute","getRoute","disableRoute","routeSettings","deleteRoute","routeEntryIndex","iterateMatchEntries","$route","SocketEvent","socket","$socket","isBinary","MessageAdapter","SocketRouter","webSocket","messageAdapters","url","boundMessage","WebSocket","protocol","host","URL","$isBinary","$messageAdapter","messageEvent","$adapter","adapter","send","Instate","ValidClasses","Class","Deinstate","Control","models","views","controls","fetchRouters","locationRouters","Primitives$1","Objects$1","Types$1"],"mappings":"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","x_google_ignoreList":[6,17]}