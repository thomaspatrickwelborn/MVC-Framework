{"version":3,"file":"mvc-framework.min.js","sources":["../../../../Core-Plex/distributement/core-plex.js","../../../development/coutil/path/index.js","../../../development/coutil/tree/index.js","../../../development/coutil/pandTree/index.js","../../../development/coutil/index.js","../../../development/coutil/keytree/index.js","../../../development/coutil/objectCount/index.js","../../../development/coutil/pathkeytree/index.js","../../../development/core/settings/index.js","../../../development/core/options/index.js","../../../development/core/index.js","../../../../Objecture/distributement/objecture.sans.core-plex.js","../../../development/model/localStorage/index.js","../../../development/model/index.js","../../../node_modules/parsel-js/dist/parsel.js","../../../development/view/querySelector/index.js","../../../development/view/query/index.js","../../../development/view/index.js","../../../development/view/settings/index.js","../../../development/view/options/index.js","../../../development/routers/fetch/interfaces/response/events/index.js","../../../development/routers/fetch/fetchRoute/index.js","../../../development/routers/fetch/index.js","../../../development/routers/fetch/settings/index.js","../../../development/routers/fetch/options/index.js","../../../node_modules/path-to-regexp/dist/index.js","../../../development/routers/location/route/index.js","../../../development/routers/location/routeEvent/index.js","../../../development/routers/location/index.js","../../../development/routers/location/settings/index.js","../../../development/routers/location/options/index.js","../../../development/routers/socket/event/index.js","../../../development/routers/socket/messageAdapter/index.js","../../../development/routers/socket/index.js","../../../development/routers/socket/settings/index.js","../../../development/routers/socket/options/index.js","../../../development/control/index.js","../../../development/control/settings/index.js","../../../development/control/options/index.js","../../../../Objecture/distributement/objecture.js"],"sourcesContent":["const defaultAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n};\nconst getAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target.get($property) }\n};\nvar accessors = {\n  default: defaultAccessor,\n  get: getAccessor,\n};\n\nfunction expandEvents($propEvents, $scopeKey = ':scope') {\n  if(\n    Array.isArray($propEvents) ||\n    $propEvents === undefined\n  ) { return $propEvents }\n  const propEvents = [];\n  for(const [\n    $propEventSettings, $propEventListener\n  ] of Object.entries($propEvents)) {\n    const propEventSettings = $propEventSettings.trim().split(' ');\n    let path, type, listener;\n    if(propEventSettings.length === 1) {\n      path = $scopeKey;\n      type = propEventSettings[0];\n    }\n    else if(propEventSettings.length > 1) {\n      path = propEventSettings[0];\n      type = propEventSettings[1];\n    }\n    if(Array.isArray($propEventListener)) {\n      listener = $propEventListener[0];\n      $propEventListener[1];\n    }\n    else {\n      listener = $propEventListener;\n    }\n    const propEvent = {\n      type,\n      path,\n      listener,\n      enable: false,\n    };\n    propEvents.push(propEvent);\n  }\n  return propEvents\n}\n\nconst Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'undefined': undefined,\n  'null': null,\n};\nconst PrimitiveKeys = Object.keys(Primitives);\nconst PrimitiveValues = Object.values(Primitives);\nconst Objects = {\n  'object': Object,\n  'array': Array,\n};\nconst ObjectKeys = Object.keys(Objects);\nconst ObjectValues = Object.values(Objects);\nconst Types = Object.assign({}, Primitives, Objects);\nconst TypeKeys = Object.keys(Types);\nconst TypeValues = Object.values(Types);\nconst TypeMethods = [\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n];\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ObjectKeys: ObjectKeys,\n  ObjectValues: ObjectValues,\n  Objects: Objects,\n  PrimitiveKeys: PrimitiveKeys,\n  PrimitiveValues: PrimitiveValues,\n  Primitives: Primitives,\n  TypeKeys: TypeKeys,\n  TypeMethods: TypeMethods,\n  TypeValues: TypeValues,\n  Types: Types\n});\n\nvar regularExpressions = {\n  quotationEscape: /\\.(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,\n};\n\nconst typeOf = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nfunction subpaths($path) {\n  return $path.split(\n    new RegExp(regularExpressions.quotationEscape)\n  )\n}\nfunction keypaths($path) {\n  const _subpaths = subpaths($path);\n  _subpaths.pop();\n  return _subpaths\n}\nfunction key($path) { return subpaths($path).pop() }\nfunction root($path) { return subpaths($path).shift() }\nfunction typeofRoot($path) { return (\n  Number(root($path))\n) ? 'array' : 'object' }\nfunction parse($path) {\n  return {\n    subpaths: subpaths($path),\n    keypaths: keypaths($path),\n    key: key($path),\n    root: root($path),\n    typeofRoot: typeofRoot($path),\n  }\n}\n\nfunction typedObjectLiteral($value) {\n  let _typedObjectLiteral;\n  const typeOfValue = typeOf($value);\n  if(typeOfValue === 'object') { _typedObjectLiteral = {}; }\n  else if(typeOfValue === 'array') { _typedObjectLiteral = []; }\n  else if(typeOfValue === 'string') {\n    if($value?.toLowerCase() === 'object') { _typedObjectLiteral = {}; }\n    else if($value?.toLowerCase() === 'array') { _typedObjectLiteral = []; }\n  }\n  else { _typedObjectLiteral = undefined; }\n  return _typedObjectLiteral\n}\n\nfunction get($path, $source) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n  const key = subpaths.pop();\n  let subtarget = $source;\n  for(const $subpath of subpaths) { subtarget = subtarget[$subpath]; }\n  return subtarget[key]\n}\nfunction set($path, $source) {\n  const {\n    keypaths, key, typeofRoot\n  } = parse($path);\n  const target = typedObjectLiteral(typeofRoot);\n  let subtarget = target;\n  for(const $subpath of keypaths) {\n    if(Number($subpath)) { subtarget[$subpath] = []; }\n    else { subtarget[$subpath] = {}; }\n    subtarget = subtarget[$subpath];\n  }\n  subtarget[key] = $source;\n  return target\n}\n\nfunction expandTree($source, $property) {\n  const typeOfProperty = typeOf($property);\n  const typeOfSource = typeOf($source);\n  if(\n    !['string', 'function'].includes(typeOfProperty) ||\n    !['array', 'object'].includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source);\n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = set($property, $sourceValue); }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue); }\n    if(target[$sourceKey][$property] && typeof target[$sourceKey][$property] === 'object') {\n      target[$sourceKey][$property] = expandTree(target[$sourceKey][$property], $property);\n    }\n  }\n  return target\n}\n\nfunction impandTree($source, $property) {\n  const typeOfProperty = typeOf($property);\n  const typeOfSource = typeOf($source);\n  if(\n    !['string', 'function'].includes(typeOfProperty) ||\n    !['array', 'object'].includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source);\n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = get($property, $sourceValue); }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue); }\n    if(target[$sourceKey] && typeof target[$sourceKey] === 'object') {\n      target[$sourceKey] = impandTree(target[$sourceKey], $property);\n    }\n  }\n  return target\n}\n\nconst Options = {\n  depth: 0,\n  maxDepth: 10,\n  accessors: [accessors.default],\n};\nfunction propertyDirectory($object, $options) {\n  const _propertyDirectory = [];\n  const options = Object.assign({}, Options, $options);\n  options.depth++;\n  if(options.depth > options.maxDepth) { return _propertyDirectory }\n  iterateAccessors: \n  for(const $accessor of options.accessors) {\n    const accessor = $accessor.bind($object);\n    const object = accessor($object);\n    if(!object) continue iterateAccessors\n    for(const [$key, $value] of Object.entries(object)) {\n      if(!options.values) { _propertyDirectory.push($key); }\n      else if(options.values) { _propertyDirectory.push([$key, $value]); }\n      if(\n        typeof $value === 'object' &&\n        $value !== null &&\n        $value !== object\n      ) {\n        const subtargets = propertyDirectory($value, options);\n        if(!options.values) {\n          for(const $subtarget of subtargets) {\n            const path = [$key, $subtarget].join('.');\n            _propertyDirectory.push(path);\n          }\n        }\n        else if(options.values) {\n          for(const [$subtargetKey, $subtarget] of subtargets) {\n            const path = [$key, $subtargetKey].join('.');\n            _propertyDirectory.push([path, $subtarget]);\n          }\n        }\n      }\n    }\n  }\n  return _propertyDirectory\n}\n\nfunction recursiveAssign($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssign($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nfunction recursiveAssignConcat($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if( \n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssignConcat($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else if(\n        typeOfTargetPropertyValue === 'array' &&\n        typeOfSourcePropertyValue === 'array'\n      ) {\n        $target[$sourcePropertyKey] = $target[$sourcePropertyKey].concat($sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nfunction recursiveFreeze($target) {\n  for(const [$propertyKey, $propertyValue] of Object.entries($target)) {\n    if($propertyValue && typeof $propertyValue === 'object') {\n      recursiveFreeze($propertyValue);\n    }\n  }\n  return Object.freeze($target)\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  accessors: accessors,\n  expandEvents: expandEvents,\n  expandTree: expandTree,\n  impandTree: impandTree,\n  propertyDirectory: propertyDirectory,\n  recursiveAssign: recursiveAssign,\n  recursiveAssignConcat: recursiveAssignConcat,\n  recursiveFreeze: recursiveFreeze,\n  regularExpressions: regularExpressions,\n  typeOf: typeOf,\n  typedObjectLiteral: typedObjectLiteral,\n  variables: index$1\n});\n\nvar Settings$1 = ($settings = {}) => {\n  const Settings = {\n    events: {},\n    enableEvents: false,\n    propertyDirectory: {\n      accessors: [accessors.default],\n      scopeKey: ':scope', \n      maxDepth: 10,\n    },\n    propertyDefinitions: {\n      getEvents: 'getEvents',\n      addEvents: 'addEvents',\n      removeEvents: 'removeEvents',\n      enableEvents: 'enableEvents',\n      disableEvents: 'disableEvents',\n      reenableEvents: 'reenableEvents',\n      emitEvents: 'emitEvents',\n    },\n  };\n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'propertyDefinitions':\n      case 'propertyDirectory':\n        Settings[$settingKey] = Object.assign(Settings[$settingKey], $settingValue);\n        break\n      default: \n        Settings[$settingKey] = $settingValue;\n        break\n    }\n  }\n  return Settings\n};\n\nfunction handleNoCommaBraces(span) {\n    if (span.length < 3) {\n        return \"{\" + span + \"}\";\n    }\n    var separatorI = -1;\n    for (var i = 2; i < span.length; i++) {\n        if (span[i] === '.' && span[i - 1] === '.' && (i < 2 || span[i - 2] !== '\\\\')) {\n            if (separatorI > -1) {\n                return \"{\" + span + \"}\";\n            }\n            separatorI = i - 1;\n        }\n    }\n    if (separatorI > -1) {\n        var rangeStart = span.substr(0, separatorI);\n        var rangeEnd = span.substr(separatorI + 2);\n        if (rangeStart.length > 0 && rangeEnd.length > 0) {\n            return \"[\" + span.substr(0, separatorI) + \"-\" + span.substr(separatorI + 2) + \"]\";\n        }\n    }\n    return \"{\" + span + \"}\";\n}\nfunction expand(pattern) {\n    if (typeof pattern !== 'string') {\n        throw new TypeError(\"A pattern must be a string, but \" + typeof pattern + \" given\");\n    }\n    var scanning = false;\n    var openingBraces = 0;\n    var closingBraces = 0;\n    var handledUntil = -1;\n    var results = [''];\n    var alternatives = [];\n    var span;\n    for (var i = 0; i < pattern.length; i++) {\n        var char = pattern[i];\n        if (char === '\\\\') {\n            i++;\n            continue;\n        }\n        if (char === '{') {\n            if (scanning) {\n                openingBraces++;\n            }\n            else if (i > handledUntil && !openingBraces) {\n                span = pattern.substring(handledUntil + 1, i);\n                for (var j = 0; j < results.length; j++) {\n                    results[j] += span;\n                }\n                alternatives = [];\n                handledUntil = i;\n                scanning = true;\n                openingBraces++;\n            }\n            else {\n                openingBraces--;\n            }\n        }\n        else if (char === '}') {\n            if (scanning) {\n                closingBraces++;\n            }\n            else if (closingBraces === 1) {\n                span = pattern.substring(handledUntil + 1, i);\n                if (alternatives.length > 0) {\n                    var newResults = [];\n                    alternatives.push(expand(span));\n                    for (var j = 0; j < results.length; j++) {\n                        for (var k = 0; k < alternatives.length; k++) {\n                            for (var l = 0; l < alternatives[k].length; l++) {\n                                newResults.push(results[j] + alternatives[k][l]);\n                            }\n                        }\n                    }\n                    results = newResults;\n                }\n                else {\n                    span = handleNoCommaBraces(span);\n                    for (var j = 0; j < results.length; j++) {\n                        results[j] += span;\n                    }\n                }\n                handledUntil = i;\n                closingBraces--;\n            }\n            else {\n                closingBraces--;\n            }\n        }\n        else if (!scanning && char === ',' && closingBraces - openingBraces === 1) {\n            span = pattern.substring(handledUntil + 1, i);\n            alternatives.push(expand(span));\n            handledUntil = i;\n        }\n        if (scanning && (closingBraces === openingBraces || i === pattern.length - 1)) {\n            scanning = false;\n            i = handledUntil - 1;\n        }\n    }\n    if (handledUntil === -1) {\n        return [pattern];\n    }\n    var unhandledFrom = pattern[handledUntil] === '{' ? handledUntil : handledUntil + 1;\n    if (unhandledFrom < pattern.length) {\n        span = pattern.substr(unhandledFrom);\n        for (var j = 0; j < results.length; j++) {\n            results[j] += span;\n        }\n    }\n    return results;\n}\n\nfunction negate(pattern, options) {\n    var supportNegation = options['!'] !== false;\n    var supportParens = options['()'] !== false;\n    var isNegated = false;\n    var i;\n    if (supportNegation) {\n        for (i = 0; i < pattern.length && pattern[i] === '!'; i++) {\n            if (supportParens && pattern[i + 1] === '(') {\n                i--;\n                break;\n            }\n            isNegated = !isNegated;\n        }\n        if (i > 0) {\n            pattern = pattern.substr(i);\n        }\n    }\n    return { pattern: pattern, isNegated: isNegated };\n}\n\nfunction escapeRegExpChar(char) { if (char === '-' ||\n    char === '^' ||\n    char === '$' ||\n    char === '+' ||\n    char === '.' ||\n    char === '(' ||\n    char === ')' ||\n    char === '|' ||\n    char === '[' ||\n    char === ']' ||\n    char === '{' ||\n    char === '}' ||\n    char === '*' ||\n    char === '?' ||\n    char === '\\\\') {\n    return \"\\\\\" + char;\n}\nelse {\n    return char;\n} }\nfunction escapeRegExpString(str) {\n    var result = '';\n    for (var i = 0; i < str.length; i++) {\n        result += escapeRegExpChar(str[i]);\n    }\n    return result;\n}\n\nfunction Pattern(source, options, excludeDot) {\n    var separator = typeof options.separator === 'undefined' ? true : options.separator;\n    var separatorSplitter = '';\n    var separatorMatcher = '';\n    var wildcard = '.';\n    if (separator === true) {\n        separatorSplitter = '/';\n        separatorMatcher = '[/\\\\\\\\]';\n        wildcard = '[^/\\\\\\\\]';\n    }\n    else if (separator) {\n        separatorSplitter = separator;\n        separatorMatcher = escapeRegExpString(separatorSplitter);\n        if (separatorMatcher.length > 1) {\n            separatorMatcher = \"(?:\" + separatorMatcher + \")\";\n            wildcard = \"((?!\" + separatorMatcher + \").)\";\n        }\n        else {\n            wildcard = \"[^\" + separatorMatcher + \"]\";\n        }\n    }\n    else {\n        wildcard = '.';\n    }\n    var requiredSeparator = separator ? separatorMatcher + \"+?\" : '';\n    var optionalSeparator = separator ? separatorMatcher + \"*?\" : '';\n    var segments = separator ? source.split(separatorSplitter) : [source];\n    var support = {\n        qMark: options['?'] !== false,\n        star: options['*'] !== false,\n        globstar: separator && options['**'] !== false,\n        brackets: options['[]'] !== false,\n        extglobs: options['()'] !== false,\n        excludeDot: excludeDot && options.excludeDot !== false,\n    };\n    return {\n        source: source,\n        segments: segments,\n        options: options,\n        separator: separator,\n        separatorSplitter: separatorSplitter,\n        separatorMatcher: separatorMatcher,\n        optionalSeparator: optionalSeparator,\n        requiredSeparator: requiredSeparator,\n        wildcard: wildcard,\n        support: support,\n    };\n}\nfunction Segment(source, pattern, isFirst, isLast) { return {\n    source: source,\n    isFirst: isFirst,\n    isLast: isLast,\n    end: source.length - 1,\n}; }\nfunction Result() {\nreturn {\n    match: '',\n    unmatch: '',\n    useUnmatch: false,\n}; }\nfunction State(pattern, segment, result) { return {\n    pattern: pattern,\n    segment: segment,\n    result: result,\n    openingBracket: segment.end + 1,\n    closingBracket: -1,\n    openingParens: 0,\n    closingParens: 0,\n    parensHandledUntil: -1,\n    extglobModifiers: [],\n    scanningForParens: false,\n    escapeChar: false,\n    addToMatch: true,\n    addToUnmatch: pattern.support.extglobs,\n    dotHandled: false,\n    i: -1,\n    char: '',\n    nextChar: '',\n}; }\n\nvar EXCLUDE_DOT_PATTERN = '(?!\\\\.)';\nfunction add(state, addition, excludeDot) {\n    if (state.addToUnmatch) {\n        state.result.unmatch += addition;\n    }\n    if (state.addToMatch) {\n        if (excludeDot && !state.dotHandled) {\n            addition = EXCLUDE_DOT_PATTERN + addition;\n        }\n        state.dotHandled = true;\n        state.result.match += addition;\n    }\n    return state.result;\n}\nfunction convertSegment(pattern, segment, result) {\n    var support = pattern.support;\n    var state = State(pattern, segment, result);\n    var separatorMatcher = segment.isLast\n        ? pattern.optionalSeparator\n        : pattern.requiredSeparator;\n    if (!support.excludeDot) {\n        state.dotHandled = true;\n    }\n    if (segment.end === -1) {\n        return segment.isLast && !segment.isFirst ? result : add(state, separatorMatcher);\n    }\n    if (support.globstar && segment.source === '**') {\n        var prefix = !state.dotHandled ? EXCLUDE_DOT_PATTERN : '';\n        var globstarSegment = prefix + pattern.wildcard + \"*?\" + separatorMatcher;\n        return add(state, \"(?:\" + globstarSegment + \")*?\");\n    }\n    while (++state.i <= segment.end) {\n        state.char = state.segment.source[state.i];\n        state.nextChar = state.i < segment.end ? segment.source[state.i + 1] : '';\n        if (state.char === '\\\\') {\n            if (state.i < state.segment.end) {\n                state.escapeChar = true;\n                continue;\n            }\n            else {\n                state.char = '';\n            }\n        }\n        var pattern = state.pattern, segment = state.segment, char = state.char, i = state.i;\n        if (pattern.support.brackets && !state.scanningForParens) {\n            if (i > state.openingBracket && i <= state.closingBracket) {\n                if (state.escapeChar) {\n                    add(state, escapeRegExpChar(char));\n                }\n                else if (i === state.closingBracket) {\n                    add(state, ']');\n                    state.openingBracket = segment.source.length;\n                }\n                else if (char === '-' && i === state.closingBracket - 1) {\n                    add(state, '\\\\-');\n                }\n                else if (char === '!' && i === state.openingBracket + 1) {\n                    add(state, '^');\n                }\n                else if (char === ']') {\n                    add(state, '\\\\]');\n                }\n                else {\n                    add(state, char);\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (i > state.openingBracket) {\n                if (char === ']' &&\n                    !state.escapeChar &&\n                    i > state.openingBracket + 1 &&\n                    i > state.closingBracket) {\n                    state.closingBracket = i;\n                    state.i = state.openingBracket;\n                    if (pattern.separator) {\n                        add(state, \"(?!\" + pattern.separatorMatcher + \")[\", true);\n                    }\n                    else {\n                        add(state, '[', true);\n                    }\n                }\n                else if (i === segment.end) {\n                    add(state, '\\\\[');\n                    state.i = state.openingBracket;\n                    state.openingBracket = segment.source.length;\n                    state.closingBracket = segment.source.length;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (char === '[' &&\n                !state.escapeChar &&\n                i > state.closingBracket &&\n                i < segment.end) {\n                state.openingBracket = i;\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        if (state.pattern.support.extglobs) {\n            var extglobModifiers = state.extglobModifiers, char = state.char, nextChar = state.nextChar, i = state.i;\n            if (nextChar === '(' &&\n                !state.escapeChar &&\n                (char === '@' || char === '?' || char === '*' || char === '+' || char === '!')) {\n                if (state.scanningForParens) {\n                    state.openingParens++;\n                }\n                else if (i > state.parensHandledUntil && !state.closingParens) {\n                    state.parensHandledUntil = i;\n                    state.scanningForParens = true;\n                    state.openingParens++;\n                }\n                else if (state.closingParens >= state.openingParens) {\n                    if (char === '!') {\n                        state.addToMatch = true;\n                        state.addToUnmatch = false;\n                        add(state, state.pattern.wildcard + \"*?\", true);\n                        state.addToMatch = false;\n                        state.addToUnmatch = true;\n                        state.result.useUnmatch = true;\n                    }\n                    extglobModifiers.push(char);\n                    add(state, '(?:', true);\n                    state.openingParens--;\n                    state.i++;\n                    continue;\n                }\n                else {\n                    state.openingParens--;\n                }\n            }\n            else if (char === ')' && !state.escapeChar) {\n                if (state.scanningForParens) {\n                    state.closingParens++;\n                }\n                else if (extglobModifiers.length) {\n                    var modifier_1 = extglobModifiers.pop();\n                    if (modifier_1 === '!' && extglobModifiers.indexOf('!') !== -1) {\n                        throw new Error(\"Nested negated extglobs aren't supported\");\n                    }\n                    modifier_1 = modifier_1 === '!' || modifier_1 === '@' ? '' : modifier_1;\n                    add(state, \")\" + modifier_1);\n                    state.addToMatch = true;\n                    state.addToUnmatch = true;\n                    state.closingParens--;\n                    continue;\n                }\n            }\n            else if (char === '|' && state.closingParens &&\n                !state.scanningForParens &&\n                !state.escapeChar) {\n                add(state, '|');\n                continue;\n            }\n            if (state.scanningForParens) {\n                if (state.closingParens === state.openingParens || i === state.segment.end) {\n                    state.scanningForParens = false;\n                    state.i = state.parensHandledUntil - 1;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        var pattern = state.pattern;\n        var support = pattern.support;\n        if (!state.escapeChar && support.star && state.char === '*') {\n            if (state.i === state.segment.end || state.nextChar !== '*') {\n                add(state, pattern.wildcard + \"*?\", true);\n            }\n        }\n        else if (!state.escapeChar && support.qMark && state.char === '?') {\n            add(state, pattern.wildcard, true);\n        }\n        else {\n            add(state, escapeRegExpChar(state.char));\n        }\n        state.escapeChar = false;\n    }\n    return add(state, separatorMatcher);\n}\nfunction convert(source, options, excludeDot) {\n    var pattern = Pattern(source, options, excludeDot);\n    var result = Result();\n    var segments = pattern.segments;\n    for (var i = 0; i < segments.length; i++) {\n        var segment = Segment(segments[i], pattern, i === 0, i === segments.length - 1);\n        convertSegment(pattern, segment, result);\n    }\n    if (result.useUnmatch) {\n        return \"(?!^\" + result.unmatch + \"$)\" + result.match;\n    }\n    else {\n        return result.match;\n    }\n}\n\nfunction flatMap(array, predicate) {\n    var results = [];\n    for (var i = 0; i < array.length; i++) {\n        var mappedValue = predicate(array[i]);\n        for (var j = 0; j < mappedValue.length; j++) {\n            results.push(mappedValue[j]);\n        }\n    }\n    return results;\n}\nfunction compile(patterns, options) {\n    patterns = Array.isArray(patterns) ? patterns : [patterns];\n    if (options['{}'] !== false) {\n        patterns = flatMap(patterns, expand);\n    }\n    var positiveResults = [];\n    var negativeResults = [];\n    var result = '';\n    for (var i = 0; i < patterns.length; i++) {\n        var negatedPattern = negate(patterns[i], options);\n        var convertedPattern = convert(negatedPattern.pattern, options, !negatedPattern.isNegated);\n        if (negatedPattern.isNegated) {\n            negativeResults.push(convertedPattern);\n        }\n        else {\n            positiveResults.push(convertedPattern);\n        }\n    }\n    if (negativeResults.length) {\n        result = \"(?!(?:\" + negativeResults.join('|') + \")$)\";\n    }\n    if (positiveResults.length > 1) {\n        result += \"(?:\" + positiveResults.join('|') + \")\";\n    }\n    else if (positiveResults.length === 1) {\n        result += positiveResults[0];\n    }\n    else if (result.length) {\n        result += convert('**', options, true);\n    }\n    return \"^\" + result + \"$\";\n}\nfunction isMatch(regexp, sample) { if (typeof sample !== 'string') {\n    throw new TypeError(\"Sample must be a string, but \" + typeof sample + \" given\");\n} return regexp.test(sample); }\n/**\n * Compiles one or more glob patterns into a RegExp and returns an isMatch function.\n * The isMatch function takes a sample string as its only argument and returns true\n * if the string matches the pattern(s).\n *\n * ```js\n * outmatch('src/*.js')('src/index.js') //=> true\n * ```\n *\n * ```js\n * const isMatch = outmatch('*.example.com', '.')\n * isMatch('foo.example.com') //=> true\n * isMatch('foo.bar.com') //=> false\n * ```\n */\nfunction outmatch(pattern, options) {\n    if (typeof pattern !== 'string' && !Array.isArray(pattern)) {\n        throw new TypeError(\"The first argument must be a single pattern string or an array of patterns, but \" + typeof pattern + \" given\");\n    }\n    if (typeof options === 'string' || typeof options === 'boolean') {\n        options = { separator: options };\n    }\n    if (arguments.length === 2 &&\n        !(typeof options === 'undefined' ||\n            (typeof options === 'object' && options !== null && !Array.isArray(options)))) {\n        throw new TypeError(\"The second argument must be an options object or a string/boolean separator, but \" + typeof options + \" given\");\n    }\n    options = options || {};\n    if (options.separator === '\\\\') {\n        throw new Error('\\\\ is not a valid separator');\n    }\n    var regexpPattern = compile(pattern, options);\n    var regexp = new RegExp(regexpPattern, options.flags);\n    var fn = isMatch.bind(null, regexp);\n    fn.options = options;\n    fn.pattern = pattern;\n    fn.regexp = regexp;\n    return fn;\n}\n\nvar Settings = ($settings = {}) => {\n  const Settings = {\n    enable: false,\n    assign: 'addEventListener', deassign: 'removeEventListener', transsign: 'dispatchEvent',\n    bindListener: true,\n    errorLog: false,\n    methods: {\n      assign: {\n        addEventListener: function addEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition;\n          const { options, useCapture } = settings;\n          return $target['addEventListener'](type, listener, options || useCapture)\n        },\n        on: function on($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['on'](type, listener)\n        },\n        once: function once($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['once'](type, listener)\n        },\n      }, \n      deassign: {\n        removeEventListener: function removeEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition;\n          const { options, useCapture } = settings;\n          return $target['removeEventListener'](type, listener, options || useCapture)\n        },\n        off: function off($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['off'](type, listener)\n        },\n      },\n      transsign: {\n        dispatchEvent: function dispatchEvent($eventDefinition, $target, $event) {\n          return $target['dispatchEvent']($event)\n        },\n        emit: function emit($eventDefinition, $target, $type, ...$arguments) {\n          return $target['emit']($type, ...$arguments)\n        },\n      },\n    },\n  };\n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'methods': \n        Settings[$settingKey] = recursiveAssign(Settings[$settingKey], $settingValue);\n        break\n      case 'enableEvents': break\n      default: \n        Settings[$settingKey] = $settingValue;\n        break\n    }\n  }\n  return Settings\n};\n\nclass EventDefinition {\n  #context\n  #enable = false\n  #nontranssigned = []\n  #_targets = []\n  #_assign\n  #_deassign\n  #_transsign\n  constructor($settings, $context) { \n    if(!$settings || !$context) { return this }\n    const settings = Settings($settings);\n    const assigned = [];\n    const deassigned = [];\n    const transsigned = [];\n    Object.defineProperties(this, {\n      'settings': { value: settings },\n      'path': { value: settings.path },\n      'type': { value: settings.type },\n      'assigned': { value: assigned },\n      'deassigned': { value: deassigned },\n      'transsigned': { value: transsigned },\n      'listener':  { configurable: true, get() {\n        const typeOfListener = typeOf(settings.listener);\n        let listener; \n        if(typeOfListener === 'string') {\n          let listenerTarget = $context;\n          iterateListenerPathKeys: \n          for(const $pathKey of settings.listener.split('.')) {\n            const value = listenerTarget[$pathKey];\n            if(value !== undefined) { listenerTarget = listenerTarget[$pathKey]; }\n            else { break iterateListenerPathKeys }\n          }\n          if(typeOf(listenerTarget) === 'function') {\n            listener = listenerTarget;\n          }\n        }\n        else { listener = settings.listener; }\n        if(settings.bindListener === true) {\n          listener = listener.bind(this.#context);\n        }\n        Object.defineProperty(this, 'listener', { value: listener });\n        return listener\n      } }\n    });\n    this.#context = $context;\n    this.enable = this.settings.enable;\n  }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    const targets = this.#targets;\n    const assigned = this.assigned;\n    const deassigned = this.deassigned;\n    assigned.length = 0;\n    deassigned.length = 0;\n    iterateTargetElements: \n    for(const $targetElement of targets) {\n      const { path, target, enable } = $targetElement;\n      this.settings;\n      if(enable === $enable) { continue iterateTargetElements }\n      if($enable === true) {\n        try {\n          this.#assign(target);\n          $targetElement.enable = $enable;\n          assigned.push($targetElement);\n          \n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err); } }\n      }\n      else if($enable === false) {\n        try {\n          this.#deassign(target);\n          $targetElement.enable = $enable;\n          deassigned.push($targetElement);\n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err); } }\n      }\n    }\n    this.#enable = $enable;\n  }\n  get #target() { return this.settings.target }\n  get #targets() {\n    const pretargets = this.#_targets;\n    const targets = [];\n    if(this.#target) {\n      for(const $target of [].concat(this.#target)) {\n        const pretargetElement = pretargets.find(\n          ($pretarget) => $pretarget?.path === this.path\n        );\n        if(pretargetElement !== undefined) {\n          targets.push(pretargetElement);\n        }\n        else if(pretargetElement === undefined) {ptargets.push({\n            path: this.path,\n            target: $target,\n            enable: false,\n          });\n        }\n      }\n    }\n    else if(typeOf(this.path) === 'string') {\n      const targetPaths = [];\n      if(this.path === this.#scopeKey) {\n        const targetElement = {\n          path: this.path,\n          target: this.#context,\n          enable: false,\n        };\n        targets.push(targetElement);\n      }\n      else {\n        if(this.settings.propertyDirectory) {\n          const propertyDirectory = this.#propertyDirectory;\n          const propertyPathMatcher = outmatch(this.path, {\n            separator: '.',\n          });\n          for(const [$propertyPath, $propertyValue] of propertyDirectory) {\n            const propertyPathMatch = propertyPathMatcher($propertyPath);\n            if(propertyPathMatch === true) { targetPaths.push([$propertyPath, $propertyValue]); }\n          }\n          if(this.path.charAt(0) === '*') {\n            targetPaths.unshift(this.#scopeKey);\n          }\n        }\n        else {\n          targetPaths.push(this.path);\n        }\n        for(const [$targetPath, $targetValue] of targetPaths) {\n          const pretargetElement = pretargets.find(\n            ($pretarget) => $pretarget.path === $targetPath\n          );\n          let target = $targetValue;\n          let targetElement;\n          if(target !== undefined) {\n            if(target === pretargetElement?.target) {\n              targetElement = pretargetElement;\n            }\n            else if(typeof target === 'object') {\n              targetElement = {\n                path: $targetPath,\n                target: target,\n                enable: false,\n              };\n            }\n          }\n          if(targetElement !== undefined) { targets.push(targetElement); }\n        }\n      }\n    }\n    this.#_targets = targets;\n    return this.#_targets\n  }\n  get #scopeKey() { return this.settings.propertyDirectory.scopeKey }\n  get #assign() {\n    if(this.#_assign !== undefined) { return this.#_assign }\n    this.#_assign = this.settings.methods.assign[this.settings.assign].bind(null, this);\n    return this.#_assign\n  }\n  get #deassign() {\n    if(this.#_deassign !== undefined) { return this.#_deassign }\n    this.#_deassign = this.settings.methods.deassign[this.settings.deassign].bind(null, this);\n    return this.#_deassign\n  }\n  get #transsign() {\n    if(this.#_transsign !== undefined) { return this.#_transsign }\n    this.#_transsign = this.settings.methods.transsign[this.settings.transsign].bind(null, this);\n    return this.#_transsign\n  }\n  get #propertyDirectory() {\n    if(!this.settings.propertyDirectory) { return null }\n    const propertyDirectorySettings = Object.assign(this.settings.propertyDirectory, { values: true });\n    return propertyDirectory(this.#context, propertyDirectorySettings)\n  }\n  emit() {\n    const targets = this.#targets;\n    const transsigned = this.transsigned;\n    const nontranssigned = this.#nontranssigned;\n    transsigned.length = 0;\n    nontranssigned.length = 0;\n    for(const $targetElement of targets) {\n      const { target } = $targetElement;\n      try {\n        this.#transsign(target, ...arguments);\n        transsigned.push($targetElement);\n      }\n      catch($err) { nontranssigned.push($targetElement); }\n    }\n    return this\n  }\n}\n\nclass Core extends EventTarget {\n  static implement = function ($target, $settings) {\n    if(!$target || !$settings) { return undefined }\n    const settings = Settings$1($settings);\n    const events = [];\n    Object.defineProperties($target, {\n      [settings.propertyDefinitions.getEvents]: {\n        enumerable: false, writable: false, \n        value: function getEvents() {\n          if(!arguments[0]) { return events }\n          const getEvents = [];\n          const $filterEvents = [].concat(arguments[0]);\n          for(const $filterEvent of $filterEvents) {\n            for(const $event of events) {\n              let match;\n              iterateEventFilterProperties: \n              for(const [\n                $filterEventPropertyKey, $filterEventPropertyValue\n              ] of Object.entries($filterEvent)) {\n                let eventFilterMatch;\n                if($filterEventPropertyKey === 'listener') {\n                  eventFilterMatch = (\n                    $event.settings[$filterEventPropertyKey] === $filterEventPropertyValue\n                  );\n                }\n                else {\n                  eventFilterMatch = (\n                    $event[$filterEventPropertyKey] === $filterEventPropertyValue\n                  );\n                }\n                if(match !== false) { match = eventFilterMatch; }\n                else { break iterateEventFilterProperties }\n              }\n              if(match === true) { getEvents.push($event); }\n            }\n          }\n          return getEvents\n        }\n      },\n      [settings.propertyDefinitions.addEvents]: {\n        enumerable: false, writable: false, \n        value: function addEvents() {\n          if(!arguments.length) { return $target }\n          let $addEvents = expandEvents(arguments[0], settings.propertyDirectory.scopeKey);\n          let $enableEvents = arguments[1] || false;\n          for(let $addEvent of $addEvents) {\n            const event = {};\n            for(const $settingKey of [\n              'assign', 'deassign', 'transsign', 'propertyDirectory', 'bindListener'\n            ]) {\n              const settingValue = settings[$settingKey];\n              if(settingValue !== undefined) { event[$settingKey] = settingValue; }\n            }\n            recursiveAssign(event, $addEvent);\n            const eventDefinition = new EventDefinition(event, $target);\n            if($enableEvents) { eventDefinition.enable = true; }\n            events.push(eventDefinition);\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.removeEvents]: {\n        enumerable: false, writable: false, \n        value: function removeEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          let eventsIndex = events.length - 1;\n          while(eventsIndex > -1) {\n            const event = events[eventsIndex];\n            if($events.includes(event)) {\n              event.enable = false;\n              events.splice(eventsIndex, 1);\n            }\n            eventsIndex--;\n          }\n          return $target\n        }\n      },\n      [settings.propertyDefinitions.enableEvents]: {\n        enumerable: false, writable: false, \n        value: function enableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          for(const $event of $events) { $event.enable = true; }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.disableEvents]: {\n        enumerable: false, writable: false, \n        value: function disableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          for(const $event of $events) { $event.enable = false; }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.reenableEvents]: {\n        enumerable: false, writable: false, \n        value: function reenableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          for(const $event of $events) {\n            $event.enable = false;\n            $event.enable = true;\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.emitEvents]: {\n        enumerable: false, writable: false, \n        value: function emitEvents($filterEvents, ...$eventParameters) {\n          const $events = $target[settings.propertyDefinitions.getEvents]($filterEvents);\n          for(const $event of $events) {\n            $event.emit(...$eventParameters);\n          }\n          return $target\n        },\n      },\n    });\n    if(settings.events) { $target[settings.propertyDefinitions.addEvents](settings.events); }\n    if(settings.enableEvents === true) { $target[settings.propertyDefinitions.enableEvents](); }\n    return $target\n  }\n  constructor($settings = {}) {\n    super();\n    return Core.implement(this, $settings)\n  }\n}\n\nexport { Core, index as Coutil };\n//# sourceMappingURL=core-plex.js.map\n","import { Coutil } from 'core-plex'\nconst { regularExpressions } = Coutil\nfunction subpaths($path) {\n  return $path.split(\n    new RegExp(regularExpressions.quotationEscape)\n  )\n}\nfunction keypaths($path) {\n  const _subpaths = subpaths($path)\n  _subpaths.pop()\n  return _subpaths\n}\nfunction key($path) {\n  return subpaths($path).pop()\n}\nfunction root($path) {\n  return subpaths($path).shift()\n}\nfunction typeofRoot($path) {\n  return (Number(root($path))) ? 'array' : 'object'\n}\nfunction parse($path) {\n  return {\n    subpaths: subpaths($path),\n    keypaths: keypaths($path),\n    key: key($path),\n    root: root($path),\n    typeofRoot: typeofRoot($path),\n  }\n}\nexport {\n  subpaths,\n  keypaths,\n  key,\n  root,\n  typeofRoot,\n  parse,\n}","import { Coutil } from 'core-plex'\nimport * as path from '../path/index.js'\nconst { regularExpressions, typedObjectLiteral } = Coutil\nfunction get($path, $value) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape))\n  const key = subpaths.pop()\n  const tree = $value\n  let treeNode = tree\n  for(const $subpath of subpaths) {\n    treeNode = treeNode[$subpath]\n  }\n  return treeNode[key]\n}\nfunction set($path, $value) {\n  const {\n    keypaths, key, typeofRoot\n  } = path.parse($path)\n  const tree = typedObjectLiteral(typeofRoot)\n  let treeNode = tree\n  for(const $subpath of keypaths) {\n    if(Number($subpath)) { treeNode[$subpath] = [] }\n    else { treeNode[$subpath] = {} }\n    treeNode = treeNode[$subpath]\n  }\n  treeNode[key] = $value\n  return tree\n}\nexport { get, set }","import { Coutil } from 'core-plex'\nconst { typedObjectLiteral, variables } = Coutil\nimport * as Path from '../path/index.js'\nimport * as Tree from '../tree/index.js'\nfunction impandTree($root, $tree) {\n  const typeofTree = typeof $tree\n  const typeofRoot = typeof $root\n  if(\n    !['string', 'function'].includes(typeofTree) ||\n    typeofRoot && typeofRoot !== 'object'\n  ) { return undefined /*$root*/ }\n  let tree = typedObjectLiteral($root)\n  if(typeofRoot === 'object') {\n    iterateRootEntries: \n    for(const [$rootKey, $rootValue] of Object.entries($root)) {\n      if(typeofTree === 'string') { tree[$rootKey] = Tree.get($tree, $rootValue) }\n      else if(typeofTree === 'function') { tree = $tree($rootValue) }\n    }\n  }\n  return tree\n}\n\nfunction expandTree($root, $tree) {\n  const typeofRoot = typeof $root\n  const typeofTree = typeof $tree\n  if(\n    !['string', 'function'].includes(typeofTree)\n  ) { return undefined }\n  let tree\n  if($root && typeofRoot === 'object') {\n    iterateRootEntries: \n    for(const [$rootKey, $rootValue] of Object.entries($root)) {\n      if(typeofTree === 'string') { tree = Tree.set($tree, $rootValue) }\n      else if(typeofTree === 'function') { tree = $tree($rootValue) }\n    }\n  }\n  else {\n    if(typeofTree === 'string') { tree = Tree.set($tree, $root) }\n    else if(typeofTree === 'function') { tree = $tree($root) }\n  }\n  return tree\n}\n\nexport { impandTree, expandTree }\n\n","import { Coutil } from 'core-plex'\nconst {\n  isPropertyDefinition,\n  recursiveAssign, recursiveAssignConcat, regularExpressions, \n  typedObjectLiteral, typeOf, \n  variables\n} = Coutil\nimport { expandTree} from './pandTree/index.js'\nimport keytree from './keytree/index.js'\nimport objectCount from './objectCount/index.js'\nimport * as path from './path/index.js'\nimport pathkeytree from './pathkeytree/index.js'\nimport * as tree from './tree/index.js'\n\n\nexport {\n  // Pand Tree\n  expandTree, \n  // Recursive Assign\n  recursiveAssign,\n  recursiveAssignConcat,\n  isPropertyDefinition,\n  keytree,\n  objectCount,\n  path, \n  pathkeytree,\n  regularExpressions, \n  tree, \n  typedObjectLiteral, \n  variables, \n}","export default function keytree($object) {\n  const target = []\n  for(const [$key, $value] of Object.entries($object)) {\n    if(typeof $value === 'object') {\n      target.push([$key, keytree($value)])\n    }\n    else {\n      target.push($key)\n    }\n  }\n  return target\n}\n","export default function objectCount($object) {\n  if($object && typeof $object !== 'object') return undefined \n  let count = 1\n  for(const [$key, $value] of Object.entries($object)) {\n    if(typeof $value === 'object') { count += objectCount($value) }\n  }\n  return count\n}","export default function pathkeytree($object) {\n  const target = []\n  for(const [$key, $value] of Object.entries($object)) {\n    target.push($key)\n    if(typeof $value === 'object') {\n      const subtarget = pathkeytree($value)\n      for(const $subtarget of subtarget) {\n        let path\n        if(typeof $subtarget === 'object') {\n          path = [$key, ...$subtarget].join('.')\n        }\n        else {\n          path = [$key, $subtarget].join('.')\n        }\n        target.push(path)\n      }\n    }\n  }\n  return target\n}","export default ($settings) => Object.assign({}, $settings)","export default ($options) => Object.assign({\n  parent: null,\n  path: null,\n  enableEvents: true,\n  definition: null,\n  propertyClasses: [],\n}, $options)","import { Core, Coutil } from 'core-plex'\nconst { typedObjectLiteral } = Coutil\nimport Settings from './settings/index.js'\nimport Options from './options/index.js'\nexport default class MVCFrameworkCore extends Core {\n  static propertyClasses = []\n  constructor($settings = {}, $options = {}) {\n    super(Object.assign({}, $options, {\n      propertyDirectory: {\n        accessors: [function objectAccessor($target, $property) {\n          if($property === undefined) { return $target }\n          else { return $target[$property] }\n        }, function mapAccessor($target, $property) {\n          if($target instanceof Map === true) {\n            if($property === undefined) { return Object.fromEntries($target) }\n            else { return $target.get($property) }\n          }\n        }, function objectureAccessor($target, $property) {\n          if($property === undefined) { return $target.target }\n          else { return $target.target[$property] }\n        }],\n      },\n    }))\n    const propertyClasses = []\n    const addProperties = ($properties) => {\n      const propertyClassNames = propertyClasses.map(\n        ($propertyClass) => $propertyClass.name\n      )\n      iteratePropertyClasses: \n      for(const $propertyClass of propertyClasses) {\n        const { administer, name, targetType } = $propertyClass\n        if(!targetType) { continue iteratePropertyClasses }\n        if($properties[name] === undefined) { continue iteratePropertyClasses }\n        if(targetType !== undefined) {\n          this[administer](this.settings[name])\n        }\n        else if(this.settings[name] !== undefined) {\n          this[name] = this.settings[name]\n        }\n      }\n      return this\n    }\n    let parent = null\n    let path = null\n    try {\n      Object.defineProperty(this, 'mount', { value: function($mount) {\n        const mountParent = $mount.parent\n        const mountPath = $mount.path\n        const property = (mountPath) ? mountPath.split('.').pop() : mountPath\n        if(parent) { parent.unmount(property) }\n        parent = mountParent\n        path = mountPath\n      } })\n    }\n    catch($err) { console.error($err) }\n    try {\n      Object.defineProperty(this, 'unmount', { value: function($unmount) {\n        const unmountPath = $unmount.path\n        delete this[$property]\n      } })\n    }\n    catch($err) { console.error($err) }\n    Object.defineProperties(this, {\n      'settings': { value: Settings($settings) },\n      'options': { value: Options($options) },\n      'definition': { get() { return definition } },\n      'parent': { get() { return parent } },\n      'path': { get() { return path } },\n      'key': { get() { return (path) ? path.pop() : path } },\n      'root': { get() {\n        let root = this\n        iterateParents: \n        while(root) {\n          if([undefined, null].includes(root.parent)) { break iterateParents }\n          root = root.parent\n        }\n        return root\n      } },\n      'retroReenableEvents': { value: function() {\n        let core = this\n        while(core) {\n          core.reenableEvents({ enable: true })\n          core = core.parent\n        }\n        return this\n      } },\n      'addPropertyClasses': { value: function() {\n        const $this = this\n        let $addPropertyClasses = (arguments.length === 0)\n          ? this.options.propertyClasses\n          : [].concat(...arguments)\n        iteratePropertyClasses: \n        for(const $addPropertyClass of $addPropertyClasses) {\n          if(!$addPropertyClass.targetType) {\n            propertyClasses.push($addPropertyClass)\n            continue iteratePropertyClasses\n          }\n          const {\n            name,\n            administer, deadminister,\n            instate, deinstate,\n            targetType, definition,\n          } = $addPropertyClass\n          let propertyValue\n          Object.defineProperties(this, {\n            [name]: {\n              configurable: true, enumerable: true, writable: true,\n              value: typedObjectLiteral(targetType)\n            }, \n            [administer]: {\n              configurable: true, enumerable: false, writable: false, \n              value: function($properties) {\n                if(!$this[name]) { $this[name] = typedObjectLiteral(targetType) }\n                iterateProperties: \n                for(const [$propertyKey, $propertyValue] of Object.entries($properties)) {\n                  $this[name][$propertyKey] = instate(\n                    $this, $propertyKey, $propertyValue, $addPropertyClass\n                  )\n                  $this.retroReenableEvents()\n                }\n                return $this\n              }\n            },\n            [deadminister]: {\n              configurable: true, enumerable: false, writable: false, \n              value: function(...$arguments) {\n                let properties\n                if($arguments.length === 0) {\n                  properties = Object.keys($this[name]).reverse()\n                }\n                else {\n                  properties = [].concat(...$arguments).reverse()\n                }\n                for(const $propertyKey of properties) {\n                  deinstate(\n                    $this, $propertyKey, $addPropertyClass\n                  )\n                  delete $this[name][$propertyKey]\n                  $this.retroReenableEvents()\n                }\n                return $this\n              }\n            },\n          })\n          propertyClasses.push($addPropertyClass)\n        }\n        return this\n      } },\n      'removePropertyClasses': { value: function(...$arguments) {\n        let $removePropertyClasses\n        if($arguments.length === 0) {\n          $removePropertyClasses = propertyClasses.reduce(($propertyClasses, propertyClass) => {\n            $propertyClasses.push($propertyClass.name)\n            return $propertyClasses\n          }, [])\n        }\n        else {\n          $removePropertyClasses = [].concat(...$arguments)\n        }\n        iterateRemovePropertyClasses: \n        for(const $removePropertyClass of $removePropertyClasses) {\n          const propertyClassIndex = propertyClasses.findIndex(\n            ($propertyClass) => $propertyClass.name === $removePropertyClass\n          )\n          const { name, deadminister } = propertyClasses.splice(propertyClassIndex, 1)[0]\n          this[deadminister]()\n          delete this[name]\n        }\n        return this\n      } },\n    })\n    if(this.settings.defineProperties) {\n      Object.defineProperties(this, this.settings.defineProperties)\n    }\n    if(this.settings.assign) {\n      Object.assign(this, this.settings.assign)\n    }\n    if(this.options.propertyClasses) {\n      this.addPropertyClasses(this.options.propertyClasses)\n    }\n    this.mount({\n      parent: this.options.parent,\n      path: this.options.path\n    })\n    addProperties(this.settings)\n  }\n}","import { Coutil, Core } from 'core-plex';\n\nclass Verification extends EventTarget {\n  constructor($settings) {\n    super();\n    const settings = Object.assign({}, $settings);\n    Object.defineProperties(this, {\n      'type': { value: settings.type },\n      'key': { value: settings.key },\n      'value': { value: settings.value },\n      'message': { configurable: true, get() {\n        let message;\n        if(this.pass !== undefined) {\n          message = settings.messages[String(this.pass)](this);\n          Object.defineProperty(this, 'message', { value: message });\n        }\n        return message\n      } },\n      'pass': { writable: true, \n        set pass($pass) {\n          Object.defineProperty(this, 'pass', { value: $pass });\n        },\n      },\n    });\n  }\n}\n\nconst { typedObjectLiteral: typedObjectLiteral$d } = Coutil;\nconst Messages$1 = {\n  'true': ($validation) => `${$validation.valid}`,\n  'false': ($validation) => `${$validation.valid}`,\n};\nfunction report($format = \"expand\", $prevalidation) {\n  const prevalidation = $prevalidation || this;\n  const schema = prevalidation.schema;\n  const validations = [].concat(\n    prevalidation.advance, prevalidation.deadvance, prevalidation.unadvance\n  );\n  if($format === \"expand\") {\n    const _report = typedObjectLiteral$d(schema.type);\n    for(const $validation of validations) {\n      const verifications = [].concat(\n        $validation.advance, $validation.deadvance, $validation.unadvance\n      );\n      _report[$validation.key] = {};\n      for(const $verification of verifications) {\n        _report[$validation.key][$verification.type] = {};\n        if($verification.validation) {\n          _report[$validation.key][$verification.type] = this.report($format, $verification.validation);\n        }\n        else {\n          _report[$validation.key][$verification.type] = $verification;\n        }\n      }\n    }\n    return _report\n  }\n  if($format === \"impand\") {\n    if(prevalidation.valid === false) { return false }\n    const _report = typedObjectLiteral$d(schema.type);\n    for(const $validation of validations) {\n      const verifications = [].concat(\n        $validation.advance, $validation.deadvance, $validation.unadvance\n      );\n      let reportValue;\n      iterateVerifications: \n      for(const $verification of verifications) {\n        if($verification.type === 'type') {\n          if($verification.validation && $validation.valid) {\n            reportValue = this.report($format, $verification.validation);\n          }\n          break iterateVerifications\n        }\n      }\n      if(!reportValue) { reportValue = $validation.valid; }\n      _report[$validation.key] = reportValue;\n    }\n    return _report\n  }\n}\nclass Validation extends EventTarget {\n  constructor($settings = {}, $schema) {\n    super();\n    const settings = Object.assign({ messages: Messages$1 }, $settings);\n    let valid;\n    const advance = [];\n    const deadvance = [];\n    const unadvance = [];\n    Object.defineProperties(this, {\n      'schema': { value: $schema },\n      'verificationType': { value: settings.verificationType },\n      'required': { value: settings.required },\n      'definition': { value: settings.definition },\n      'key': { value: settings.key },\n      'value': { value: settings.value },\n      'advance': { value: advance },\n      'deadvance': { value: deadvance },\n      'unadvance': { value: unadvance },\n      'valid': {\n        writable: true,\n        get valid() { return valid },\n        set valid($valid) { Object.defineProperty(this, 'valid', { value: $valid }); }\n      },\n      'report': { configurable: true, get() {\n        const _report = report.bind(this);\n        Object.defineProperty(this, 'report', { value: _report });\n        return _report\n      } },\n    });\n  }\n}\n\nconst { recursiveAssign: recursiveAssign$e } = Coutil;\nconst Messages = {\n  'true': ($verification) => `${$verification.pass}`,\n  'false': ($verification) => `${$verification.pass}`,\n};\nclass Validator extends EventTarget {\n  constructor($definition = {}, $schema) {\n    super();\n    const definition = Object.freeze(\n      Object.assign({ messages: Messages }, $definition)\n    );\n    Object.defineProperties(this, {\n      'definition': { value: definition },\n      'schema': { value: $schema },\n      'type': { value: definition.type },\n      'messages': { value: definition.messages },\n      'validate': { configurable: true, get() {\n        function validate($key, $value, $source, $target) {\n          const { definition, messages, type } = this;\n          let verification = new Verification({\n            type: type,\n            key: $key,\n            value: definition.value,\n            messages: recursiveAssign$e({}, messages, definition.messages),\n          });\n          const validation = definition.validate(...arguments);\n          if(typeof validation === 'object') {\n            verification.validation = validation;\n            verification.pass = validation.valid;\n          }\n          else { verification.pass = validation; }\n          return verification\n        }\n        const boundValidate = validate.bind(this);\n        Object.defineProperty(this, 'validate', {\n          value: boundValidate\n        });\n        return boundValidate\n      } },\n    });\n  }\n}\n\nconst { recursiveAssign: recursiveAssign$d, typedObjectLiteral: typedObjectLiteral$c } = Coutil;\nclass RequiredValidator extends Validator {\n  constructor($definition, $schema) {\n    super(Object.assign({}, $definition, {\n      type: 'required',\n      validate: ($key, $value, $source, $target) => {\n        const { requiredProperties, requiredPropertiesSize, type } = $schema;\n        const corequiredProperties = Object.assign({}, requiredProperties);\n        let corequiredPropertiesSize = requiredPropertiesSize;\n        Object.assign(typedObjectLiteral$c(type), $source, $target);\n        this.definition;\n        let pass;\n        if(!requiredPropertiesSize) { pass = true; }\n        else {\n          if(Object.hasOwn(corequiredProperties, $key)) {\n            delete corequiredProperties[$key];\n            corequiredPropertiesSize--;\n          }\n          if(corequiredPropertiesSize) {\n            const coschema = new Schema(corequiredProperties, {\n              path: $schema.path,\n              parent: $schema.parent,\n            });\n            const comodel = Object.assign({}, $target, $source);\n            const covalidation = coschema.validate(comodel);\n            pass = covalidation.valid;\n          }\n        }\n        return pass\n      }\n    }), $schema);\n  }\n}\n\nconst { typeOf: typeOf$5, variables: variables$1 } = Coutil;\nconst { ObjectKeys, TypeKeys } = variables$1;\nclass TypeValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign({}, $definition, {\n      type: 'type',\n      validate: ($key, $value, $source, $target) => {\n        let pass;\n        const definition = this.definition;\n        let typeOfDefinitionValue = typeOf$5(definition.value);\n        if(typeOfDefinitionValue === 'function') {\n          typeOfDefinitionValue = typeOf$5(definition.value());\n        }\n        else if(definition.value instanceof Schema) {\n          typeOfDefinitionValue = definition.value.type;\n        }\n        else {\n          typeOfDefinitionValue = typeOf$5(definition.value);\n        }\n        if(TypeKeys.includes(typeOfDefinitionValue)) {\n          const typeOfValue = typeOf$5($value);\n          if(typeOfValue === 'undefined') { pass = false; }\n          else if(typeOfDefinitionValue === 'undefined') { pass = true; }\n          else if(definition.value instanceof Schema) {\n            const validation = definition.value.validate($value, $source);\n            pass = validation;\n          }\n          else { pass = (typeOfDefinitionValue === typeOfValue); }\n        }\n        else { pass = false; }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass RangeValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'range',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(typeof $value !== 'number') { pass = false; }\n        else {\n          const { min, max } = definition;\n          let validMin, validMax;\n          if(min !== undefined) { validMin = ($value >= min.value); }\n          else { validMin = true; }\n          if(max !== undefined) { validMax = ($value <= max.value); }\n          else { validMax = true; }\n          if(validMin && validMax) { pass = true; }\n          else { pass = false;}\n        }\n        return pass\n      }\n    }), $schema);\n  }\n}\n\nclass LengthValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'length',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(typeof $value !== 'string') { pass = false; }\n        else {\n          const { min, max } = definition;\n          let validMin, validMax;\n          if(min !== undefined) {\n            validMin = ($value.length >= min.value);\n          }\n          else { validMin = true; }\n          if(max !== undefined) {\n            validMax = ($value.length <= max.value);\n          }\n          else { validMax = true; }\n          if(validMin && validMax) { pass = true; }          \n          else { pass = false;}\n        }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass EnumValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'enum',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(![\n          'string', 'number', 'boolean'\n        ].includes(typeof $value)) { pass = false;}\n        else {\n          const enumeration = definition.value;\n          pass = enumeration.includes($value);\n        }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass MatchValidator extends Validator {\n  constructor($settings = {}, $schema) {\n    super(Object.assign($settings, {\n      type: 'match',\n      validate: ($key, $value) => {\n        const definition = this.settings;\n        let pass;\n        if(![\n          'string', 'number', 'boolean'\n        ].includes(typeof $value)) { pass = false;}\n        else {\n          const match = definition;\n          (match.value.exec($value) !== null);\n        }\n        return pass ? true : false\n      },\n    }), $schema);\n  }\n}\n\nconst { recursiveAssign: recursiveAssign$c } = Coutil;\nvar Options$1 = (...$options) => Object.assign({\n  required: false,\n  verificationType: 'all', \n  // verificationType: 'one',\n  strict: false,\n  properties: {\n    type: 'type',\n    value: 'value',\n  },\n}, ...$options);\n\nconst { typedObjectLiteral: typedObjectLiteral$b, typeOf: typeOf$4, variables } = Coutil;\n\nclass Schema extends EventTarget {\n  constructor($properties = {}, $options = {}) {\n    super();\n    Object.defineProperties(this, {\n      'options': { value: Options$1($options) },\n      'type': { value: typeOf$4($properties) },\n      'parent': { configurable: true, get() {\n        const { options } = this;\n        const parent = (options.parent) ? options.parent : null;\n        Object.defineProperty(this, 'parent', { value: parent });\n        return parent\n      } },\n      'root': { configurable: true, get() {\n        let root = this;\n        iterateParents: \n        while(root) {\n          if([undefined, null].includes(root.parent)) { break iterateParents }\n          root = root.parent;\n        }\n        return root\n      } },\n      'key': { configurable: true, get() {\n        const { path } = this;\n        const key = (path) ? path.split('.').pop() : null;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'path': { configurable: true, get() {\n        const { options } = this;\n        const path = (options.path)\n          ? String(options.path)\n          : null;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'required': { configurable: true, get() {\n        const required = this.options.required;\n        Object.defineProperty(this, 'required', { value: required });\n        return required\n      } },\n      'requiredProperties': { configurable: true, get() {\n        const requiredProperties = typedObjectLiteral$b(this.type);\n        for(const [$propertyKey, $propertyDefinition] of Object.entries(this.target)) {\n          if($propertyDefinition.required?.value === true) {\n            requiredProperties[$propertyKey] = $propertyDefinition;\n          }\n        }\n        Object.defineProperty(this, 'requiredProperties', { value: Object.freeze(requiredProperties) });\n        return requiredProperties\n      } },\n      'requiredPropertiesSize': { configurable: true, get() {\n        const requiredPropertiesSize = Object.keys(this.requiredProperties).length;\n        Object.defineProperty(this, 'requiredPropertiesSize', { value: requiredPropertiesSize });\n        return requiredPropertiesSize\n      } },\n      'verificationType': { configurable: true, get() {\n        const verificationType = this.options.verificationType;\n        Object.defineProperty(this, 'verificationType', { value: verificationType });\n        return verificationType\n      } },\n      'target': { configurable: true, get() {\n        let properties;\n        const type = this.type;\n        if(type === 'array') { properties = $properties.slice(0, 1); }\n        else if(type === 'object') { properties = $properties; }\n        const target = parseProperties(properties, this);\n        Object.defineProperty(this, 'target', { value: target });\n        return target\n      } },\n      'validate': { value: function(...$arguments) {\n        let { $sourceName, $source, $target } = parseValidateArguments(...$arguments);\n        $target = $target || typedObjectLiteral$b($source);\n        const { target, path, required, type, verificationType } = this;\n        let validation = new Validation({\n          required, verificationType,\n          definition: target,\n          key: $sourceName, \n          value: $source,\n        }, this);\n        const sourceProperties = Object.entries($source);\n        let sourcePropertyIndex = 0;\n        while(sourcePropertyIndex < sourceProperties.length) {\n          const [$sourceKey, $sourceValue] = sourceProperties[sourcePropertyIndex];\n          const propertyValidation = this.validateProperty($sourceKey, $sourceValue, $source, $target);\n          if(propertyValidation.valid === true) { validation.advance.push(propertyValidation); } \n          else if(propertyValidation.valid === false) { validation.deadvance.push(propertyValidation); } \n          else if(propertyValidation.valid === undefined) { validation.unadvance.push(propertyValidation );}\n          sourcePropertyIndex++;\n        }\n        if(validation.advance.length) { validation.valid = true; }\n        else if(validation.deadvance.length) { validation.valid = false; }\n        else if(validation.unadvance.length) { validation.valid = undefined; }\n        else { validation.valid = true; }\n        return validation\n      } },\n      'validateProperty': { value: function() {\n        const { $key, $value, $source, $target } = parseValidatePropertyArguments(...arguments);\n        const { target, path, required, schema, type, verificationType } = this;\n        let propertyDefinition;\n        if(type === 'array') { propertyDefinition = target[0]; }\n        else if(type === 'object') { propertyDefinition = target[$key]; }\n        const propertyValidation = new Validation({\n          required,\n          verificationType,\n          definition: propertyDefinition,\n          key: $key,\n          value: $value,\n        }, this);\n        if(propertyDefinition === undefined) {\n          const verification = new Verification({\n            type: null,\n            definition: null,\n            key: $key,\n            value: $value,\n          }, this);\n          verification.pass = false;\n          propertyValidation.unadvance.push(verification);\n        }\n        else {\n          iteratePropertyDefinitionValidators:\n          for(const [$validatorIndex, $validator] of Object.entries(propertyDefinition.validators)) {\n            const verification = $validator.validate($key, $value, $source, $target);\n            if(verification.pass === true) { propertyValidation.advance.push(verification); }\n            else if(verification.pass === false) { propertyValidation.deadvance.push(verification); }\n            else if(verification.pass === undefined) { propertyValidation.unadvance.push(verification); }\n            if(this.verificationType === 'one' && propertyValidation.deadvance.length) {\n              break iteratePropertyDefinitionValidators\n            }\n          }\n        }\n        if(propertyValidation.deadvance.length) { propertyValidation.valid = false; }\n        else if(propertyValidation.advance.length) { propertyValidation.valid = true; }\n        else if(propertyValidation.unadvance.length) { propertyValidation.valid = false; }\n        return propertyValidation\n      } },\n    });\n  }\n}\nfunction parseValidateArguments(...$arguments) {\n  let $sourceName, $source, $target;\n  if($arguments.length === 1) {\n    $sourceName = null; $source = $arguments.shift(); $target = null;\n  }\n  else if($arguments.length === 2) {\n    if(['number', 'string'].includes(typeof $arguments[0])) {\n      $sourceName = $arguments.shift(); $source = $arguments.shift(); $target = null;\n    }\n    else if($arguments[0] && typeof $arguments[0] === 'object') {\n      $sourceName = null; $source = $arguments.shift(); $target = $arguments.shift();\n    }\n  }\n  else if($arguments.length === 3) {\n    if(['number', 'string'].includes(typeof $arguments[0])) {\n      $sourceName = $arguments.shift(); $source = $arguments.shift(); $target = $arguments.shift();\n    }\n  }\n  return { $sourceName, $source, $target }\n}\nfunction parseValidatePropertyArguments(...$arguments) {\n  let [$key, $value, $source, $target] = $arguments;\n  return { $key, $value, $source, $target }\n}\nfunction parseProperties($properties, $schema) {\n  const properties = typedObjectLiteral$b($properties);\n  if(_isPropertyDefinition($properties, $schema)) { return $properties }\n  for(const [\n    $propertyKey, $propertyValue\n  ] of Object.entries($properties)) {\n    let propertyDefinition = {};\n    typeOf$4($propertyValue);\n    const isPropertyDefinition = _isPropertyDefinition($propertyValue, $schema);\n    if(variables.TypeValues.includes($propertyValue)) {\n      Object.assign(propertyDefinition, { type: { value: $propertyValue } });\n    }\n    else if(variables.TypeKeys.includes($propertyValue)) {\n      Object.assign(propertyDefinition, { type: { value: variables.Types[$propertyValue] } });\n    }\n    else if(!isPropertyDefinition) {\n      const subpropertyPath = ($schema.path) ? [$schema.path, $propertyKey].join('.') : $propertyKey;\n      Object.assign(propertyDefinition, {\n        type: { type: 'type', value: new Schema($propertyValue, Object.assign({}, $schema.options, {\n          parent: $schema,\n          path: subpropertyPath\n        })) }\n      });\n    }\n    else if(isPropertyDefinition) {\n      for(const [$propertyValidatorName, $propertyValidator] of Object.entries($propertyValue)) {\n        const isValidatorDefinition = _isValidatorDefinition($propertyValidator, $schema);\n        if(!isValidatorDefinition) {\n          let propertyValidator;\n          if($propertyValidatorName === 'type') {\n            if($propertyValidator && typeof $propertyValidator === 'object') {\n              const subpropertyPath = ($schema.path) ? [$schema.path, $propertyKey].join('.') : $propertyKey;\n              propertyValidator = new Schema($propertyValidator, Object.assign({}, $schema.options, {\n                parent: $schema, \n                path: subpropertyPath,\n              }));\n            }\n            else {\n              propertyValidator = $propertyValidator;\n            }\n          }\n          else {\n            propertyValidator = $propertyValidator;\n          }\n          propertyDefinition[$propertyValidatorName] = {\n            type: $propertyValidatorName, value: propertyValidator\n          };\n        }\n        else if(isValidatorDefinition) {\n          propertyDefinition[$propertyValidatorName] = $propertyValidator;\n        }\n      }\n    }\n    propertyDefinition.validators = [];\n    properties[$propertyKey] = propertyDefinition;\n    const validators = new Map();\n    validators.set('type', Object.assign({}, {\n      type: 'type', validator: TypeValidator, value: propertyDefinition.type.value\n    }));\n    validators.set('required', Object.assign({}, {\n      type: 'required', validator: RequiredValidator, value: propertyDefinition.required?.value || false\n    }));\n    if(propertyDefinition.range) { validators.set('range', Object.assign({}, propertyDefinition.range, {\n      type: 'range', validator: RangeValidator\n    })); }\n    else if(propertyDefinition.min || propertyDefinition.max) { validators.set('range', Object.assign({}, {\n      type: 'range', min: propertyDefinition.min, max: propertyDefinition.max, validator: RangeValidator\n    })); }\n    if(propertyDefinition.length) { validators.set('length', Object.assign({}, propertyDefinition.length, {\n      type: 'length', validator: LengthValidator\n    })); }\n    else if(propertyDefinition.minLength || propertyDefinition.maxLength) { validators.set('length', Object.assign({}, {\n      type: 'length', min: propertyDefinition.minLength, max: maxLength, validator: LengthValidator\n    })); }\n    if(propertyDefinition.enum) { validators.set('enum', Object.assign({}, propertyDefinition.enum, {\n      type: 'enum', validator: EnumValidator\n    })); }\n    if(propertyDefinition.match) { validators.set('match', Object.assign({}, propertyDefinition.match, {\n      type: 'match', validator: MatchValidator\n    })); }\n    delete propertyDefinition.min;\n    delete propertyDefinition.max;\n    delete propertyDefinition.minLength;\n    delete propertyDefinition.maxLength;\n    for(const [\n      $validatorName, $validatorSettings\n    ] of validators.entries()) {\n      const ValidatorClass = $validatorSettings.validator;\n      propertyDefinition[$validatorName] = $validatorSettings;\n      propertyDefinition.validators.push(new ValidatorClass($validatorSettings, $schema));\n    }\n  }\n  return properties\n}\nfunction _isPropertyDefinition($object, $schema) {\n  if(!$object || $object instanceof Schema) { return false }\n  const typeKey = $schema.options.properties.type;\n  return Object.hasOwn($object, typeKey)\n}\nfunction _isValidatorDefinition($object, $schema) {\n  if(!$object) { return false }\n  const valueKey = $schema.options.properties.value;\n  return Object.hasOwn($object, valueKey)\n}\n\nconst { recursiveAssign: recursiveAssign$b } = Coutil;\nvar Options = ($options) => {\n  const Options = recursiveAssign$b({\n    path: null, \n    parent: null, \n    enableEvents: false,\n    enableValidation: true, \n    validationEvents: {\n      'validProperty:$key': true,\n      'validProperty': true,\n      'nonvalidProperty:$key': true,\n      'nonvalidProperty': true,\n    },\n    pathkey: true,\n    subpathError: false,\n    assignObject: 'set', \n    assignArray: 'set', \n    methods: {\n      map: {\n        get: {\n          mutatorEvents: {\n            'get': true,\n            'getProperty': true,\n            'getProperty:$key': true,\n          },\n        },\n        set: {\n          recursive: true,\n          mutatorEvents: {\n            'set': true,\n            'setProperty': true,\n            'setProperty:$key': true,\n          },\n        },\n        delete: {\n          mutatorEvents: {\n            'delete': true,\n            'deleteProperty': true,\n            'deleteProperty:$key': true,\n          },\n        },\n      },\n      array: {\n        concat: {\n          mutatorEvents: {\n            'concatElement:$index': true,\n            'concatElement': true,\n            'concat': true,\n          }\n        },\n        copyWithin: {\n          mutatorEvents: {\n            'copyWithinElement:$index': true,\n            'copyWithinElement': true,\n            'copyWithin': true,\n          }\n        },\n        fill: {\n          lengthen: true,\n          mutatorEvents: {\n            'fillElement:$index': true,\n            'fillElement': true,\n            'fill': true,\n          }\n        },\n        pop: {\n          mutatorEvents: { 'pop': true  },\n        },\n        push: {\n          mutatorEvents: {\n            'pushElement:$index': true,\n            'pushElement': true,\n            'push': true,\n          }\n        },\n        reverse: {\n          mutatorEvents: { 'reverse': true  },\n        },\n        shift: {\n          mutatorEvents: { 'shift': true  },\n        },\n        splice: {\n          mutatorEvents: {\n            'spliceDeleteElement:$index': true,\n            'spliceDeleteElement': true,\n            'spliceAddElement:$index': true,\n            'spliceAddElement': true,\n            'splice': true,\n          }\n        },\n        unshift: {\n          mutatorEvents: {\n            'unshiftElement:$index': true,\n            'unshiftElement': true,\n            'unshift': true,\n          }\n        },\n      },\n      object: {\n        assign: {\n          sourceTree: true,\n          mutatorEvents: {\n            'assignSourceProperty:$key': true,\n            'assignSourceProperty': true,\n            'assignSource': true,\n            'assign': true,\n          },\n        },\n        defineProperties: {\n          descriptorTree: true,\n          mutatorEvents: { 'defineProperties': true },\n        },\n        defineProperty: {\n          descriptorTree: true,\n          mutatorEvents: {\n            'defineProperty': true,\n            'defineProperty:$key': true,\n          },\n        },\n        freeze: {\n          recursive: true,\n          mutatorEvents: {\n            'freezeProperty': true,\n            'freeze': true,\n          },\n        },\n        seal: {\n          recursive: true,\n          mutatorEvents: {\n            'sealProperty': true,\n            'seal': true,\n          },\n        },\n      },\n    },\n  }, $options);\n  return Options\n};\n\nclass ModelEvent extends CustomEvent {\n  constructor($type, $settings, $model) {\n    super($type, $settings);\n    Object.defineProperties(this, {\n      'model': { get () { return $model } },\n      'key': { configurable: true, get () {\n        const key = (this.path) ? this.path.split('.').pop() : null;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'change': { configurable: true, get () {\n        const change = $settings.change;\n        Object.defineProperty(this, 'change', { value: change });\n        return change\n      } },\n      'value': { configurable: true, get () {\n        const value = $settings.value;\n        Object.defineProperty(this, 'value', { value: value });\n        return value\n      } },\n      'path': { configurable: true, get () {\n        const path = $settings.path;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'detail': { configurable: true, get () {\n        const detail = $settings.detail;\n        Object.defineProperty(this, 'detail', { value: detail });\n        return detail\n      } },\n    });\n  }\n}\n\nclass Change {\n  #_keyter = false \n  #_preter = false \n  #_anter = false \n  #_conter = false\n  #keyter\n  #preter\n  #anter\n  #conter\n  constructor($settings = {}) {\n    for(const [$key, $value] of Object.entries($settings)) { this[$key] = $value; }\n  }\n  get preter() { return this.#preter }\n  set preter($preter) {\n    if(this.#_preter === true) { return this.#preter }\n    this.#preter = $preter?.valueOf();\n    this.#_preter = true;\n  }\n  get anter() { return this.#anter }\n  set anter($anter) {\n    if(this.#_anter === true) { return this.#anter }\n    this.#anter = $anter?.valueOf();\n    this.#_anter = true;\n  }\n  get conter() {\n    if(\n      this.#_conter === true ||\n      [this.#_preter, this.#_anter].includes(false)\n    ) { return this.#conter }\n    const preter = JSON.stringify(this.preter);\n    const anter = JSON.stringify(this.anter);\n    let conter;\n    if(anter !== preter) { conter = true; }\n    else { conter = false; }\n    this.#conter = conter;\n    this.#_conter = true;\n    return this.#conter\n  }\n}\n\nlet ValidatorEvent$1 = class ValidatorEvent extends CustomEvent {\n  constructor($type, $settings, $model) {\n    super($type);\n    Object.defineProperties(this, {\n      'key': { configurable: true, get () {\n        const key = $settings.key;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'path': { configurable: true, get () {\n        const path = ($model.path)\n          ? [$model.path, $settings.key].join('.')\n          : $settings.key;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'value': { configurable: true, get () {\n        const value = $settings.value;\n        Object.defineProperty(this, 'value', { value: value, });\n        return value\n      } },\n      'valid': { configurable: true, get () {\n        const valid = $settings.valid;\n        Object.defineProperty(this, 'valid', { value: valid });\n        return valid\n      } },\n    });\n  }\n};\n\nconst { recursiveAssign: recursiveAssign$a, typedObjectLiteral: typedObjectLiteral$a } = Coutil;\nfunction assign($model, $options, ...$sources) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'assign';\n  const assignArray = options.assignArray || 'assign';\n  const { path, schema, source, target } = $model;\n  const { enableValidation, mutatorEvents, required, sourceTree, validationEvents } = options;\n  const assignedSources = [];\n  const assignChange = new Change({ preter: $model });\n  for(let $source of $sources) {\n    let assignedSource;\n    const assignSourceChange = new Change({ preter: $model });\n    if(Array.isArray($source)) { assignedSource = []; }\n    else if($source && typeof $source === 'object') { assignedSource = {}; }\n    let validObject;\n    if(enableValidation && schema) {\n      validObject = schema.validate($source, $model.valueOf());\n      validObject.report();\n    }\n    iterateSourceProperties:\n    for(let [$sourceKey, $sourceValue] of Object.entries($source)) {\n      const assignSourcePropertyChange = new Change({ preter: target[$sourceKey] });\n      const assignSourcePropertyKeyChange = new Change({ preter: target[$sourceKey] });\n      if(schema && enableValidation) {\n        const validatorTarget = $model.valueOf();\n        const validatorSource = $source;\n        const validSourceProperty = schema.validateProperty($sourceKey, $sourceValue, validatorSource, validatorTarget);\n        if(validationEvents) {\n          let type, propertyType;\n          if(validSourceProperty.valid) {\n            type = 'validProperty';\n            propertyType = ['validProperty', $sourceKey].join(':');\n          }\n          else {\n            type = 'nonvalidProperty';\n            propertyType = ['nonvalidProperty', $sourceKey].join(':');\n          }\n          for(const $eventType of [type, propertyType]) {\n            $model.dispatchEvent(new ValidatorEvent$1($eventType, validSourceProperty, $model));\n          }\n        }\n        if(!validSourceProperty.valid) { continue iterateSourceProperties }\n      }\n      let sourceValue;\n      if($sourceValue && typeof $sourceValue === 'object') {\n        if($sourceValue instanceof $model.constructor) {\n          sourceValue = $sourceValue.valueOf();\n        }\n        let subschema;\n        if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema?.type === 'object') { subschema = schema.target[$sourceKey].type.value; }\n        else { subschema = null; }\n        const modelPath = (path)\n          ? [path, $sourceKey].join('.')\n          : String($sourceKey);\n        if(sourceTree === false) {\n          const suboptions = recursiveAssign$a({}, options, {\n            path: modelPath,\n            parent: $model,\n          });\n          sourceValue = new $model.constructor($sourceValue, subschema, suboptions);\n          const assignment = { [$sourceKey]: sourceValue };\n          Object.assign(target, assignment);\n          Object.assign(assignedSource, assignment);\n        }\n        else {\n          if(target[$sourceKey] instanceof $model.constructor) {\n            sourceValue = target[$sourceKey];\n          }\n          else {\n            const subproperties = typedObjectLiteral$a($sourceValue);\n            const suboptions = recursiveAssign$a({}, options, {\n              path: modelPath,\n              parent: $model,\n            });\n            sourceValue = new $model.constructor(subproperties, subschema, suboptions);\n          }\n          const assignment = { [$sourceKey]: sourceValue };\n          Object.assign(target, assignment);\n          Object.assign(assignedSource, assignment);\n          $model.retroReenableEvents();\n          if(sourceValue.type === 'array') {\n            if(['push', 'unshift'].includes(assignArray)) { sourceValue[assignArray](...$sourceValue); }\n            else { sourceValue[assignArray]($sourceValue); }\n          }\n          else if(sourceValue.type === 'object') { sourceValue[assignObject]($sourceValue); }\n        }\n      }\n      else {\n        sourceValue = $sourceValue;\n        const assignment = { [$sourceKey]: sourceValue };\n        Object.assign(target, assignment);\n        Object.assign(assignedSource, assignment);\n      }\n      if(mutatorEvents) {\n        const modelEventPath = (path) ? [path, $sourceKey].join('.') : String($sourceKey);\n        if(mutatorEvents['assignSourceProperty:$key']) {\n          const type = ['assignSourceProperty', $sourceKey].join(':');\n          assignSourcePropertyKeyChange.anter = target[$sourceKey];\n          $model.dispatchEvent(\n            new ModelEvent(type, {\n              path: modelEventPath,\n              value: sourceValue,\n              change: assignSourcePropertyKeyChange,\n              detail: {\n                source: assignedSource,\n              }\n            }, $model)\n          );\n        }\n        if(mutatorEvents['assignSourceProperty']) {\n          assignSourcePropertyChange.anter = target[$sourceKey];\n          $model.dispatchEvent(\n            new ModelEvent('assignSourceProperty', {\n              path: modelEventPath,\n              value: sourceValue,\n              change: assignSourcePropertyChange,\n              detail: {\n                source: assignedSource,\n              }\n            }, $model)\n          );\n        }\n      }\n    }\n    assignedSources.push(assignedSource);\n    if(mutatorEvents && mutatorEvents['assignSource']) {\n      assignSourceChange.anter = $model;\n      $model.dispatchEvent(\n        new ModelEvent('assignSource', {\n          path,\n          change: assignSourceChange,\n          detail: {\n            source: assignedSource,\n          },\n        }, $model)\n      );\n    }\n  }\n  if(mutatorEvents && mutatorEvents['assign']) {\n    assignChange.anter = $model;\n    $model.dispatchEvent(\n      new ModelEvent('assign', { \n        path,\n        change: assignChange,\n        detail: {\n          sources: assignedSources,\n        },\n      }, $model)\n    );\n  }\n  return $model\n}\n\nconst { typedObjectLiteral: typedObjectLiteral$9 } = Coutil;\nfunction defineProperties($model, $options, $propertyDescriptors) {\n  const { path, schema } = $model;\n  let {\n    enableValidation, mutatorEvents, required, \n    validation, validationEvents, validationReport\n  } = $options;\n  const propertyDescriptorEntries = Object.entries($propertyDescriptors);\n  const definePropertiesChange = new Change({ preter: $model });\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of propertyDescriptorEntries) {\n    $model.defineProperty($propertyKey, $propertyDescriptor, Object.assign({}, $options, {\n      validation, validationReport\n    }));\n  }\n  if(mutatorEvents && mutatorEvents['defineProperties']) {\n    definePropertiesChange.anter = $model;\n    $model.dispatchEvent(\n      new ModelEvent(\n        'defineProperties',\n        {\n          path,\n          value: $model.valueOf(),\n          detail: {\n            descriptors: $propertyDescriptors,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nconst { impandTree, recursiveAssign: recursiveAssign$9, typedObjectLiteral: typedObjectLiteral$8 } = Coutil;\nfunction defineProperty($model, $options, $propertyKey, $propertyDescriptor) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'defineProperties';\n  const assignArray = options.assignArray || 'defineProperties';\n  const {\n    descriptorTree, enableValidation, mutatorEvents, \n    validation, validationEvents, validationReport\n  } = options;\n  const { target, path, schema } = $model;\n  const propertyValue = $propertyDescriptor.value;\n  const targetPropertyDescriptor = Object.getOwnPropertyDescriptor(target, $propertyKey) || {};\n  const targetPropertyValue = targetPropertyDescriptor.value;\n  const definePropertyChange = new Change({ preter: targetPropertyValue });\n  const definePropertyKeyChange = new Change({ preter: targetPropertyValue });\n  const targetPropertyValueIsModelInstance = targetPropertyValue instanceof $model.constructor;\n  if(schema && enableValidation) {\n    const validProperty = schema.validateProperty(\n      $propertyKey, \n      impandTree(propertyValue, 'value') || propertyValue,\n      {},\n      $model.valueOf()\n    );\n    if(validationEvents) {\n      let type, propertyType;\n      if(validProperty.valid) {\n        type = 'validProperty';\n        propertyType = ['validProperty', $propertyKey].join(':');\n      }\n      else {\n        type = 'nonvalidProperty';\n        propertyType = ['nonvalidProperty', $propertyKey].join(':');\n      }\n      for(const $eventType of [type, propertyType]) {\n        $model.dispatchEvent(new ValidatorEvent$1($eventType, validProperty, $model));\n      }\n    }\n    if(!validProperty.valid) { return $model }\n  }\n  if(propertyValue && typeof propertyValue === 'object') {\n    const modelPath = (path)\n      ? [path, $propertyKey].join('.')\n      : String($propertyKey);\n    if(targetPropertyValueIsModelInstance) {\n      if(descriptorTree === true) {\n        targetPropertyValue.defineProperties($propertyDescriptor);\n      }\n      else {\n        Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n      }\n    }\n    else {\n      let subschema;\n      if(schema) {\n        if(schema.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema.type === 'object') { subschema = schema.target[$propertyKey].type.value; }\n        else { subschema = undefined; }\n      }\n      let subtarget = typedObjectLiteral$8(propertyValue);\n      const suboptions = recursiveAssign$9({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      const submodel = new $model.constructor(\n        subtarget, subschema, suboptions\n      );\n      if(descriptorTree === true) {\n        target[$propertyKey] = submodel;\n        $model.retroReenableEvents();\n        if(submodel.type === 'array') {\n          if(['push', 'unshift'].includes(assignArray)) { submodel[assignArray](...propertyValue); }\n          else { submodel[assignArray](propertyValue); }\n        }\n        else if(submodel.type === 'object') { submodel[assignObject](propertyValue); }\n      }\n      else if(descriptorTree === false) {\n        Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n      }\n    }\n  }\n  else {\n    Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n  }\n  if(mutatorEvents) {\n    const modelEventPath = (path)\n      ? [path, $propertyKey].join('.')\n      : String($propertyKey);\n    if(mutatorEvents['defineProperty:$key']) {\n      definePropertyKeyChange.anter = target[$propertyKey];\n      const type = ['defineProperty', $propertyKey].join(':');\n      $model.dispatchEvent(\n        new ModelEvent(type, {\n          path: modelEventPath,\n          value: propertyValue,\n          change: definePropertyKeyChange,\n          detail: {\n            prop: $propertyKey,\n            descriptor: $propertyDescriptor,\n          },\n        }, $model\n      ));\n    }\n    if(mutatorEvents['defineProperty']) {\n      definePropertyChange.anter = target[$propertyKey];\n      $model.dispatchEvent(\n        new ModelEvent('defineProperty', {\n          path: modelEventPath,\n          value: propertyValue,\n          change: definePropertyChange,\n          detail: {\n            prop: $propertyKey,\n            descriptor: $propertyDescriptor,\n          },\n        }, $model\n      ));\n    }\n  }\n  return $model\n}\n\nfunction freeze($model, $options) {\n  const { recursive, mutatorEvents } = $options;\n  const { target } = $model;\n  if(recursive === true) {\n    for(const [\n      $propertyKey, $propertyValue\n    ] of Object.entries(target)) {\n      if($propertyValue instanceof $model.constructor) {\n        $propertyValue.freeze();\n        if(mutatorEvents && mutatorEvents['freezeProperty']) {\n          $model.dispatchEvent(\n            new ModelEvent(\n              'freezeProperty',\n              { path: $propertyValue.path },\n              $model\n            )\n          );\n        }\n      }\n    }\n  }\n  Object.freeze(target);\n  if(mutatorEvents && mutatorEvents['freeze']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'freeze',\n        { path: $model.path },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction seal($model, $options) {\n  const { recursive, mutatorEvents } = $options;\n  const { target } = $model;\n  if(recursive === true) {\n    for(const [\n      $propertyKey, $propertyValue\n    ] of Object.entries(target)) {\n      if($propertyValue instanceof $model.constructor) {\n        $propertyValue.seal();\n        if(mutatorEvents && mutatorEvents['sealProperty']) {\n          $model.dispatchEvent(\n            new ModelEvent(\n              'sealProperty',\n              { path: $propertyValue.path },\n              $model\n            )\n          );\n        }\n      }\n    }\n  }\n  Object.seal(target);\n  if(mutatorEvents && mutatorEvents['seal']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'seal',\n        { path: $model.path },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nvar ObjectProperty = {\n  assign,\n  defineProperties,\n  defineProperty,\n  freeze,\n  seal,\n};\n\nconst { typedObjectLiteral: typedObjectLiteral$7 } = Coutil;\nfunction concat($model, $options) {\n  const { target, path, schema } = $model;\n  const { enableValidation, mutatorEvents, source, validationEvents } = $options;\n  const $arguments = [].concat(...arguments);\n  let valueIndex = target.length;\n  const values = [];\n  let targetConcat = [...Array.from(target)];\n  let model;\n  iterateValues: \n  for(let $value of $arguments) {\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$7(validatorTarget);\n      const validValue = schema.validateProperty(valueIndex, $subvalue, validatorSource, validatorTarget);\n      if(schema &&validationEvents) {\n        let type, propertyType;\n        if(validValue.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', valueIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', valueIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validValue, $model));\n        }\n      }\n      if(!validValue.valid) { valueIndex++; continue iterateValues }\n    }\n    const modelPath = (path)\n      ? [path, valueIndex].join('.')\n      : String(valueIndex);\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      let subschema = schema?.target[0].type.value || null;\n      const submodel = typedObjectLiteral$7($value);\n      let value = new $model.constructor(submodel, subschema, {\n        path: modelPath,\n        parent: $model,\n      });\n      value.concat($value);\n      values[valueIndex] = value;\n    }\n    else {\n      values[valueIndex] = $value;\n    }\n    targetConcat = Array.prototype.concat.call(targetConcat, values[valueIndex]);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, valueIndex].join('.')\n        : String(valueIndex);\n      if(mutatorEvents['concatElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('concatElement', {\n            path: modelEventPath,\n            value: values[valueIndex],\n            detail: {\n              valueIndex,\n              value: values[valueIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['concatElement:$index']) {\n        $model.dispatchEvent(\n          new ModelEvent('concatElement', {\n            path: modelEventPath,\n            value: values[valueIndex],\n            detail: {\n              valueIndex,\n              value: values[valueIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    valueIndex++;\n  }\n  model = new $model.constructor(targetConcat, schema, $model.options);\n  if(mutatorEvents && mutatorEvents['concat']) {\n    $model.dispatchEvent(\n      new ModelEvent('concat', {\n        path,\n        detail: {\n          values: model,\n        },\n      }, $model)\n    );\n  }\n  return model\n}\n\nfunction copyWithin($model, $options) {\n  const { target, path } = $model;\n  const { enableValidation, validationEvents, mutatorEvents } = $options;\n  const copyTarget = (\n    arguments[0] >= 0\n  ) ? arguments[0]\n    : target.length = arguments[0];\n  const start = (\n    arguments[1] >= 0\n  ) ? arguments[1]\n    : target.length + arguments[1];\n  const end = (\n    arguments[2] === undefined\n  ) ? target.length\n    : (\n    arguments[2] >= 0\n  ) ? arguments[2]\n    : target.length + arguments[2];\n  const copiedItems = [];\n  let copyIndex = start;\n  let targetIndex = copyTarget;\n  while(copyIndex < end) {\n    const copyItem = target[copyIndex];\n    copiedItems.push(copyItem);\n    Array.prototype.copyWithin.call(\n      target,\n      targetIndex,\n      copyIndex,\n      copyIndex + 1\n    );\n    $model.retroReenableEvents();\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, copyIndex].join('.')\n        : String(copyIndex);\n      if(mutatorEvents['copyWithinElement']) {\n        $model.dispatchEvent(\n          new ModelEvent(\n            'copyWithinElement',\n            {\n              path: modelEventPath,\n              value: copyItem,\n              detail: {\n                target: targetIndex,\n                start: copyIndex,\n                end: copyIndex + 1,\n                item: copyItem,\n              },\n            },\n            $model\n          )\n        );\n      }\n      if(mutatorEvents['copyWithinElement:$index']) {\n        const type  = ['copyWithinElement', copyIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(\n            type,\n            {\n              path: modelEventPath,\n              value: copyItem,\n              detail: {\n                target: targetIndex,\n                start: copyIndex,\n                end: copyIndex + 1,\n                item: copyItem,\n              },\n            },\n            $model\n          )\n        );\n      }\n    }\n    copyIndex++;\n    targetIndex++;\n  }\n  // Array Copy Within Event\n  if(mutatorEvents && mutatorEvents['copyWithin']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'copyWithin',\n        {\n          path,\n          detail: {\n            target: copyTarget,\n            start: start,\n            end: end,\n            items: copiedItems,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nconst { typedObjectLiteral: typedObjectLiteral$6 } = Coutil;\nfunction fill($model, $options, ...$arguments) {\n  const options = Object.assign({}, $options);\n  const { target, path, schema } = $model;\n  const assignObject = options.assignObject;\n  const assignArray = options.assignArray || assignObject;\n  const { enableValidation, lengthen, mutatorEvents, validationEvents } = options;\n  const filled = [];\n  let $start;\n  if(typeof $arguments[1] === 'number') {\n    $start = ($arguments[1] >= 0)\n      ? $arguments[1]\n      : target.length + $arguments[1];\n  }\n  else { $start = 0; }\n  let $end;\n  if(typeof $arguments[2] === 'number') {\n    $end = ($arguments[2] >= 0)\n      ? $arguments[2]\n      : target.length + $arguments[2];\n  } else { $end = target.length; }\n  if(lengthen && target.length < $end) { target.length = $end; }\n  let fillIndex = $start;\n  iterateFillIndexes: \n  while(\n    fillIndex < target.length &&\n    fillIndex < $end\n  ) {\n    if(schema && enableValidation) {\n      let validValue = schema.validate(validValue, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        if(validValue.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', fillIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', fillIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validValue, $model));\n        }\n      }\n      if(!validValue.valid) { continue iterateFillIndexes }\n    }\n    const modelPath = (path)\n      ? [path, fillIndex].join('.')\n      : String(fillIndex);\n    let $value = $arguments[0];\n    let value;\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral$6($value);\n      const suboptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      value = new $model.constructor(subproperties, subschema, suboptions);\n    }\n    Array.prototype.fill.call(target, value, fillIndex, fillIndex + 1);\n    $model.retroReenableEvents();\n    if(value.type === 'array') {\n      if(['push', 'unshift'].includes(assignArray)) { value[assignArray](...$value); }\n      else { value[assignArray]($value); }\n    }\n    else if(value.type === 'object') { value[assignObject]($value); }\n    filled.push(value);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, fillIndex].join('.')\n        : String(fillIndex);\n      if(mutatorEvents['fillElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('fillElement', {\n            path: modelEventPath, \n            value: value,\n            detail: {\n              start: fillIndex,\n              end: fillIndex + 1,\n              value,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['fillElement:$index']) {\n        const type = ['fillElement', fillIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            detail: {\n              start: fillIndex,\n              end: fillIndex + 1,\n              value,\n            },\n          }, $model)\n        );\n      }\n    }\n    fillIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['fill']) {\n    $model.dispatchEvent(\n      new ModelEvent('fill', {\n        path,\n        detail: {\n          start: $start,\n          end: $end,\n          filled,\n        },\n      },\n      $model)\n    );\n  }\n  return $model\n}\n\nfunction pop($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  const popElement = Array.prototype.pop.call(target);\n  const popElementIndex = target.length - 1;\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['pop']) {\n    const modelEventPath = (path)\n      ? [path, popElementIndex].join('.')\n      : String(popElementIndex);\n      $model.dispatchEvent(\n      new ModelEvent(\n        'pop',\n        {\n          path: modelEventPath,\n          value: popElement,\n          detail: {\n            elementIndex: popElementIndex,\n            element: popElement,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return popElement\n}\n\nconst { recursiveAssign: recursiveAssign$8, typedObjectLiteral: typedObjectLiteral$5, typeOf: typeOf$3 } = Coutil;\nfunction push($model, $options, ...$elements) {\n  const options = Object.assign({}, $options);\n  const assignArray = 'push';\n  const assignObject = options.assignObject;\n  const { enableValidation, mutatorEvents, source, validationEvents } = options;\n  const { target, path, schema } = $model;\n  const elements = [];\n  let elementsIndex = 0;\n  for(let $element of $elements) {\n    let element;\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$5(validatorTarget);\n      const validElement = schema.validateProperty(elementsIndex, $element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validElement.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', elementsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', elementsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validElement, $model));\n        }\n      }\n      if(!validElement.valid) { return target.length }\n    }\n    const modelPath = (path)\n      ? [path, elementsIndex].join('.')\n      : String(elementsIndex);\n    if($element && typeof $element === 'object') {\n      $element = ($element instanceof $model.constructor) ? $element.valueOf() : $element;\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral$5(typeOf$3($element));\n      const submodelOptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      element = new $model.constructor(subproperties, subschema, submodelOptions);\n      Array.prototype.push.call(target, element);\n      $model.retroReenableEvents();\n      if(element.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { element[assignArray](...$element); }\n        else { element[assignArray]($element); }\n      }\n      else if(element.type === 'object') { element[assignObject]($element); }\n    }\n    else {\n      element = $element;\n      Array.prototype.push.call(target, element);\n    }\n    elements.push(element);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, elementsIndex].join('.')\n        : String(elementsIndex);\n      if(mutatorEvents['pushElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('pushElement', {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['pushElement:$index']) {\n        const type = ['pushElement', elementsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    elementsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['push']) {\n    $model.dispatchEvent(\n      new ModelEvent('push', {\n        path,\n        detail: {\n          elements,\n        },\n      }, $model)\n    );\n  }\n  return target.length\n}\n\nfunction reverse($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  Array.prototype.reverse.call(target, ...arguments);\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['reverse']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'reverse',\n        {\n          path,\n          detail: {\n            reference: target\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction shift($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  const shiftElement = Array.prototype.shift.call(target);\n  const shiftElementIndex = 0;\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['shift']) {\n    const modelEventPath = (path)\n      ? [path, shiftElementIndex].join('.')\n      : String(shiftElementIndex);\n    $model.dispatchEvent(\n      new ModelEvent(\n        'shift',\n        {\n          path: modelEventPath,\n          value: shiftElement,\n          detail: {\n            elementIndex: shiftElementIndex,\n            element: shiftElement,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return shiftElement\n}\n\nconst { typedObjectLiteral: typedObjectLiteral$4 } = Coutil;\nfunction splice($model, $options) {\n  const options = Object.assign({}, $options);\n  const assignObject = options.assignObject;\n  const assignArray = options.assignArray || assignObject;\n  const { mutatorEvents, source } = options;\n  const { target, path, schema } = $model;\n  const { enableValidation, validationEvents } = options;\n  const $arguments = [...arguments];\n  const $start = ($arguments[0] >= 0)\n    ? $arguments[0]\n    : target.length + $arguments[0];\n  const $deleteCount = ($arguments[1] <= 0)\n    ? 0\n    : (\n      $arguments[1] === undefined ||\n      $start + $arguments[1] >= target.length\n    ) ? target.length - $start\n      : $arguments[1];\n  const $addItems = $arguments.slice(2);\n  const addCount = $addItems.length;\n  const deleteItems = [];\n  let deleteItemsIndex = 0;\n  while(deleteItemsIndex < $deleteCount) {\n    const deleteItem = Array.prototype.splice.call(target, $start, 1)[0];\n    deleteItems.push(deleteItem);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, deleteItemsIndex].join('.')\n        : String(deleteItemsIndex);\n      if(mutatorEvents['spliceDeleteElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('spliceDeleteElement', {\n            path: modelEventPath,\n            value: deleteItem,\n            detail: {\n              index: $start + deleteItemsIndex,\n              deleteIndex: deleteItemsIndex,\n              deleteItem: deleteItem,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['spliceDeleteElement:$index']) {\n        const type = ['spliceDeleteElement', deleteItemsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: deleteItem,\n            detail: {\n              index: $start + deleteItemsIndex,\n              deleteIndex: deleteItemsIndex,\n              deleteItem: deleteItem,\n            },\n          }, $model)\n        );\n      }\n    }\n    deleteItemsIndex++;\n  }\n  let addItemsIndex = 0;\n  spliceAdd: \n  while(addItemsIndex < addCount) {\n    let addItem = $addItems[addItemsIndex];\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$4(validatorTarget);\n      const validAddItem = schema.validateProperty(elementIndex, element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validAddItem.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', addItemsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', addItemsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validAddItem, $model));\n        }\n      }\n      if(!validAddItem.valid) { addItemsIndex++; continue spliceAdd }\n    }\n    const modelPath = (path)\n      ? [path, addItemsIndex].join('.')\n      : String(addItemsIndex);\n    let startIndex = $start + addItemsIndex;\n    if(addItem && typeof addItem === 'object') {\n      if(addItem instanceof $model.constructor) { addItem = addItem.valueOf(); }\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral$4(addItem);\n      const suboptions = recursiveAssign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      addItem = new $model.constructor(subproperties, subschema, suboptions);\n      Array.prototype.splice.call(target, startIndex, 0, addItem);\n      $model.retroReenableEvents();\n      if(addItem.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { addItem[assignArray](...$value); }\n        else { addItem[assignArray]($value); }\n      }\n      else if(addItem.type === 'object') { addItem[assignObject]($value); }\n    }\n    else {\n      Array.prototype.splice.call(target, startIndex, 0, addItem);\n    }\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, addItemsIndex].join('.')\n        : String(addItemsIndex);\n      if(mutatorEvents['spliceAddElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('spliceAddElement', {\n            path: modelEventPath,\n            value: addItem,\n            detail: {\n              index: $start + addItemsIndex,\n              addIndex: addItemsIndex,\n              addItem: addItem,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['spliceAddElement:$index']) {\n        const type = ['spliceAddElement', addItemsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: addItem,\n            detail: {\n              index: $start + addItemsIndex,\n              addIndex: addItemsIndex,\n              addItem: addItem,\n            },\n          }, $model)\n        );\n      }\n    }\n    addItemsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['splice']) {\n    $model.dispatchEvent(\n      new ModelEvent('splice', {\n        path,\n        detail: {\n          $start,\n          deleted: deleteItems,\n          added: $addItems,\n          length: target.length,\n        },\n      },\n      $model)\n    );\n  }\n  return deleteItems\n}\n\nconst { recursiveAssign: recursiveAssign$7, typedObjectLiteral: typedObjectLiteral$3, typeOf: typeOf$2 } = Coutil;\nfunction unshift($model, $options, ...$elements) {\n  const options = Object.assign({}, $options);\n  const assignArray = 'unshift';\n  const assignObject = options.assignObject;\n  const { enableValidation, mutatorEvents, source, validationEvents } = options;\n  const { target, path, schema } = $model;\n  const elements = [];\n  let elementsIndex = 0;\n  for(let $element of $elements) {\n    let element;\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$3(validatorTarget);\n      const validElement = schema.validateProperty(elementsIndex, $element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validElement.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', elementsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', elementsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validElement, $model));\n        }\n      }\n      if(!validElement.valid) { return target.length }\n    }\n    const modelPath = (path)\n      ? [path, elementsIndex].join('.')\n      : String(elementsIndex);\n    if($element && typeof $element === 'object') {\n      $element = ($element instanceof $model.constructor) ? $element.valueOf() : $element;\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral$3(typeOf$2($element));\n      const submodelOptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      element = new $model.constructor(subproperties, subschema, submodelOptions);\n      Array.prototype.unshift.call(target, element);\n      $model.retroReenableEvents();\n      if(element.type === 'array') { element[assignArray](...$element); }\n      else if(element.type === 'object') { element[assignObject]($element); }\n    }\n    else {\n      element = $element;\n      Array.prototype.unshift.call(target, element);\n    }\n    elements.unshift(element);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, elementsIndex].join('.')\n        : String(elementsIndex);\n      if(mutatorEvents['unshiftElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('unshiftElement', {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['unshiftElement:$index']) {\n        const type = ['unshiftElement', elementsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    elementsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['unshift']) {\n    $model.dispatchEvent(\n      new ModelEvent('unshift', {\n        path,\n        detail: {\n          elements,\n        },\n      }, $model)\n    );\n  }\n  return target.length\n}\n\nvar ArrayProperty = {\n  concat: concat,\n  copyWithin: copyWithin,\n  fill: fill,\n  pop: pop,\n  push: push,\n  reverse: reverse,\n  shift: shift,\n  splice: splice,\n  unshift: unshift,\n};\n\nfunction getContent($model, $options) {\n  const { path } = $model;\n  const { mutatorEvents } = $options;\n  if(mutatorEvents && mutatorEvents['get']) {\n    $model.dispatchEvent(\n      new ModelEvent('get', {\n        path,\n        value: $model.valueOf(),\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nconst { regularExpressions: regularExpressions$2} = Coutil;\nfunction getContentProperty($model, $options, $path) {\n  const { target, path } = $model;\n  const { mutatorEvents, pathkey, subpathError } = $options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions$2.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue = target[propertyKey];\n    if(subpaths.length) {\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      return propertyValue.get(subpaths.join('.'), $options)\n    }\n    if(mutatorEvents) {\n      if(mutatorEvents['getProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('getProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['getProperty:$key']) {\n        const type = ['getProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n  else if(pathkey === false) {\n    const propertyValue = target[propertyKey];\n    return propertyValue\n  }\n}\n\nconst { recursiveAssign: recursiveAssign$6 } = Coutil;\nfunction getProperty($model, $options, ...$arguments) {\n  let getProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 2) { recursiveAssign$6(options, $arguments[1]); }\n    getProperty = getContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 1) { recursiveAssign$6(options, $arguments[0]); }\n    getProperty = getContent($model, options, ...$arguments);\n  }\n  return getProperty\n}\n\nfunction setContent($model, $options, $properties) {\n  const { path, schema } = $model;\n  let { enableValidation, mutatorEvents, required, validationEvents  } = $options;\n  for(const [$propertyKey, $propertyValue] of Object.entries($properties)) {\n    $model.set($propertyKey, $propertyValue, Object.assign($options, {\n      source: $properties,\n    }));\n  }\n  if(mutatorEvents && mutatorEvents['set']) {\n    $model.dispatchEvent(\n      new ModelEvent('set', {\n        path,\n        value: $model.valueOf(),\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nconst { recursiveAssign: recursiveAssign$5, regularExpressions: regularExpressions$1, typedObjectLiteral: typedObjectLiteral$2, typeOf: typeOf$1 } = Coutil;\nfunction setContentProperty($model, $options, $path, $value) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'set';\n  const assignArray = options.assignArray || 'set';\n  const { target, path, schema } = $model;\n  const {\n    enableValidation, mutatorEvents, pathkey, \n    recursive, subpathError, \n    validationEvents, source, \n  } = options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions$1.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue;\n    const typeOfPropertyValue = typeOf$1($value);\n    const modelPath = (path)\n      ? [path, propertyKey].join('.')\n      : String(propertyKey);\n    if(subpaths.length) {\n      if(recursive && target[propertyKey] === undefined) {\n        let subschema;\n        if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema?.type === 'object') { subschema = schema.target[propertyKey].type.value; }\n        else { subschema = undefined; }\n        let submodel;\n        if(typeOfPropertyValue === 'array') { submodel = []; }\n        else if(typeOfPropertyValue === 'object') { submodel = {}; }\n        else {\n          if(isNaN(Number(propertyKey))) { submodel = {}; }\n          else { submodel = []; }\n        }\n        const submodelOptions = recursiveAssign$5({}, options, {\n          path: modelPath,\n          parent: $model,\n        });\n        propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      }\n      else {\n        propertyValue = target[propertyKey];\n      }\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject](subpaths.join('.'), $value, options); }\n      return propertyValue\n    }\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$2(validatorTarget);\n      const validTargetProp = schema.validateProperty(propertyKey, $value, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validTargetProp, $model));\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const typeOfPropertyValue= typeOf$1($value);\n      let subschema;\n      let submodel;\n      if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n      else if(schema?.type === 'object') { subschema = schema.target[propertyKey].type.value; }\n      else { subschema = undefined; }\n      if(typeOfPropertyValue === 'array') { submodel = []; }\n      else if(typeOfPropertyValue === 'object') { submodel = {}; }\n      else {\n        if(isNaN(Number(propertyKey))) { submodel = {}; }\n        else { submodel = []; }\n      }\n      const submodelOptions = recursiveAssign$5({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      target[propertyKey] = propertyValue;\n      $model.retroReenableEvents();\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject]($value); }\n    }\n    else {\n      propertyValue = $value;\n      target[propertyKey] = propertyValue;\n    }\n    // const _propertyValue = (propertyValue === null) ? null : propertyValue.valueOf()\n    const _propertyValue = propertyValue.valueOf();\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      if(mutatorEvents['setProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('setProperty', {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              key: propertyKey,\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['setProperty:$key']) {\n        const type = ['setProperty', propertyKey].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n  else if(pathkey === false) {\n    let propertyKey = $path;\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const typeOfPropertyValue = typeOf$1($value);\n      let subschema;\n      let submodel;\n      if(schema?.type === 'array') {\n        subschema = schema.target[0].type.value;\n      }\n      if(schema?.type === 'object') {\n        subschema = schema.target[propertyKey].type.value;\n      }\n      else { subschema = undefined; }\n      if(typeOfPropertyValue === 'array') { submodel = []; }\n      else if(typeOfPropertyValue === 'object') { submodel = {}; }\n      else {\n        if(isNaN(Number(propertyKey))) { submodel = {}; }\n        else { submodel = []; }\n      }\n      const modelPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      const submodelOptions = recursiveAssign$5({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      target[propertyKey] = propertyValue;\n      $model.retroReenableEvents();\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject]($value); }\n    }\n    else {\n      propertyValue = $value;\n      target[propertyKey] = propertyValue;\n    }\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      if(mutatorEvents['setProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('setProperty', {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              key: propertyKey,\n              value: _propertyValue,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['setProperty:$key']) {\n        const type = ['setProperty', propertyKey].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n}\n\nconst { recursiveAssign: recursiveAssign$4 } = Coutil;\nfunction setProperty($model, $options, ...$arguments) {\n  let setProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 3) { recursiveAssign$4(options, $arguments[2]); }\n    setProperty = setContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 2) { recursiveAssign$4(options, $arguments[1]); }\n    setProperty = setContent($model, options, ...$arguments);\n  }\n  return setProperty\n}\n\nfunction deleteContent($model, $options) {\n  const { target } = $model;\n  for(const [$targetPropertyKey, $targetPropertyValue] of Object.entries(target)) {\n    $model.delete($targetPropertyKey, $options);\n  }\n  const { path } = $model;\n  const { mutatorEvents } = $options;\n  if(mutatorEvents && mutatorEvents['delete']) {\n    $model.dispatchEvent(\n      new ModelEvent('delete', {\n        path,\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nconst { regularExpressions} = Coutil;\nfunction deleteContentProperty($model, $options, $path) {\n  const { target, path, schema } = $model;\n  const { mutatorEvents, pathkey, subpathError, enableValidation, validationEvents } = $options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue = target[propertyKey];\n    if(subpaths.length) {\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      return propertyValue.delete(subpaths.join('.'), $options)\n    }\n    if(schema && enableValidation) {\n      const differedPropertyProxy = $model.valueOf();\n      delete differedPropertyProxy[propertyKey];\n      const validTargetProp = schema.validate(propertyKey, differedPropertyProxy, {}, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        const validatorEventPath = (path)\n          ? [path, propertyKey].join('.')\n          : String(propertyKey);\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(\n            new ValidatorEvent$1($eventType, Object.assign(validTargetProp, {\n              path: validatorEventPath\n            }), $model)\n          );\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n    if(propertyValue && typeof propertyValue === 'object') {\n      propertyValue.delete($options);\n    }\n    delete target[propertyKey];\n    if(mutatorEvents) {\n      if(mutatorEvents['deleteProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('deleteProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['deleteProperty:$key']) {\n        const type = ['deleteProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            value: propertyValue,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return undefined\n  }\n  else if(pathkey === false) {\n    const propertyKey = $path;\n    const propertyValue = target[propertyKey];\n\n    if(schema && enableValidation) {\n      const differedPropertyProxy = $model.valueOf();\n      delete differedPropertyProxy[propertyKey];\n      const validTargetProp = schema.validate(propertyKey, differedPropertyProxy, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(\n            new ValidatorEvent$1($eventType, validTargetProp, $model)\n          );\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n  \n    if(propertyValue instanceof $model.constructor) {\n      propertyValue.delete($options);\n    }\n    delete target[propertyKey];\n    if(mutatorEvents) {\n      if(mutatorEvents['deleteProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('deleteProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['deleteProperty:$key']) {\n        const type = ['deleteProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            value: propertyValue,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return undefined\n  }\n}\n\nconst { recursiveAssign: recursiveAssign$3 } = Coutil;\nfunction deleteProperty($model, $options, ...$arguments) {\n  let deleteProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 2) { recursiveAssign$3(options, $arguments[1]); }\n    deleteProperty = deleteContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 1) { recursiveAssign$3(options, $arguments[0]); }\n    deleteProperty = deleteContent($model, options, ...$arguments);\n  }\n  return deleteProperty\n}\n\nvar MapProperty = {\n  get: getProperty,\n  set: setProperty,\n  delete: deleteProperty,\n};\n\nconst { recursiveAssign: recursiveAssign$2, recursiveFreeze } = Coutil;\nconst Defaults = Object.freeze({\n  object: [{\n    keys: ['valueOf'],\n    methodDescriptor: function($methodName, $model) {\n      return { value: function valueOf() { return $model.parse({ type: 'object' }) } }\n    },\n  }, {\n    keys: ['toString'],\n    methodDescriptor: function($methodName, $model) {\n      return { value: function toString($parseSettings = {}) {\n        const replacer = ($parseSettings.replacer !== undefined)\n          ? $parseSettings.replacer : null;\n        const space = ($parseSettings.space !== undefined)\n          ? $parseSettings.space : 0;\n        return $model.parse({ type: 'string', replacer, space })\n      } }\n    }, \n  }, {\n    keys: [\n      'entries', 'fromEntries', 'getOwnPropertyDescriptors', \n      'getOwnPropertyDescriptor', 'getOwnPropertyNames', \n      /* 'getOwnPropertySymbols', */ 'groupBy', 'hasOwn', 'is', \n      'getPrototypeOf', 'isExtensible', 'isFrozen', 'isSealed', \n      'keys', 'preventExtensions', 'values',\n    ],\n    methodDescriptor: function($methodName, $model) {\n      return { value: Object[$methodName].bind(null, $model.valueOf()) }\n    },\n  }, {\n    keys: ['propertyIsEnumerable', 'hasOwnProperty'], \n    methodDescriptor: function($methodName, $model) {\n      return { value: () => $model.parse({ type: 'object' })[$methodName] }\n    },\n  }, {\n    type: 'mutators',\n    keys: Object.keys(ObjectProperty), \n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: ObjectProperty[$methodName].bind(null, $model, $options) }\n    }\n  }],\n  array: [{\n    keys: ['length'], \n    methodDescriptor: function($propertyName, $model, $options) {\n      return {\n        get() { return $model.target.length },\n        set($propertyValue) { $model.target.length = $propertyValue; },\n      }\n    }\n  }, {\n    keys: [\n      'from', 'fromAsync', 'isArray', 'of', \n    ], \n    methodDescriptor: function($methodName, $model) {\n      return { value: Array[$methodName] }\n    }, \n  }, {\n    keys: [\n      'at', 'every', 'filter', 'find', 'findIndex', 'findLast',\n      'findLastIndex', 'flat', 'flatMap', 'forEach', 'includes', \n      'indexOf', 'join', 'lastIndexOf', 'map', 'reduce', 'reduceRight', \n      'slice', 'some', 'sort', 'toReversed',  'toSorted', 'toSpliced', \n      'with', \n    ], \n    methodDescriptor: function($methodName, $model) {\n      return { value: Array.prototype[$methodName].bind(null, $model) }\n    }\n  }, {\n    type: 'mutators',\n    keys: Object.keys(ArrayProperty), \n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: ArrayProperty[$methodName].bind(null, $model, $options) }\n    }\n  }],\n  map: [{\n    type: 'mutators',\n    keys: Object.keys(MapProperty),\n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: MapProperty[$methodName].bind(null, $model, $options) }\n    }\n  }]\n});\nfunction Methods($model) {\n  // Object, Array, Map\n  for(const [$propertyClassName, $propertyClasses] of Object.entries(Defaults)) {\n    for(const $propertyClass of $propertyClasses) {\n      const { keys, methodDescriptor, type } = $propertyClass;\n      for(const $methodName of keys) {\n        if($propertyClassName === 'map' || type === 'mutators') {\n          const modelMethodOptions = structuredClone(\n            $model.options.methods[$propertyClassName][$methodName]\n          );\n          const methodOptions = Object.assign({}, $model.options, modelMethodOptions);\n          delete methodOptions.mutatorEvents;\n          methodOptions.mutatorEvents = modelMethodOptions.mutatorEvents;\n          Object.defineProperty(\n            $model, $methodName, methodDescriptor($methodName, $model, methodOptions)\n          );\n        }\n        else {\n          Object.defineProperty(\n            $model, $methodName, methodDescriptor($methodName,  $model)\n          );\n        }\n      }\n    }\n  }\n  return $model\n}\n\nconst { recursiveAssign: recursiveAssign$1, typedObjectLiteral: typedObjectLiteral$1 } = Coutil;\nconst ValidArrayAssigmentMethods = Object.freeze(\n  ['push', 'unshift']\n);\nconst ValidObjectAssigmentMethods = Object.freeze(\n  ['assign', 'defineProperties', 'set']\n);\n\nfunction Assign($model, $properties, $options) {\n  const { type } = $model;\n  const { assignObject, assignArray } = $options;\n  if(type === 'array' && ValidArrayAssigmentMethods.includes(assignArray)) {\n    $model[assignArray](...$properties);\n  }\n  else if(['array', 'object'].includes(type) && ValidObjectAssigmentMethods.includes(assignObject)) {\n    $model[assignObject]($properties);\n  }\n  return $model\n}\n\nconst { typedObjectLiteral, typeOf } = Coutil;\n\nclass Model extends Core {\n  constructor($properties = {}, $schema = null, $options = {}) {\n    super({ propertyDirectory: { accessors: [($target, $property) => {\n      if($property === undefined) { return $target.target }\n      else { return $target.get($property) }\n    }] } });\n    const properties = ($properties instanceof Model) ? $properties.valueOf() : $properties;\n    let parent = null;\n    let path = null;\n    try {\n      Object.defineProperty(this, 'mount', { value: function($mount) {\n        const mountParent = $mount.parent;\n        const mountPath = $mount.path;\n        const property = (mountPath) ? mountPath.split('.').pop() : mountPath;\n        if(parent) { parent.unmount(property); }\n        parent = mountParent;\n        path = mountPath;\n      } });\n    }\n    catch($err) { console.error($err); }\n    try {\n      Object.defineProperty(this, 'unmount', { value: function($unmount) {\n        const unmountPath = $unmount.path;\n        delete this[$property];\n      } });\n    }\n    catch($err) { console.error($err); }\n    Object.defineProperties(this, {\n      'options': { configurable: true, get() {\n        const options = Options($options);\n        if(options.events) {\n          this.addEvents(options.events);\n          delete options.events;\n        }\n        if(options.enableEvents) {\n          const typeofEnableEvents = typeof options.enableEvents;\n          if(typeofEnableEvents === 'boolean') { this.enableEvents(); }\n          else if(typeofEnableEvents === 'object') { this.enableEvents(options.enableEvents); }\n        }\n        Object.defineProperty(this, 'options', { value: options });\n        return options\n      } },\n      'parent': { get() { return parent } },\n      'path': { get() { return path } },\n      'key': { get() { return (path) ? path.pop() : path } },\n      'target': { configurable: true, get() {\n        const target = typedObjectLiteral(properties);\n        Object.defineProperty(this, 'target', { value: target });\n        return target\n      } },\n      'type': { configurable: true, get() {\n        const type = typeOf(this.target);\n        Object.defineProperty(this, 'type', { value: type });\n        return type\n      } },\n      'schema': { configurable: true, get() {\n        const typeOfSchema = typeOf($schema);\n        let schema;\n        if(['undefined', 'null'].includes(typeOfSchema)) { schema = null; }\n        else if($schema instanceof Schema) { schema = $schema; }\n        else if(['array', 'object'].includes(typeOfSchema)) { schema = new Schema($schema); }\n        Object.defineProperty(this, 'schema', { value: schema });\n        return schema\n      } },\n    });\n    this.mount({\n      parent: this.options.parent,\n      path: this.options.path\n    });\n    Methods(this);\n    Assign(this, properties, this.options);\n  }\n  retroReenableEvents() {\n    let model = this;\n    while(model) {\n      model.reenableEvents({ enable: true });\n      model = model.parent;\n    }\n    return this\n  }\n  parse($settings = { type: 'object', replacer: null, space: 0 }) {\n    let parsement = typedObjectLiteral(this.type);\n    for(const [\n      $propertyDescriptorName, $propertyDescriptor\n    ] of Object.entries(\n      Object.getOwnPropertyDescriptors(this.target))\n    ) {\n      let { enumerable, value, writable, configurable } = $propertyDescriptor;\n      if(value instanceof Model) {\n        Object.defineProperty(parsement, $propertyDescriptorName, {\n          enumerable, value: value.valueOf(), writable, configurable\n        });\n      }\n      else {\n        Object.defineProperty(parsement, $propertyDescriptorName, {\n          enumerable, value, writable, configurable\n        });\n      }\n    }\n    let { type, replacer, space } = $settings;\n    if(type === 'object') { return parsement }\n    else if(type === 'string') { return JSON.stringify(parsement, replacer, space) }\n    else { return undefined }\n  }\n}\n\nexport { Model, Schema, Validation, Validator, Verification };\n//# sourceMappingURL=objecture.sans.core-plex.js.map\n","export default class LocalStorage extends EventTarget {\n  #db = localStorage\n  #path\n  constructor($path) {\n    super()\n    this.path = $path\n  }\n  get path() { return this.#path }\n  set path($path) {\n    if(this.#path !== undefined) return\n    this.#path = $path\n  }\n  get() {\n    let dbItem\n    try{ return JSON.parse(this.#db.getItem(this.path)) }\n    catch($err) { console.error($err) }\n    return\n  }\n  set($content) {\n    try { return this.#db.setItem(this.path, JSON.stringify($content)) }\n    catch($err) { console.error($err) }\n    return\n  }\n  remove() {\n    try { return this.#db.removeItem(this.path) }\n    catch($err) { console.error($err) }\n    return\n  }\n}","import { Model as ObjectureModel } from 'objecture/distributement/objecture.sans.core-plex.js'\nimport LocalStorage from './localStorage/index.js'\nimport Options from './options/index.js'\nexport default class Model extends ObjectureModel {\n  #localStorage\n  constructor($properties, $schema, $options) {\n    super(...arguments)\n  }\n  get localStorage() {\n    if(this.#localStorage !== undefined) { return this.#localStorage }\n    const { localStorage } = this.options\n    let path\n    if(localStorage) {\n      if(typeof localStorage === 'string') {\n        if(path[0] !== \"/\") { path = \"/\".concat(path) }\n        else { path = localStorage }\n      }\n      else if(localStorage === true) {\n        path = [window.location.pathname]\n        if(this.path) { path.push(path) }\n        path = path.join('')\n      }\n      if(path !== undefined) { this.#localStorage = new LocalStorage(path) }\n    }\n    return this.#localStorage\n  }\n  save() {\n    if(this.localStorage) {\n      this.localStorage.set(this.content.valueOf())\n      return this.localStorage.get()\n    }\n    return null\n  }\n  load() {\n    if(this.localStorage) {\n      this.content.set(this.localStorage.get())\n      return this.localStorage.get()\n    }\n    return null\n  }\n  unload() {\n    if(this.localStorage) {\n      return this.localStorage.remove()\n    }\n    return null\n  }\n}","const TOKENS = {\n    attribute: /\\[\\s*(?:(?<namespace>\\*|[-\\w\\P{ASCII}]*)\\|)?(?<name>[-\\w\\P{ASCII}]+)\\s*(?:(?<operator>\\W?=)\\s*(?<value>.+?)\\s*(\\s(?<caseSensitive>[iIsS]))?\\s*)?\\]/gu,\n    id: /#(?<name>[-\\w\\P{ASCII}]+)/gu,\n    class: /\\.(?<name>[-\\w\\P{ASCII}]+)/gu,\n    comma: /\\s*,\\s*/g,\n    combinator: /\\s*[\\s>+~]\\s*/g,\n    'pseudo-element': /::(?<name>[-\\w\\P{ASCII}]+)(?:\\((?<argument>¶*)\\))?/gu,\n    'pseudo-class': /:(?<name>[-\\w\\P{ASCII}]+)(?:\\((?<argument>¶*)\\))?/gu,\n    universal: /(?:(?<namespace>\\*|[-\\w\\P{ASCII}]*)\\|)?\\*/gu,\n    type: /(?:(?<namespace>\\*|[-\\w\\P{ASCII}]*)\\|)?(?<name>[-\\w\\P{ASCII}]+)/gu, // this must be last\n};\nconst TRIM_TOKENS = new Set(['combinator', 'comma']);\nconst RECURSIVE_PSEUDO_CLASSES = new Set([\n    'not',\n    'is',\n    'where',\n    'has',\n    'matches',\n    '-moz-any',\n    '-webkit-any',\n    'nth-child',\n    'nth-last-child',\n]);\nconst nthChildRegExp = /(?<index>[\\dn+-]+)\\s+of\\s+(?<subtree>.+)/;\nconst RECURSIVE_PSEUDO_CLASSES_ARGS = {\n    'nth-child': nthChildRegExp,\n    'nth-last-child': nthChildRegExp,\n};\nconst getArgumentPatternByType = (type) => {\n    switch (type) {\n        case 'pseudo-element':\n        case 'pseudo-class':\n            return new RegExp(TOKENS[type].source.replace('(?<argument>¶*)', '(?<argument>.*)'), 'gu');\n        default:\n            return TOKENS[type];\n    }\n};\nfunction gobbleParens(text, offset) {\n    let nesting = 0;\n    let result = '';\n    for (; offset < text.length; offset++) {\n        const char = text[offset];\n        switch (char) {\n            case '(':\n                ++nesting;\n                break;\n            case ')':\n                --nesting;\n                break;\n        }\n        result += char;\n        if (nesting === 0) {\n            return result;\n        }\n    }\n    return result;\n}\nfunction tokenizeBy(text, grammar = TOKENS) {\n    if (!text) {\n        return [];\n    }\n    const tokens = [text];\n    for (const [type, pattern] of Object.entries(grammar)) {\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            if (typeof token !== 'string') {\n                continue;\n            }\n            pattern.lastIndex = 0;\n            const match = pattern.exec(token);\n            if (!match) {\n                continue;\n            }\n            const from = match.index - 1;\n            const args = [];\n            const content = match[0];\n            const before = token.slice(0, from + 1);\n            if (before) {\n                args.push(before);\n            }\n            args.push({\n                ...match.groups,\n                type,\n                content,\n            });\n            const after = token.slice(from + content.length + 1);\n            if (after) {\n                args.push(after);\n            }\n            tokens.splice(i, 1, ...args);\n        }\n    }\n    let offset = 0;\n    for (const token of tokens) {\n        switch (typeof token) {\n            case 'string':\n                throw new Error(`Unexpected sequence ${token} found at index ${offset}`);\n            case 'object':\n                offset += token.content.length;\n                token.pos = [offset - token.content.length, offset];\n                if (TRIM_TOKENS.has(token.type)) {\n                    token.content = token.content.trim() || ' ';\n                }\n                break;\n        }\n    }\n    return tokens;\n}\nconst STRING_PATTERN = /(['\"])([^\\\\\\n]+?)\\1/g;\nconst ESCAPE_PATTERN = /\\\\./g;\nfunction tokenize(selector, grammar = TOKENS) {\n    // Prevent leading/trailing whitespaces from being interpreted as combinators\n    selector = selector.trim();\n    if (selector === '') {\n        return [];\n    }\n    const replacements = [];\n    // Replace escapes with placeholders.\n    selector = selector.replace(ESCAPE_PATTERN, (value, offset) => {\n        replacements.push({ value, offset });\n        return '\\uE000'.repeat(value.length);\n    });\n    // Replace strings with placeholders.\n    selector = selector.replace(STRING_PATTERN, (value, quote, content, offset) => {\n        replacements.push({ value, offset });\n        return `${quote}${'\\uE001'.repeat(content.length)}${quote}`;\n    });\n    // Replace parentheses with placeholders.\n    {\n        let pos = 0;\n        let offset;\n        while ((offset = selector.indexOf('(', pos)) > -1) {\n            const value = gobbleParens(selector, offset);\n            replacements.push({ value, offset });\n            selector = `${selector.substring(0, offset)}(${'¶'.repeat(value.length - 2)})${selector.substring(offset + value.length)}`;\n            pos = offset + value.length;\n        }\n    }\n    // Now we have no nested structures and we can parse with regexes\n    const tokens = tokenizeBy(selector, grammar);\n    // Replace placeholders in reverse order.\n    const changedTokens = new Set();\n    for (const replacement of replacements.reverse()) {\n        for (const token of tokens) {\n            const { offset, value } = replacement;\n            if (!(token.pos[0] <= offset &&\n                offset + value.length <= token.pos[1])) {\n                continue;\n            }\n            const { content } = token;\n            const tokenOffset = offset - token.pos[0];\n            token.content =\n                content.slice(0, tokenOffset) +\n                    value +\n                    content.slice(tokenOffset + value.length);\n            if (token.content !== content) {\n                changedTokens.add(token);\n            }\n        }\n    }\n    // Update changed tokens.\n    for (const token of changedTokens) {\n        const pattern = getArgumentPatternByType(token.type);\n        if (!pattern) {\n            throw new Error(`Unknown token type: ${token.type}`);\n        }\n        pattern.lastIndex = 0;\n        const match = pattern.exec(token.content);\n        if (!match) {\n            throw new Error(`Unable to parse content for ${token.type}: ${token.content}`);\n        }\n        Object.assign(token, match.groups);\n    }\n    return tokens;\n}\n/**\n *  Convert a flat list of tokens into a tree of complex & compound selectors\n */\nfunction nestTokens(tokens, { list = true } = {}) {\n    if (list && tokens.find((t) => t.type === 'comma')) {\n        const selectors = [];\n        const temp = [];\n        for (let i = 0; i < tokens.length; i++) {\n            if (tokens[i].type === 'comma') {\n                if (temp.length === 0) {\n                    throw new Error('Incorrect comma at ' + i);\n                }\n                selectors.push(nestTokens(temp, { list: false }));\n                temp.length = 0;\n            }\n            else {\n                temp.push(tokens[i]);\n            }\n        }\n        if (temp.length === 0) {\n            throw new Error('Trailing comma');\n        }\n        else {\n            selectors.push(nestTokens(temp, { list: false }));\n        }\n        return { type: 'list', list: selectors };\n    }\n    for (let i = tokens.length - 1; i >= 0; i--) {\n        let token = tokens[i];\n        if (token.type === 'combinator') {\n            let left = tokens.slice(0, i);\n            let right = tokens.slice(i + 1);\n            if (left.length === 0) {\n                return {\n                    type: 'relative',\n                    combinator: token.content,\n                    right: nestTokens(right),\n                };\n            }\n            return {\n                type: 'complex',\n                combinator: token.content,\n                left: nestTokens(left),\n                right: nestTokens(right),\n            };\n        }\n    }\n    switch (tokens.length) {\n        case 0:\n            throw new Error('Could not build AST.');\n        case 1:\n            // If we're here, there are no combinators, so it's just a list.\n            return tokens[0];\n        default:\n            return {\n                type: 'compound',\n                list: [...tokens], // clone to avoid pointers messing up the AST\n            };\n    }\n}\n/**\n * Traverse an AST in depth-first order\n */\nfunction* flatten(node, \n/**\n * @internal\n */\nparent) {\n    switch (node.type) {\n        case 'list':\n            for (let child of node.list) {\n                yield* flatten(child, node);\n            }\n            break;\n        case 'complex':\n            yield* flatten(node.left, node);\n            yield* flatten(node.right, node);\n            break;\n        case 'relative':\n            yield* flatten(node.right, node);\n            break;\n        case 'compound':\n            yield* node.list.map((token) => [token, node]);\n            break;\n        default:\n            yield [node, parent];\n    }\n}\n/**\n * Traverse an AST (or part thereof), in depth-first order\n */\nfunction walk(node, visit, \n/**\n * @internal\n */\nparent) {\n    if (!node) {\n        return;\n    }\n    for (const [token, ast] of flatten(node, parent)) {\n        visit(token, ast);\n    }\n}\n/**\n * Parse a CSS selector\n *\n * @param selector - The selector to parse\n * @param options.recursive - Whether to parse the arguments of pseudo-classes like :is(), :has() etc. Defaults to true.\n * @param options.list - Whether this can be a selector list (A, B, C etc). Defaults to true.\n */\nfunction parse(selector, { recursive = true, list = true } = {}) {\n    const tokens = tokenize(selector);\n    if (!tokens) {\n        return;\n    }\n    const ast = nestTokens(tokens, { list });\n    if (!recursive) {\n        return ast;\n    }\n    for (const [token] of flatten(ast)) {\n        if (token.type !== 'pseudo-class' || !token.argument) {\n            continue;\n        }\n        if (!RECURSIVE_PSEUDO_CLASSES.has(token.name)) {\n            continue;\n        }\n        let argument = token.argument;\n        const childArg = RECURSIVE_PSEUDO_CLASSES_ARGS[token.name];\n        if (childArg) {\n            const match = childArg.exec(argument);\n            if (!match) {\n                continue;\n            }\n            Object.assign(token, match.groups);\n            argument = match.groups['subtree'];\n        }\n        if (!argument) {\n            continue;\n        }\n        Object.assign(token, {\n            subtree: parse(argument, {\n                recursive: true,\n                list: true,\n            }),\n        });\n    }\n    return ast;\n}\n/**\n * Converts the given list or (sub)tree to a string.\n */\nfunction stringify(listOrNode) {\n    if (Array.isArray(listOrNode)) {\n        return listOrNode.map((token) => token.content).join(\"\");\n    }\n    switch (listOrNode.type) {\n        case \"list\":\n            return listOrNode.list.map(stringify).join(\",\");\n        case \"relative\":\n            return (listOrNode.combinator +\n                stringify(listOrNode.right));\n        case \"complex\":\n            return (stringify(listOrNode.left) +\n                listOrNode.combinator +\n                stringify(listOrNode.right));\n        case \"compound\":\n            return listOrNode.list.map(stringify).join(\"\");\n        default:\n            return listOrNode.content;\n    }\n}\n/**\n * To convert the specificity array to a number\n */\nfunction specificityToNumber(specificity, base) {\n    base = base || Math.max(...specificity) + 1;\n    return (specificity[0] * (base << 1) + specificity[1] * base + specificity[2]);\n}\n/**\n * Calculate specificity of a selector.\n *\n * If the selector is a list, the max specificity is returned.\n */\nfunction specificity(selector) {\n    let ast = selector;\n    if (typeof ast === 'string') {\n        ast = parse(ast, { recursive: true });\n    }\n    if (!ast) {\n        return [];\n    }\n    if (ast.type === 'list' && 'list' in ast) {\n        let base = 10;\n        const specificities = ast.list.map((ast) => {\n            const sp = specificity(ast);\n            base = Math.max(base, ...specificity(ast));\n            return sp;\n        });\n        const numbers = specificities.map((ast) => specificityToNumber(ast, base));\n        return specificities[numbers.indexOf(Math.max(...numbers))];\n    }\n    const ret = [0, 0, 0];\n    for (const [token] of flatten(ast)) {\n        switch (token.type) {\n            case 'id':\n                ret[0]++;\n                break;\n            case 'class':\n            case 'attribute':\n                ret[1]++;\n                break;\n            case 'pseudo-element':\n            case 'type':\n                ret[2]++;\n                break;\n            case 'pseudo-class':\n                if (token.name === 'where') {\n                    break;\n                }\n                if (!RECURSIVE_PSEUDO_CLASSES.has(token.name) ||\n                    !token.subtree) {\n                    ret[1]++;\n                    break;\n                }\n                const sub = specificity(token.subtree);\n                sub.forEach((s, i) => (ret[i] += s));\n                // :nth-child() & :nth-last-child() add (0, 1, 0) to the specificity of their most complex selector\n                if (token.name === 'nth-child' ||\n                    token.name === 'nth-last-child') {\n                    ret[1]++;\n                }\n        }\n    }\n    return ret;\n}\n\nexport { RECURSIVE_PSEUDO_CLASSES, RECURSIVE_PSEUDO_CLASSES_ARGS, TOKENS, TRIM_TOKENS, flatten, gobbleParens, parse, specificity, specificityToNumber, stringify, tokenize, tokenizeBy, walk };\n","export default class QuerySelector {\n  #settings\n  #enable\n  constructor($settings) {\n    this.#settings = $settings\n  }\n  get context() { return this.#settings.context }\n  get method() { return this.#settings.method }\n  get name() { return this.#settings.name }\n  get selector() { return this.#settings.selector }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    if($enable === this.#enable) return\n    if($enable === true) {\n      const { context, name, method, selector } = this\n      const $this = this\n      Object.defineProperty(context.querySelectors, name, {\n        configurable: true, enumerable: true, \n        get() { return context[method](selector) }\n      })\n    }\n    else if($enable === false) {\n      delete this.context.querySelectors[this.name]\n    }\n    this.#enable = $enable\n  }\n}","import * as parsel from '../../../node_modules/parsel-js/dist/parsel.js'\nconst Combinators = {\n  descendant: \" \",\n  child: \">\",\n  subsequentSibling: \"~\",\n  nextSibling: \"+\",\n}\nfunction Query($element, $queryMethod, $queryString) {\n  let query = []\n  let queryString = $queryString\n  let queryTokens = parsel.tokenize(queryString)\n  // Orient Query Tokens To Scope\n  if(queryTokens[0].content !== ':scope') {\n    queryString = [':scope', queryString].join(' ')\n    queryTokens = parsel.tokenize(queryString)\n  }\n  // Define Scope\n  const scope = queryTokens[0]\n  const scopeCombinator = queryTokens[1]\n  // Define Scope Query\n  const scopeQueryString = parsel.stringify(queryTokens.slice(2))\n  const scopeQueryTokens = parsel.tokenize(scopeQueryString)\n  const scopeQueryParse = parsel.parse(scopeQueryString)\n  const children = Array.from($element.children)\n  iterateChildren: \n  for(const [$childIndex, $child] of Object.entries(children)) {\n    // Scope Query Type: Complex\n    if(scopeQueryParse.type === 'complex') {\n      const { left, combinator, right } = scopeQueryParse\n      // Lexter\n      const lexter = Query($element, $queryMethod, parsel.stringify(left))\n      // Dexter\n      let dexter\n      if(lexter.length) {\n        // Combinator: Descendant \" \"\n        if(combinator === Combinators.descendant) {\n          dexter = Query($child, $queryMethod, [':scope', parsel.stringify(right)].join(Combinators.descendant))\n          query = query.concat(dexter)\n        }\n        // Combinator: Child \">\"\n        else if(combinator === Combinators.child) {\n          dexter = Query($child, $queryMethod, [':scope', parsel.stringify(right)].join(Combinators.child))\n          query = query.concat(dexter)\n        }\n        // Combinator: Subsequent Sibling \"~\"\n        else if(combinator === Combinators.subsequentSibling) {\n          dexter = Query({ children: children.slice($childIndex + 1) }, $queryMethod, parsel.stringify(right))\n          query = query.concat(dexter)\n        }\n        // Combinator: Next Sibling \"+\"\n        else if(combinator === Combinators.nextSibling) {\n          dexter = Query({ children: children.slice($childIndex + 1, $childIndex + 2) }, $queryMethod, parsel.stringify(right))\n          query = query.concat(dexter)\n        }\n      }\n    }\n    // Scope Query Type: Not Complex\n    else {\n      // Child: Matches Query String\n      if($child.matches(scopeQueryString)) query = query.concat($child)\n      // Descendant: Query Selector String\n      if(scopeCombinator.content === Combinators.descendant) {\n        const childQuery = $child[$queryMethod](scopeQueryString)\n        if(childQuery instanceof NodeList) query = query.concat(...childQuery)\n        else if(childQuery instanceof Node) query = query.concat(childQuery) \n      }\n    }\n    if($queryMethod === 'querySelector' && query.length > 0) return query.slice(0, 1)\n  }\n  return query\n}\nexport default Query","import * as parsel from '../../node_modules/parsel-js/dist/parsel.js'\nimport Core from '../core/index.js'\nimport QuerySelector from './querySelector/index.js'\nimport Query from './query/index.js'\nimport Settings from './settings/index.js'\nimport Options from './options/index.js'\nexport default class View extends Core {\n  #templates\n  #scope\n  #parentElement\n  #_template\n  #children\n  // #querySelectors = {}\n  constructor($settings = {}, $options = {}) {\n    super(Settings($settings), Options($options))\n    Object.defineProperties(this, {\n      _querySelectors: {\n        enumerable: false, writable: false, configurable: false,\n        value: {},\n      },\n      querySelectors: {\n        enumerable: true,\n        get() { return this._querySelectors },\n      },\n      qs: {\n        enumerable: true,\n        get() { return this.querySelectors },\n      },\n    })\n    this.addQuerySelectors(this.settings.querySelectors)\n    const {\n      enableQuerySelectors, enableEvents\n    } = this.options\n    if(enableQuerySelectors) this.enableQuerySelectors()\n    if(enableEvents) this.enableEvents()\n  }\n  get templates() {\n    if(this.#templates !== undefined) return this.#templates\n    this.#templates = this.settings.templates\n    return this.#templates\n  }\n  get scope() {\n    if(this.#scope !== undefined) return this.#scope\n    this.#scope = this.settings.scope\n    return this.#scope\n  }\n  get parentElement() {\n    if(this.#parentElement !== undefined) return this.#parentElement\n    this.#parentElement = this.settings.parentElement\n    return this.#parentElement\n  }\n  get #template() {\n    if(this.#_template !== undefined) { return this.#_template }\n    this.#_template = document.createElement('template')\n    return this.#_template\n  }\n  set #template($templateString) {\n    this.disableQuerySelectors()\n    this.#template.innerHTML = $templateString\n    this.children = this.#template.content.children\n    this.parentElement.append(...this.children.values())\n    this.enableQuerySelectors()\n    this.retroReenableEvents()\n  }\n  get children() {\n    if(this.#children !== undefined) return this.#children\n    this.#children = new Map()\n    return this.#children\n  }\n  set children($children) {\n    const children = this.children\n    children.forEach(($child, $childIndex) => $child?.parentElement.removeChild($child))\n    children.clear()\n    Array.from($children).forEach(($child, $childIndex) => {\n      children.set($childIndex, $child)\n    })\n  }\n  querySelector($queryString, $queryScope) {\n    const query = this.#query('querySelector', $queryString, $queryScope)\n    return query[0] || null\n  }\n  querySelectorAll($queryString, $queryScope) {\n    const query = this.#query('querySelectorAll', $queryString, $queryScope)\n    return query\n  }\n  #query($queryMethod, $queryString) {\n    const queryElement = (this.scope === 'template')\n      ? { children: Array.from(this.children.values()) }\n      : { children: Array.from(this.parentElement.children) }\n    return Query(queryElement, $queryMethod, $queryString)\n  }\n  addQuerySelectors($queryMethods) {\n    if($queryMethods === undefined) return this\n    const { querySelectors } = this.settings\n    for(const [$queryMethod, $selectors] of Object.entries($queryMethods)) {\n      for(const [$selectorName, $selector] of Object.entries($selectors)) {\n        querySelectors[$queryMethod] = querySelectors[$queryMethod] || {}\n        querySelectors[$queryMethod][$selectorName] = new QuerySelector({\n          context: this,\n          name: $selectorName,\n          method: $queryMethod,\n          selector: $selector,\n          enable: false,\n        })\n      }\n    }\n    return this\n  }\n  removeQuerySelectors($queryMethods) {\n    $queryMethods = $queryMethods || this.settings.querySelectors\n    for(const [\n      $queryMethod, $selectors\n    ] of Object.entries($queryMethods)) {\n      for(const [\n        $selectorName, $selector\n      ] of Object.entries($selectors)) {\n        if(this.settings.querySelectors[$queryMethod] !== undefined) {\n          delete this.settings.querySelectors[$queryMethod][$selectorName]\n        }\n      }\n    }\n    return this\n  }\n  enableQuerySelectors($queryMethods) {\n    $queryMethods = $queryMethods || this.settings.querySelectors\n    const $this = this \n    for(const $selectors of Object.values($queryMethods)) {\n      for(const $selector of Object.values($selectors)) {\n        $selector.enable = true\n      }\n    }\n    return this\n  }\n  disableQuerySelectors($queryMethods) {\n    $queryMethods = $queryMethods || this.settings.querySelectors\n    for(const $selectors of Object.values($queryMethods)) {\n      for(const $selector of Object.values($selectors)) {\n        $selector.enable = false\n      }\n    }\n    return this\n  }\n  render($models = {}, $template = 'default') {\n    this.#template = this.templates[$template]($models)\n    return this\n  }\n}","import { recursiveAssign } from '../../coutil/index.js'\nexport default ($settings) => recursiveAssign({\n  scope: 'template', // 'parent',\n  templates: {},\n  querySelectors: {},\n}, $settings)","export default ($options) => Object.assign({\n  events: false,\n  eventListeners: false,\n  enableEvents: true,\n  enableQuerySelectors: true,\n}, $options)\n","const Events = {\n  // Fetch Response Interface Events\n  // OK\n  'ok': ($response, $requestMethod) => {\n    const eventType = `${$requestMethod}:ok`\n    const event = new CustomEvent(eventType, {\n      detail: {\n        response: $response,\n      },\n    })\n    return event\n  },\n  // Status\n  'status': ($response, $requestMethod) => {\n    const eventType = `${$requestMethod}:status`\n    const event = new CustomEvent(eventType, {\n      detail: {\n        response: $response,\n      },\n    })\n    return event\n  },\n  // Status Code\n  'statusCode': ($response, $requestMethod) => {\n    const eventType = `${$requestMethod}:status:${$response.status}`\n    const event = new CustomEvent(eventType, {\n      detail: {\n        response: $response,\n      },\n    })\n    return event\n  },\n  // Status Text\n  'statusText': ($response, $requestMethod) => {\n    const eventType = `${$requestMethod}:statusText`\n    const event = new CustomEvent(eventType, {\n      detail: {\n        response: $response,\n      },\n    })\n    return event\n  },\n  // Status Text Message\n  'statusTextMessage': ($response, $requestMethod) => {\n    const eventType = `${$requestMethod}:statusText:${$response.statusText}`\n    const event = new CustomEvent(eventType, {\n      detail: {\n        response: $response,\n      },\n    })\n    return event\n  },\n  // Abort\n  'abort': ($abortController) => {\n    const eventType = 'abort'\n    const event = new CustomEvent(eventType, {\n      detail: {\n        abortController: $abortController,\n      },\n    })\n    return event\n  },\n}\n\nexport default Events","import Events from '../interfaces/response/events/index.js'\nexport default class FetchRoute extends EventTarget {\n  #settings = {}\n  #name\n  #origin\n  #path\n  constructor($settings = {}) {\n    super()\n    this.#settings = $settings\n    this.#name = this.#settings.name\n    this.#origin = this.#settings.origin\n    this.#path = this.#settings.path\n    this.addMethods(this.#settings.methods)\n  }\n  addMethods($methods) {\n    const $this = this\n    iterateMethods:\n    for(const [\n      $methodName, $methodOptions\n    ] of Object.entries($methods)) {\n      const abortKey = `${$methodName}AbortSignal`\n      Object.defineProperties($this, {\n        [abortKey]: {\n          enumerable: false,\n          writable: true,\n          value: undefined,\n        },\n        [$methodName]: {\n          enumerable: true,\n          writable: false,\n          configurable: false,\n          value: async function() {\n            const $arguments = [...arguments]\n            let $resourcePath, $resourceOptions\n            if($arguments.length === 0) {\n              $resourcePath = ''\n              $resourceOptions = {}\n            } else\n            if($arguments.length === 1) {\n              if(typeof $arguments[0] === 'string') {\n                $resourcePath = $arguments[0]\n                $resourceOptions = {}\n              } else\n              if(typeof $arguments[0] === 'object') {\n                $resourcePath = ''\n                $resourceOptions = $arguments[0]\n              }\n            } else\n            if($arguments.length === 2) {\n              if(typeof $arguments[0] === 'string') {\n                $resourcePath = $arguments[0]\n              }\n              if(typeof $arguments[1] === 'object') {\n                $resourceOptions = $arguments[1]\n              }\n            }\n            const methodName = $methodName\n            const resourceOptions = Object.assign({}, $methodOptions)\n            let { urlSearchParams, headers, body, priority } = $resourceOptions\n            let pathParameters = new URLSearchParams(urlSearchParams).toString()\n            if(pathParameters.length > 0) pathParameters = '?'.concat(pathParameters)\n            if(headers !== undefined) Object.assign(resourceOptions.headers, headers)\n            if(body !== undefined) resourceOptions.body = body\n            if(priority !== undefined) resourceOptions.priority = priority\n            const resource = String.prototype.concat(\n              $this.#origin, this.#decodePath($this.#path, $resourcePath), pathParameters\n            )\n            if($this[abortKey] !== undefined) {\n              $this[abortKey].abort()\n              $this.createEvent($this, 'abort', $this[abortKey])\n            }\n            $this[abortKey] = new AbortController()\n            resourceOptions.signal = $this[abortKey].signal\n            let fetchSource = await fetch(resource, resourceOptions)\n            .then(($fetchSource) => {\n              $this\n              .createEvent($this, 'ok', $fetchSource.clone(), $methodName)\n              .createEvent($this, 'status', $fetchSource.clone(), $methodName)\n              .createEvent($this, 'statusCode', $fetchSource.clone(), $methodName)\n              .createEvent($this, 'statusText', $fetchSource.clone(), $methodName)\n              .createEvent($this, 'statusTextMessage', $fetchSource.clone(), $methodName)\n              return $fetchSource\n            })\n            .catch(($err) => { /* console.error($err) */ })\n            return fetchSource\n          }\n        }\n      })\n    }\n  }\n  #decodePath($path, $resourcePath) {\n    if($path.includes(':') === false) return $path \n    const pathFragments = $path.split('/')\n    const resourcePathFragments = $resourcePath.split('/')\n    if(pathFragments.length !== resourcePathFragments.length) return $path\n    let decodedPathFragments = []\n    let pathFragmentsIndex = 0\n    iteratePathFragments: \n    while(pathFragmentsIndex < pathFragments.length) {\n      let pathFragment = pathFragments[pathFragmentsIndex]\n      const resourcePathFragment = resourcePathFragments[pathFragmentsIndex]\n      if(pathFragment.includes(':')) {\n        pathFragment = resourcePathFragments[pathFragmentsIndex]\n      } else if(\n        pathFragment !== resourcePathFragment\n      ) {\n        return $path\n      }\n      decodedPathFragments.push(pathFragment)\n      pathFragmentsIndex++\n    }\n    return decodedPathFragments.join('/')\n  }\n  removeMethods($methods) {\n    iterateMethods: \n    for(const $methodName of Object.values($methods)) {\n      const abortKey = `${$methodName}AbortSignal`\n      if(this[abortKey].signal.aborted === false) {\n        this[abortKey].abort()\n      }\n      delete this[abortKey]\n      delete this[$methodName]\n    }\n  }\n  createEvent($eventTarget, $eventType, $response, $requestMethod) {\n    const event = Events[$eventType]($response, $requestMethod)\n    $eventTarget.dispatchEvent(event)\n    return this\n  }\n}","import FetchRoute from './fetchRoute/index.js'\nimport Core from '../../core/index.js'\nimport Settings from './settings/index.js'\nimport Options from './options/index.js'\nexport default class FetchRouter extends Core {\n  #scheme\n  #domain\n  #port\n  #_authority\n  #_origin\n  #routes = {}\n  constructor($settings, $options) {\n    super(Settings($settings), Options($options))\n    const { scheme, domain, port, routes } = $settings\n    this.#scheme = scheme\n    this.#domain = domain\n    this.#port = port\n    this.routes = routes\n    if($options.enableEvents === true) this.enableEvents()\n  }\n  get #authority() {\n    if(this.#_authority === undefined) {\n      this.#_authority = String.prototype.concat(\n        this.#domain, ':', this.#port\n      )\n    }\n    return this.#_authority\n  }\n  get #origin() {\n    if(this.#_origin === undefined) {\n      this.#_origin = String.prototype.concat(\n        this.#scheme, '://', this.#authority\n      )\n    }\n    return this.#_origin\n  }\n  get routes() { return this.#routes }\n  set routes($routes) { this.addRoutes($routes) }\n  addRoutes($routes) {\n    const $this = this\n    const _routes = this.#routes\n    for(let [\n      $routePath, $routeSettings\n    ] of Object.entries($routes)) {\n      $routeSettings.origin = this.#origin\n      $routeSettings.path = $routePath\n      _routes[$routeSettings.name] = new FetchRoute($routeSettings)\n    }\n    return this\n  }\n  removeRoutes($routes) {\n    const _routes = this.#routes\n    for(const $path of $routes) {\n      delete _routes[$path]\n    }\n    return this\n  }\n}\n","export default ($settings) => Object.assign({}, $settings)","export default ($options) => Object.assign({\n  enableEvents: true\n}, $options)","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenData = void 0;\nexports.parse = parse;\nexports.compile = compile;\nexports.match = match;\nexports.pathToRegexp = pathToRegexp;\nexports.stringify = stringify;\nconst DEFAULT_DELIMITER = \"/\";\nconst NOOP_VALUE = (value) => value;\nconst ID_START = /^[$_\\p{ID_Start}]$/u;\nconst ID_CONTINUE = /^[$\\u200c\\u200d\\p{ID_Continue}]$/u;\nconst DEBUG_URL = \"https://git.new/pathToRegexpError\";\nconst SIMPLE_TOKENS = {\n    // Groups.\n    \"{\": \"{\",\n    \"}\": \"}\",\n    // Reserved.\n    \"(\": \"(\",\n    \")\": \")\",\n    \"[\": \"[\",\n    \"]\": \"]\",\n    \"+\": \"+\",\n    \"?\": \"?\",\n    \"!\": \"!\",\n};\n/**\n * Escape text for stringify to path.\n */\nfunction escapeText(str) {\n    return str.replace(/[{}()\\[\\]+?!:*]/g, \"\\\\$&\");\n}\n/**\n * Escape a regular expression string.\n */\nfunction escape(str) {\n    return str.replace(/[.+*?^${}()[\\]|/\\\\]/g, \"\\\\$&\");\n}\n/**\n * Tokenize input string.\n */\nfunction* lexer(str) {\n    const chars = [...str];\n    let i = 0;\n    function name() {\n        let value = \"\";\n        if (ID_START.test(chars[++i])) {\n            value += chars[i];\n            while (ID_CONTINUE.test(chars[++i])) {\n                value += chars[i];\n            }\n        }\n        else if (chars[i] === '\"') {\n            let pos = i;\n            while (i < chars.length) {\n                if (chars[++i] === '\"') {\n                    i++;\n                    pos = 0;\n                    break;\n                }\n                if (chars[i] === \"\\\\\") {\n                    value += chars[++i];\n                }\n                else {\n                    value += chars[i];\n                }\n            }\n            if (pos) {\n                throw new TypeError(`Unterminated quote at ${pos}: ${DEBUG_URL}`);\n            }\n        }\n        if (!value) {\n            throw new TypeError(`Missing parameter name at ${i}: ${DEBUG_URL}`);\n        }\n        return value;\n    }\n    while (i < chars.length) {\n        const value = chars[i];\n        const type = SIMPLE_TOKENS[value];\n        if (type) {\n            yield { type, index: i++, value };\n        }\n        else if (value === \"\\\\\") {\n            yield { type: \"ESCAPED\", index: i++, value: chars[i++] };\n        }\n        else if (value === \":\") {\n            const value = name();\n            yield { type: \"PARAM\", index: i, value };\n        }\n        else if (value === \"*\") {\n            const value = name();\n            yield { type: \"WILDCARD\", index: i, value };\n        }\n        else {\n            yield { type: \"CHAR\", index: i, value: chars[i++] };\n        }\n    }\n    return { type: \"END\", index: i, value: \"\" };\n}\nclass Iter {\n    constructor(tokens) {\n        this.tokens = tokens;\n    }\n    peek() {\n        if (!this._peek) {\n            const next = this.tokens.next();\n            this._peek = next.value;\n        }\n        return this._peek;\n    }\n    tryConsume(type) {\n        const token = this.peek();\n        if (token.type !== type)\n            return;\n        this._peek = undefined; // Reset after consumed.\n        return token.value;\n    }\n    consume(type) {\n        const value = this.tryConsume(type);\n        if (value !== undefined)\n            return value;\n        const { type: nextType, index } = this.peek();\n        throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}: ${DEBUG_URL}`);\n    }\n    text() {\n        let result = \"\";\n        let value;\n        while ((value = this.tryConsume(\"CHAR\") || this.tryConsume(\"ESCAPED\"))) {\n            result += value;\n        }\n        return result;\n    }\n}\n/**\n * Tokenized path instance.\n */\nclass TokenData {\n    constructor(tokens) {\n        this.tokens = tokens;\n    }\n}\nexports.TokenData = TokenData;\n/**\n * Parse a string for the raw tokens.\n */\nfunction parse(str, options = {}) {\n    const { encodePath = NOOP_VALUE } = options;\n    const it = new Iter(lexer(str));\n    function consume(endType) {\n        const tokens = [];\n        while (true) {\n            const path = it.text();\n            if (path)\n                tokens.push({ type: \"text\", value: encodePath(path) });\n            const param = it.tryConsume(\"PARAM\");\n            if (param) {\n                tokens.push({\n                    type: \"param\",\n                    name: param,\n                });\n                continue;\n            }\n            const wildcard = it.tryConsume(\"WILDCARD\");\n            if (wildcard) {\n                tokens.push({\n                    type: \"wildcard\",\n                    name: wildcard,\n                });\n                continue;\n            }\n            const open = it.tryConsume(\"{\");\n            if (open) {\n                tokens.push({\n                    type: \"group\",\n                    tokens: consume(\"}\"),\n                });\n                continue;\n            }\n            it.consume(endType);\n            return tokens;\n        }\n    }\n    const tokens = consume(\"END\");\n    return new TokenData(tokens);\n}\n/**\n * Compile a string to a template function for the path.\n */\nfunction compile(path, options = {}) {\n    const { encode = encodeURIComponent, delimiter = DEFAULT_DELIMITER } = options;\n    const data = path instanceof TokenData ? path : parse(path, options);\n    const fn = tokensToFunction(data.tokens, delimiter, encode);\n    return function path(data = {}) {\n        const [path, ...missing] = fn(data);\n        if (missing.length) {\n            throw new TypeError(`Missing parameters: ${missing.join(\", \")}`);\n        }\n        return path;\n    };\n}\nfunction tokensToFunction(tokens, delimiter, encode) {\n    const encoders = tokens.map((token) => tokenToFunction(token, delimiter, encode));\n    return (data) => {\n        const result = [\"\"];\n        for (const encoder of encoders) {\n            const [value, ...extras] = encoder(data);\n            result[0] += value;\n            result.push(...extras);\n        }\n        return result;\n    };\n}\n/**\n * Convert a single token into a path building function.\n */\nfunction tokenToFunction(token, delimiter, encode) {\n    if (token.type === \"text\")\n        return () => [token.value];\n    if (token.type === \"group\") {\n        const fn = tokensToFunction(token.tokens, delimiter, encode);\n        return (data) => {\n            const [value, ...missing] = fn(data);\n            if (!missing.length)\n                return [value];\n            return [\"\"];\n        };\n    }\n    const encodeValue = encode || NOOP_VALUE;\n    if (token.type === \"wildcard\" && encode !== false) {\n        return (data) => {\n            const value = data[token.name];\n            if (value == null)\n                return [\"\", token.name];\n            if (!Array.isArray(value) || value.length === 0) {\n                throw new TypeError(`Expected \"${token.name}\" to be a non-empty array`);\n            }\n            return [\n                value\n                    .map((value, index) => {\n                    if (typeof value !== \"string\") {\n                        throw new TypeError(`Expected \"${token.name}/${index}\" to be a string`);\n                    }\n                    return encodeValue(value);\n                })\n                    .join(delimiter),\n            ];\n        };\n    }\n    return (data) => {\n        const value = data[token.name];\n        if (value == null)\n            return [\"\", token.name];\n        if (typeof value !== \"string\") {\n            throw new TypeError(`Expected \"${token.name}\" to be a string`);\n        }\n        return [encodeValue(value)];\n    };\n}\n/**\n * Transform a path into a match function.\n */\nfunction match(path, options = {}) {\n    const { decode = decodeURIComponent, delimiter = DEFAULT_DELIMITER } = options;\n    const { regexp, keys } = pathToRegexp(path, options);\n    const decoders = keys.map((key) => {\n        if (decode === false)\n            return NOOP_VALUE;\n        if (key.type === \"param\")\n            return decode;\n        return (value) => value.split(delimiter).map(decode);\n    });\n    return function match(input) {\n        const m = regexp.exec(input);\n        if (!m)\n            return false;\n        const path = m[0];\n        const params = Object.create(null);\n        for (let i = 1; i < m.length; i++) {\n            if (m[i] === undefined)\n                continue;\n            const key = keys[i - 1];\n            const decoder = decoders[i - 1];\n            params[key.name] = decoder(m[i]);\n        }\n        return { path, params };\n    };\n}\nfunction pathToRegexp(path, options = {}) {\n    const { delimiter = DEFAULT_DELIMITER, end = true, sensitive = false, trailing = true, } = options;\n    const keys = [];\n    const sources = [];\n    const flags = sensitive ? \"\" : \"i\";\n    const paths = Array.isArray(path) ? path : [path];\n    const items = paths.map((path) => path instanceof TokenData ? path : parse(path, options));\n    for (const { tokens } of items) {\n        for (const seq of flatten(tokens, 0, [])) {\n            const regexp = sequenceToRegExp(seq, delimiter, keys);\n            sources.push(regexp);\n        }\n    }\n    let pattern = `^(?:${sources.join(\"|\")})`;\n    if (trailing)\n        pattern += `(?:${escape(delimiter)}$)?`;\n    pattern += end ? \"$\" : `(?=${escape(delimiter)}|$)`;\n    const regexp = new RegExp(pattern, flags);\n    return { regexp, keys };\n}\n/**\n * Generate a flat list of sequence tokens from the given tokens.\n */\nfunction* flatten(tokens, index, init) {\n    if (index === tokens.length) {\n        return yield init;\n    }\n    const token = tokens[index];\n    if (token.type === \"group\") {\n        const fork = init.slice();\n        for (const seq of flatten(token.tokens, 0, fork)) {\n            yield* flatten(tokens, index + 1, seq);\n        }\n    }\n    else {\n        init.push(token);\n    }\n    yield* flatten(tokens, index + 1, init);\n}\n/**\n * Transform a flat sequence of tokens into a regular expression.\n */\nfunction sequenceToRegExp(tokens, delimiter, keys) {\n    let result = \"\";\n    let backtrack = \"\";\n    let isSafeSegmentParam = true;\n    for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n        if (token.type === \"text\") {\n            result += escape(token.value);\n            backtrack += token.value;\n            isSafeSegmentParam || (isSafeSegmentParam = token.value.includes(delimiter));\n            continue;\n        }\n        if (token.type === \"param\" || token.type === \"wildcard\") {\n            if (!isSafeSegmentParam && !backtrack) {\n                throw new TypeError(`Missing text after \"${token.name}\": ${DEBUG_URL}`);\n            }\n            if (token.type === \"param\") {\n                result += `(${negate(delimiter, isSafeSegmentParam ? \"\" : backtrack)}+)`;\n            }\n            else {\n                result += `([\\\\s\\\\S]+)`;\n            }\n            keys.push(token);\n            backtrack = \"\";\n            isSafeSegmentParam = false;\n            continue;\n        }\n    }\n    return result;\n}\nfunction negate(delimiter, backtrack) {\n    if (backtrack.length < 2) {\n        if (delimiter.length < 2)\n            return `[^${escape(delimiter + backtrack)}]`;\n        return `(?:(?!${escape(delimiter)})[^${escape(backtrack)}])`;\n    }\n    if (delimiter.length < 2) {\n        return `(?:(?!${escape(backtrack)})[^${escape(delimiter)}])`;\n    }\n    return `(?:(?!${escape(backtrack)}|${escape(delimiter)})[\\\\s\\\\S])`;\n}\n/**\n * Stringify token data into a path string.\n */\nfunction stringify(data) {\n    return data.tokens\n        .map(function stringifyToken(token, index, tokens) {\n        if (token.type === \"text\")\n            return escapeText(token.value);\n        if (token.type === \"group\") {\n            return `{${token.tokens.map(stringifyToken).join(\"\")}}`;\n        }\n        const isSafe = isNameSafe(token.name) && isNextNameSafe(tokens[index + 1]);\n        const key = isSafe ? token.name : JSON.stringify(token.name);\n        if (token.type === \"param\")\n            return `:${key}`;\n        if (token.type === \"wildcard\")\n            return `*${key}`;\n        throw new TypeError(`Unexpected token: ${token}`);\n    })\n        .join(\"\");\n}\nfunction isNameSafe(name) {\n    const [first, ...rest] = name;\n    if (!ID_START.test(first))\n        return false;\n    return rest.every((char) => ID_CONTINUE.test(char));\n}\nfunction isNextNameSafe(token) {\n    if ((token === null || token === void 0 ? void 0 : token.type) !== \"text\")\n        return true;\n    return !ID_CONTINUE.test(token.value[0]);\n}\n//# sourceMappingURL=index.js.map","import { match } from 'path-to-regexp'\nexport default class Route extends EventTarget {\n  #_settings\n  #enable\n  #active\n  #match\n  constructor($settings = {}) {\n    super()\n    this.#settings = $settings\n  }\n  get #settings() { return this.#_settings }\n  set #settings($settings) {\n    this.#_settings = $settings\n    for(const [$settingKey, $settingVal] of Object.entries($settings)) {\n      Object.defineProperty(this, $settingKey, { value: $settingVal })\n    }\n  }\n  get pathname() { return this.#settings.pathname }\n  get enable() {\n    if(this.#enable !== undefined) return this.#enable\n    if(this.#settings.enable !== undefined) {\n      this.#enable = this.#settings.enable\n    }\n    else { this.#enable = true }\n    return this.#enable\n  }\n  set enable($enable) {\n    if(this.#enable !== $enable) this.#enable = $enable\n  }\n  get active() {\n    if(this.#active !== undefined) return this.#active\n    if(this.#settings.active === undefined) { this.#active = false }\n    return this.#active\n  }\n  set active($active) {\n    if(this.#active !== $active) this.#active = $active\n  }\n  get match() {\n    if(this.#match !== undefined) return this.#match\n    this.#match = match(this.pathname)\n    return this.#match\n  }\n}","export default class RouteEvent extends CustomEvent {\n  #options\n  constructor($type, $options) {\n    super($type, $options)\n    this.#options = $options\n  }\n  get path() { return this.#options.path }\n  get route() { return this.#options.route }\n  get location() { return this.#options.location }\n}","import Core from '../../core/index.js'\nimport { recursiveAssign } from '../../coutil/index.js'\nimport Route from './route/index.js'\nimport RouteEvent from './routeEvent/index.js'\nimport Settings from './settings/index.js' \nimport Options from './options/index.js' \nexport default class LocationRouter extends Core {\n  #window\n  #hashpath\n  #routes\n  #location\n  #route\n  #enable\n  #regularExpressions = {\n    windowLocationOrigin: new RegExp(`^${this.window.location.origin}`)\n  }\n  constructor($settings, $options) {\n    super(Settings($settings), Options($options))\n    if($options.enableEvents === true) this.enableEvents()\n    this.enable = true\n  }\n  get base() { return this.settings.base }\n  get window() {\n    if(this.#window !== undefined) return this.#window\n    this.#window = window\n    return this.#window\n  }\n  get hashpath() {\n    if(this.#hashpath !== undefined) return this.#hashpath\n    this.#hashpath = (\n      this.settings.hashpath === undefined\n    ) ? false\n      : this.settings.hashpath\n    return this.#hashpath\n  }\n  get routes() {\n    if(this.#routes !== undefined) return this.#routes\n    this.#routes = {}\n    const routeEntries = Object.entries(this.settings.routes)\n    for(const [$routePath, $routeSettings] of routeEntries) {\n      this.setRoute($routePath, $routeSettings)\n    }\n    return this.#routes\n  }\n  get location() { return this.#location }\n  get route() { return this.#route }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    if(this.#enable === $enable) return\n    const boundPopstate = this.#popstate.bind(this)\n    if($enable === true) {\n      this.#window.addEventListener('popstate', boundPopstate)\n    }\n    else if($enable === false) {\n      this.#window.removeEventListener('popstate', boundPopstate)\n    }\n    this.#enable = $enable\n  }\n  #popstate() { this.navigate() }\n  navigate($path, $method) {\n    if(\n      typeof $path === 'string' && \n      ['assign', 'replace'].includes($method)\n    ) {\n      this.window?.location[$method]($path)\n      return this\n    }\n    const base = [this.window.origin, this.base].join('')\n    let matchPath, matchRoute\n    if(this.hashpath) {\n      matchPath = this.window.location.hash.slice(1)\n      matchRoute = this.#matchRoute(matchPath)\n    }\n    else {\n      matchPath = this.window.location.href\n      .replace(new RegExp(`^${this.window.origin}`), '')\n      .replace(new RegExp(`^${this.base}`), '')\n      matchRoute = this.#matchRoute(matchPath)\n    }\n    const { route, location } = matchRoute\n    const routeEventOptions = {\n      route: route,\n      location: location,\n      path: matchPath,\n    }\n    const preterRoute = this.route\n    if(preterRoute) { preterRoute.active = false }\n    if(route && route?.enable) {\n      route.active = true\n      location.state = this.window.history.state\n      location.base = this.base\n      location.pathname = this.window.location.pathname\n      .replace(new RegExp(`^${this.base}`), '')\n      location.hash = this.window.location.hash\n      location.search = this.window.location.search\n      delete location.path\n      this.#route = route\n      this.#location = location\n      this.dispatchEvent(\n        new RouteEvent(\"route\", routeEventOptions)\n      )\n      this.dispatchEvent(\n        new RouteEvent(`route:${route.name}`, routeEventOptions)\n      )\n    }\n    else {\n      this.#route = null\n      this.#location = null\n      this.dispatchEvent(\n        new RouteEvent(\"nonroute\", routeEventOptions)\n      )\n    }\n    return this\n  }\n  // Route Ability\n  enableRoute($path) {\n    const route = this.getRoute($path)\n    route.enable = true\n    return route\n  }\n  disableRoute($path) {\n    const route = this.getRoute($path)\n    route.enable = false\n    return route\n  }\n  // Route Ministration \n  setRoute($routePath, $routeSettings) {\n    const routeSettings = recursiveAssign({\n      pathname: $routeSettings.pathname || $routePath,\n    }, $routeSettings)\n    this.#routes[$routePath] = new Route(routeSettings)\n    return this.#routes[$routePath]\n  }\n  getRoute($routePath) {\n    return this.#routes[$routePath]\n  }\n  deleteRoute($routePath) {\n    delete this.#routes[$routePath]\n    return this.#routes[$routePath]\n  }\n  #matchRoute($path) {\n    const routeEntries = Object.entries(this.routes)\n    let routeEntryIndex = 0\n    let route = null\n    let location = null\n    iterateMatchEntries: \n    while(routeEntryIndex < routeEntries.length) {\n      const [$routePath, $route] = routeEntries[routeEntryIndex]\n      location = $route.match($path) || null\n      if(location) {\n        route = $route\n        break iterateMatchEntries\n      }\n      routeEntryIndex++\n    }\n    return { route, location }\n  }\n}","export default ($settings) => Object.assign({\n  routes: {}\n}, $settings)","export default ($options) => Object.assign({\n  enableEvents: true\n}, $options)","export default class SocketEvent extends CustomEvent {\n  #settings\n  #socket\n  constructor($type, $settings, $socket) {\n    super($type, $settings)\n    this.#settings = $settings\n    this.#socket = $socket\n  }\n  get isBinary() { return this.#settings.isBinary }\n  get message() { return this.#settings.message }\n  get detail() { return this.#settings.detail }\n}","import Settings from './settings/index.js'\nexport default class MessageAdapter extends EventTarget {\n  #settings\n  #messages\n  #message\n  constructor($settings) {\n    super()\n    this.#settings = $settings\n  }\n  get name() { return this.#settings.name }\n  get messages() {\n    if(this.#messages !== undefined) {\n      return this.#messages\n    }\n    if(this.#settings.messages !== undefined) {\n      this.#messages = this.#settings.messages\n    }\n    else {\n      this.#messages = {}\n    }\n    return this.#messages\n  }\n  get message() {\n    if(this.#message !== undefined) {\n      return this.#message\n    }\n    this.#message = this.#settings.message\n    return this.#message\n  }\n}","import SocketEvent from './event/index.js'\nimport Core from '../../core/index.js'\nimport MessageAdapter from './messageAdapter/index.js'\nimport Settings from './settings/index.js'\nimport Options from './options/index.js'\nexport default class SocketRouter extends Core {\n  #webSocket\n  #active = false\n  #messageAdapters\n  #url\n  #boundMessage\n  constructor($settings = {}, $options = {}) {\n    super(Settings($settings), Options($options))\n    this.#boundMessage = this.#message.bind(this)\n    Object.defineProperties(this, {\n      webSocket: {\n        enumerable: true,\n        get() {\n          if(this.#webSocket !== undefined) return this.#webSocket\n          this.#webSocket = new WebSocket(this.url)\n          this.#webSocket.addEventListener('message', this.#boundMessage)\n          return this.#webSocket\n        },\n      }\n    })\n    this.active = this.settings.active\n    if(this.options.enableEvents === true) { this.enableEvents() }\n  }\n  get active() { return this.#active }\n  set active($active) {\n    if(this.#active === $active) { return }\n    if($active === true) {\n      this.webSocket\n    }\n    else if($active === false) {\n      this.#webSocket = undefined\n    }\n    this.#active = $active\n  }\n  get path() { return this.settings.path }\n  get url() {\n    if(this.#url !== undefined) { return this.#url }\n    let { protocol, host, port } = this.settings\n    let base\n    if(protocol && host && port) {\n        base = [protocol, '//', host, ':', port].join('')\n      }\n    else {\n      base = window.location.url.origin\n    }\n    this.#url = new URL(this.path, base)\n    return this.#url\n  }\n  #message($data, $isBinary) {\n    iterateAdapters: \n    for(const $messageAdapter of this.messageAdapters) {\n      try {\n        const message = $messageAdapter.message($data, $isBinary)\n        const { type, detail } = message\n        const messageEvent = new SocketEvent(type, {\n          detail, message: $data, isBinary: $isBinary\n        }, this)\n        this.webSocket.dispatchEvent(messageEvent)\n      }\n      catch($err) {  console.error($err)  }\n    }\n  }\n  get messageAdapters() {\n    if(this.#messageAdapters !== undefined) { return this.#messageAdapters }\n    const messageAdapters = []\n    for(const $adapter of this.settings.messageAdapters) {\n      let adapter\n      if($adapter instanceof MessageAdapter) { adapter = adapter }\n      else { adapter = new MessageAdapter($adapter, this) }\n      messageAdapters.push(adapter)\n    }\n    this.#messageAdapters = messageAdapters\n    return this.#messageAdapters\n  }\n  send() { this.webSocket.send(...arguments) }\n}","export default ($settings) => Object.assign({\n  active: false, // Boolean\n  /*\n  name: String, // \"$name\",\n  protocol: String, // [\"wss:\", \"ws:\"],\n  port: Number, // 3338\n  host: String, // \"demonstrament.mvc-framework\",\n  path: String, // '/',\n  open: function() {},\n  close: function() {},\n  error: function() {},\n  messageAdapters: [\n    // ['MessageAdapter', $MessageAdapter]\n  ],\n  */\n}, $settings)","export default ($options) => Object.assign({\n  events: false,\n  enableEvents: true, // Boolean\n}, $options)","import Core from '../core/index.js'\nimport Settings from './settings/index.js'\nimport Options from './options/index.js'\nimport Model from '../model/index.js'\nimport View from '../view/index.js'\nimport { LocationRouter, FetchRouter, SocketRouter } from '../routers/index.js'\nfunction Instate($target, $property, $value, $definition) {\n  const definition = $definition\n  const parent = $target\n  const path = ($target?.path) ? [\n    $target.path, $definition.name, $property\n  ].join('.') : [$definition.name, $property].join('.')\n  if($value && ValidClasses.includes($value.constructor)) {\n    $value.mount({ path, parent })\n  }\n  else if(Array.isArray($value)) {\n    const { Class } = definition\n    if(Class === Model) {\n      let [properties, schema, options] = $value\n      schema = schema || null\n      options = options || {}\n      Object.assign(options, {\n        definition, parent, path\n      })\n      $value = new Class(properties, schema, options)\n    }\n    else if(ValidClasses.includes(Class)) {\n      if($value.length === 2) {\n        const [settings, options] = $value\n        Object.assign(options, {\n          definition, parent, path\n        })\n        $value = new Class(settings, options)\n      }\n      if($value.length === 1) {\n        const [settings] = $value\n        $value = new Class(settings)\n      }\n    }\n  }\n  return $value\n}\nfunction Deinstate($target, $property, $definition) { return }\nclass Control extends Core {\n  static propertyClasses = [{\n    name: \"models\", targetType: 'Object',\n    administer: \"addModels\", deadminister: \"removeModels\",\n    instate: Instate, deinstate: Deinstate, Class: Model,\n  }, {\n    name: \"views\", targetType: 'Object',\n    administer: \"addViews\", deadminister: \"removeViews\",\n    instate: Instate, deinstate: Deinstate, Class: View,\n  }, {\n    name: \"locationRouters\", targetType: 'Object',\n    administer: \"addLocationRouters\", deadminister: \"removeLocationRouters\",\n    instate: Instate, deinstate: Deinstate, Class: LocationRouter,\n  }, {\n    name: \"fetchRouters\", targetType: 'Object',\n    administer: \"addFetchRouters\", deadminister: \"removeFetchRouters\",\n    instate: Instate, deinstate: Deinstate, Class: FetchRouter,\n  }, {\n    name: \"socketRouters\", targetType: 'Object',\n    administer: \"addSocketRouters\", deadminister: \"removeSocketRouters\",\n    instate: Instate, deinstate: Deinstate, Class: SocketRouter,\n  }, {\n    name: \"controls\", targetType: 'Object',\n    administer: \"addControls\", deadminister: \"removeControls\",\n    instate: Instate, deinstate: Deinstate, Class: Control,\n  }]\n  constructor($settings = {}, $options = {}) {\n    super(\n      Settings(Object.assign({}, $settings)),\n      Options(Object.assign({\n        propertyClasses: Control.propertyClasses,\n      }, $options)),\n    )\n  }\n}\nconst ValidClasses = [Model, View, Control, LocationRouter, FetchRouter, SocketRouter]\nexport default Control","export default ($settings) => {\n  const settings = Object.assign({\n    models: {},\n    views: {},\n    controls: {},\n    fetchRouters: {},\n    locationRouters: {},\n  }, $settings)\n  return settings\n}\n","export default ($options) => {\n  const options = Object.assign({\n    events: false,\n    enableEvents: true,\n  }, $options)\n  return options\n}","const defaultAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n};\nconst getAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target.get($property) }\n};\nvar accessors = {\n  default: defaultAccessor,\n  get: getAccessor,\n};\n\nfunction expandEvents($propEvents, $scopeKey = ':scope') {\n  if(\n    Array.isArray($propEvents) ||\n    $propEvents === undefined\n  ) { return $propEvents }\n  const propEvents = [];\n  for(const [\n    $propEventSettings, $propEventListener\n  ] of Object.entries($propEvents)) {\n    const propEventSettings = $propEventSettings.trim().split(' ');\n    let path, type, listener;\n    if(propEventSettings.length === 1) {\n      path = $scopeKey;\n      type = propEventSettings[0];\n    }\n    else if(propEventSettings.length > 1) {\n      path = propEventSettings[0];\n      type = propEventSettings[1];\n    }\n    if(Array.isArray($propEventListener)) {\n      listener = $propEventListener[0];\n      $propEventListener[1];\n    }\n    else {\n      listener = $propEventListener;\n    }\n    const propEvent = {\n      type,\n      path,\n      listener,\n      enable: false,\n    };\n    propEvents.push(propEvent);\n  }\n  return propEvents\n}\n\nconst Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'undefined': undefined,\n  'null': null,\n};\nconst PrimitiveKeys = Object.keys(Primitives);\nconst PrimitiveValues = Object.values(Primitives);\nconst Objects = {\n  'object': Object,\n  'array': Array,\n};\nconst ObjectKeys$1 = Object.keys(Objects);\nconst ObjectValues = Object.values(Objects);\nconst Types = Object.assign({}, Primitives, Objects);\nconst TypeKeys$1 = Object.keys(Types);\nconst TypeValues = Object.values(Types);\nconst TypeMethods = [\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n];\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ObjectKeys: ObjectKeys$1,\n  ObjectValues: ObjectValues,\n  Objects: Objects,\n  PrimitiveKeys: PrimitiveKeys,\n  PrimitiveValues: PrimitiveValues,\n  Primitives: Primitives,\n  TypeKeys: TypeKeys$1,\n  TypeMethods: TypeMethods,\n  TypeValues: TypeValues,\n  Types: Types\n});\n\nvar regularExpressions$3 = {\n  quotationEscape: /\\.(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,\n};\n\nconst typeOf$6 = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nfunction subpaths($path) {\n  return $path.split(\n    new RegExp(regularExpressions$3.quotationEscape)\n  )\n}\nfunction keypaths($path) {\n  const _subpaths = subpaths($path);\n  _subpaths.pop();\n  return _subpaths\n}\nfunction key($path) { return subpaths($path).pop() }\nfunction root($path) { return subpaths($path).shift() }\nfunction typeofRoot($path) { return (\n  Number(root($path))\n) ? 'array' : 'object' }\nfunction parse($path) {\n  return {\n    subpaths: subpaths($path),\n    keypaths: keypaths($path),\n    key: key($path),\n    root: root($path),\n    typeofRoot: typeofRoot($path),\n  }\n}\n\nfunction typedObjectLiteral$e($value) {\n  let _typedObjectLiteral;\n  const typeOfValue = typeOf$6($value);\n  if(typeOfValue === 'object') { _typedObjectLiteral = {}; }\n  else if(typeOfValue === 'array') { _typedObjectLiteral = []; }\n  else if(typeOfValue === 'string') {\n    if($value === 'object') { _typedObjectLiteral = {}; }\n    else if($value === 'array') { _typedObjectLiteral = []; }\n  }\n  else { _typedObjectLiteral = undefined; }\n  return _typedObjectLiteral\n}\n\nfunction get($path, $source) {\n  const subpaths = $path.split(new RegExp(regularExpressions$3.quotationEscape));\n  const key = subpaths.pop();\n  let subtarget = $source;\n  for(const $subpath of subpaths) { subtarget = subtarget[$subpath]; }\n  return subtarget[key]\n}\nfunction set($path, $source) {\n  const {\n    keypaths, key, typeofRoot\n  } = parse($path);\n  const target = typedObjectLiteral$e(typeofRoot);\n  let subtarget = target;\n  for(const $subpath of keypaths) {\n    if(Number($subpath)) { subtarget[$subpath] = []; }\n    else { subtarget[$subpath] = {}; }\n    subtarget = subtarget[$subpath];\n  }\n  subtarget[key] = $source;\n  return target\n}\n\nfunction expandTree($source, $property) {\n  const typeOfProperty = typeOf$6($property);\n  const typeOfSource = typeOf$6($source);\n  if(\n    !['string', 'function'].includes(typeOfProperty) ||\n    !['array', 'object'].includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral$e($source);\n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = set($property, $sourceValue); }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue); }\n    if(target[$sourceKey][$property] && typeof target[$sourceKey][$property] === 'object') {\n      target[$sourceKey][$property] = expandTree(target[$sourceKey][$property], $property);\n    }\n  }\n  return target\n}\n\nfunction impandTree$1($source, $property) {\n  const typeOfProperty = typeOf$6($property);\n  const typeOfSource = typeOf$6($source);\n  if(\n    !['string', 'function'].includes(typeOfProperty) ||\n    !['array', 'object'].includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral$e($source);\n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = get($property, $sourceValue); }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue); }\n    if(target[$sourceKey] && typeof target[$sourceKey] === 'object') {\n      target[$sourceKey] = impandTree$1(target[$sourceKey], $property);\n    }\n  }\n  return target\n}\n\nconst Options$2 = {\n  depth: 0,\n  maxDepth: 10,\n  accessors: [accessors.default],\n};\nfunction propertyDirectory($object, $options) {\n  const _propertyDirectory = [];\n  const options = Object.assign({}, Options$2, $options);\n  options.depth++;\n  if(options.depth > options.maxDepth) { return _propertyDirectory }\n  iterateAccessors: \n  for(const $accessor of options.accessors) {\n    const object = $accessor($object);\n    if(!object) continue iterateAccessors\n    for(const [$key, $value] of Object.entries(object)) {\n      if(!options.values) { _propertyDirectory.push($key); }\n      else if(options.values) { _propertyDirectory.push([$key, $value]); }\n      if(\n        typeof $value === 'object' &&\n        $value !== null &&\n        $value !== object\n      ) {\n        const subtargets = propertyDirectory($value, options);\n        if(!options.values) {\n          for(const $subtarget of subtargets) {\n            const path = [$key, $subtarget].join('.');\n            _propertyDirectory.push(path);\n          }\n        }\n        else if(options.values) {\n          for(const [$subtargetKey, $subtarget] of subtargets) {\n            const path = [$key, $subtargetKey].join('.');\n            _propertyDirectory.push([path, $subtarget]);\n          }\n        }\n      }\n    }\n  }\n  return _propertyDirectory\n}\n\nfunction recursiveAssign$f($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf$6($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf$6($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssign$f($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nfunction recursiveAssignConcat($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf$6($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf$6($sourcePropertyValue);\n      if( \n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = recursiveAssignConcat($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else if(\n        typeOfTargetPropertyValue === 'array' &&\n        typeOfSourcePropertyValue === 'array'\n      ) {\n        $target[$sourcePropertyKey] = $target[$sourcePropertyKey].concat($sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nfunction recursiveFreeze$1($target) {\n  for(const [$propertyKey, $propertyValue] of Object.entries($target)) {\n    if($propertyValue && typeof $propertyValue === 'object') {\n      recursiveFreeze$1($propertyValue);\n    }\n  }\n  return Object.freeze($target)\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  accessors: accessors,\n  expandEvents: expandEvents,\n  expandTree: expandTree,\n  impandTree: impandTree$1,\n  propertyDirectory: propertyDirectory,\n  recursiveAssign: recursiveAssign$f,\n  recursiveAssignConcat: recursiveAssignConcat,\n  recursiveFreeze: recursiveFreeze$1,\n  regularExpressions: regularExpressions$3,\n  typeOf: typeOf$6,\n  typedObjectLiteral: typedObjectLiteral$e,\n  variables: index$1\n});\n\nvar Settings$1 = ($settings = {}) => {\n  const Settings = {\n    events: {},\n    enableEvents: false,\n    propertyDefinitions: {\n      getEvents: 'getEvents',\n      addEvents: 'addEvents',\n      removeEvents: 'removeEvents',\n      enableEvents: 'enableEvents',\n      disableEvents: 'disableEvents',\n      reenableEvents: 'reenableEvents',\n      emitEvents: 'emitEvents',\n    },\n  };\n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'propertyDefinitions':\n        Settings[$settingKey] = Object.assign(Settings[$settingKey], $settingValue);\n        break\n      default: \n        Settings[$settingKey] = $settingValue;\n        break\n    }\n  }\n  return Settings\n};\n\nfunction handleNoCommaBraces(span) {\n    if (span.length < 3) {\n        return \"{\" + span + \"}\";\n    }\n    var separatorI = -1;\n    for (var i = 2; i < span.length; i++) {\n        if (span[i] === '.' && span[i - 1] === '.' && (i < 2 || span[i - 2] !== '\\\\')) {\n            if (separatorI > -1) {\n                return \"{\" + span + \"}\";\n            }\n            separatorI = i - 1;\n        }\n    }\n    if (separatorI > -1) {\n        var rangeStart = span.substr(0, separatorI);\n        var rangeEnd = span.substr(separatorI + 2);\n        if (rangeStart.length > 0 && rangeEnd.length > 0) {\n            return \"[\" + span.substr(0, separatorI) + \"-\" + span.substr(separatorI + 2) + \"]\";\n        }\n    }\n    return \"{\" + span + \"}\";\n}\nfunction expand(pattern) {\n    if (typeof pattern !== 'string') {\n        throw new TypeError(\"A pattern must be a string, but \" + typeof pattern + \" given\");\n    }\n    var scanning = false;\n    var openingBraces = 0;\n    var closingBraces = 0;\n    var handledUntil = -1;\n    var results = [''];\n    var alternatives = [];\n    var span;\n    for (var i = 0; i < pattern.length; i++) {\n        var char = pattern[i];\n        if (char === '\\\\') {\n            i++;\n            continue;\n        }\n        if (char === '{') {\n            if (scanning) {\n                openingBraces++;\n            }\n            else if (i > handledUntil && !openingBraces) {\n                span = pattern.substring(handledUntil + 1, i);\n                for (var j = 0; j < results.length; j++) {\n                    results[j] += span;\n                }\n                alternatives = [];\n                handledUntil = i;\n                scanning = true;\n                openingBraces++;\n            }\n            else {\n                openingBraces--;\n            }\n        }\n        else if (char === '}') {\n            if (scanning) {\n                closingBraces++;\n            }\n            else if (closingBraces === 1) {\n                span = pattern.substring(handledUntil + 1, i);\n                if (alternatives.length > 0) {\n                    var newResults = [];\n                    alternatives.push(expand(span));\n                    for (var j = 0; j < results.length; j++) {\n                        for (var k = 0; k < alternatives.length; k++) {\n                            for (var l = 0; l < alternatives[k].length; l++) {\n                                newResults.push(results[j] + alternatives[k][l]);\n                            }\n                        }\n                    }\n                    results = newResults;\n                }\n                else {\n                    span = handleNoCommaBraces(span);\n                    for (var j = 0; j < results.length; j++) {\n                        results[j] += span;\n                    }\n                }\n                handledUntil = i;\n                closingBraces--;\n            }\n            else {\n                closingBraces--;\n            }\n        }\n        else if (!scanning && char === ',' && closingBraces - openingBraces === 1) {\n            span = pattern.substring(handledUntil + 1, i);\n            alternatives.push(expand(span));\n            handledUntil = i;\n        }\n        if (scanning && (closingBraces === openingBraces || i === pattern.length - 1)) {\n            scanning = false;\n            i = handledUntil - 1;\n        }\n    }\n    if (handledUntil === -1) {\n        return [pattern];\n    }\n    var unhandledFrom = pattern[handledUntil] === '{' ? handledUntil : handledUntil + 1;\n    if (unhandledFrom < pattern.length) {\n        span = pattern.substr(unhandledFrom);\n        for (var j = 0; j < results.length; j++) {\n            results[j] += span;\n        }\n    }\n    return results;\n}\n\nfunction negate(pattern, options) {\n    var supportNegation = options['!'] !== false;\n    var supportParens = options['()'] !== false;\n    var isNegated = false;\n    var i;\n    if (supportNegation) {\n        for (i = 0; i < pattern.length && pattern[i] === '!'; i++) {\n            if (supportParens && pattern[i + 1] === '(') {\n                i--;\n                break;\n            }\n            isNegated = !isNegated;\n        }\n        if (i > 0) {\n            pattern = pattern.substr(i);\n        }\n    }\n    return { pattern: pattern, isNegated: isNegated };\n}\n\nfunction escapeRegExpChar(char) { if (char === '-' ||\n    char === '^' ||\n    char === '$' ||\n    char === '+' ||\n    char === '.' ||\n    char === '(' ||\n    char === ')' ||\n    char === '|' ||\n    char === '[' ||\n    char === ']' ||\n    char === '{' ||\n    char === '}' ||\n    char === '*' ||\n    char === '?' ||\n    char === '\\\\') {\n    return \"\\\\\" + char;\n}\nelse {\n    return char;\n} }\nfunction escapeRegExpString(str) {\n    var result = '';\n    for (var i = 0; i < str.length; i++) {\n        result += escapeRegExpChar(str[i]);\n    }\n    return result;\n}\n\nfunction Pattern(source, options, excludeDot) {\n    var separator = typeof options.separator === 'undefined' ? true : options.separator;\n    var separatorSplitter = '';\n    var separatorMatcher = '';\n    var wildcard = '.';\n    if (separator === true) {\n        separatorSplitter = '/';\n        separatorMatcher = '[/\\\\\\\\]';\n        wildcard = '[^/\\\\\\\\]';\n    }\n    else if (separator) {\n        separatorSplitter = separator;\n        separatorMatcher = escapeRegExpString(separatorSplitter);\n        if (separatorMatcher.length > 1) {\n            separatorMatcher = \"(?:\" + separatorMatcher + \")\";\n            wildcard = \"((?!\" + separatorMatcher + \").)\";\n        }\n        else {\n            wildcard = \"[^\" + separatorMatcher + \"]\";\n        }\n    }\n    else {\n        wildcard = '.';\n    }\n    var requiredSeparator = separator ? separatorMatcher + \"+?\" : '';\n    var optionalSeparator = separator ? separatorMatcher + \"*?\" : '';\n    var segments = separator ? source.split(separatorSplitter) : [source];\n    var support = {\n        qMark: options['?'] !== false,\n        star: options['*'] !== false,\n        globstar: separator && options['**'] !== false,\n        brackets: options['[]'] !== false,\n        extglobs: options['()'] !== false,\n        excludeDot: excludeDot && options.excludeDot !== false,\n    };\n    return {\n        source: source,\n        segments: segments,\n        options: options,\n        separator: separator,\n        separatorSplitter: separatorSplitter,\n        separatorMatcher: separatorMatcher,\n        optionalSeparator: optionalSeparator,\n        requiredSeparator: requiredSeparator,\n        wildcard: wildcard,\n        support: support,\n    };\n}\nfunction Segment(source, pattern, isFirst, isLast) { return {\n    source: source,\n    isFirst: isFirst,\n    isLast: isLast,\n    end: source.length - 1,\n}; }\nfunction Result() {\nreturn {\n    match: '',\n    unmatch: '',\n    useUnmatch: false,\n}; }\nfunction State(pattern, segment, result) { return {\n    pattern: pattern,\n    segment: segment,\n    result: result,\n    openingBracket: segment.end + 1,\n    closingBracket: -1,\n    openingParens: 0,\n    closingParens: 0,\n    parensHandledUntil: -1,\n    extglobModifiers: [],\n    scanningForParens: false,\n    escapeChar: false,\n    addToMatch: true,\n    addToUnmatch: pattern.support.extglobs,\n    dotHandled: false,\n    i: -1,\n    char: '',\n    nextChar: '',\n}; }\n\nvar EXCLUDE_DOT_PATTERN = '(?!\\\\.)';\nfunction add(state, addition, excludeDot) {\n    if (state.addToUnmatch) {\n        state.result.unmatch += addition;\n    }\n    if (state.addToMatch) {\n        if (excludeDot && !state.dotHandled) {\n            addition = EXCLUDE_DOT_PATTERN + addition;\n        }\n        state.dotHandled = true;\n        state.result.match += addition;\n    }\n    return state.result;\n}\nfunction convertSegment(pattern, segment, result) {\n    var support = pattern.support;\n    var state = State(pattern, segment, result);\n    var separatorMatcher = segment.isLast\n        ? pattern.optionalSeparator\n        : pattern.requiredSeparator;\n    if (!support.excludeDot) {\n        state.dotHandled = true;\n    }\n    if (segment.end === -1) {\n        return segment.isLast && !segment.isFirst ? result : add(state, separatorMatcher);\n    }\n    if (support.globstar && segment.source === '**') {\n        var prefix = !state.dotHandled ? EXCLUDE_DOT_PATTERN : '';\n        var globstarSegment = prefix + pattern.wildcard + \"*?\" + separatorMatcher;\n        return add(state, \"(?:\" + globstarSegment + \")*?\");\n    }\n    while (++state.i <= segment.end) {\n        state.char = state.segment.source[state.i];\n        state.nextChar = state.i < segment.end ? segment.source[state.i + 1] : '';\n        if (state.char === '\\\\') {\n            if (state.i < state.segment.end) {\n                state.escapeChar = true;\n                continue;\n            }\n            else {\n                state.char = '';\n            }\n        }\n        var pattern = state.pattern, segment = state.segment, char = state.char, i = state.i;\n        if (pattern.support.brackets && !state.scanningForParens) {\n            if (i > state.openingBracket && i <= state.closingBracket) {\n                if (state.escapeChar) {\n                    add(state, escapeRegExpChar(char));\n                }\n                else if (i === state.closingBracket) {\n                    add(state, ']');\n                    state.openingBracket = segment.source.length;\n                }\n                else if (char === '-' && i === state.closingBracket - 1) {\n                    add(state, '\\\\-');\n                }\n                else if (char === '!' && i === state.openingBracket + 1) {\n                    add(state, '^');\n                }\n                else if (char === ']') {\n                    add(state, '\\\\]');\n                }\n                else {\n                    add(state, char);\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (i > state.openingBracket) {\n                if (char === ']' &&\n                    !state.escapeChar &&\n                    i > state.openingBracket + 1 &&\n                    i > state.closingBracket) {\n                    state.closingBracket = i;\n                    state.i = state.openingBracket;\n                    if (pattern.separator) {\n                        add(state, \"(?!\" + pattern.separatorMatcher + \")[\", true);\n                    }\n                    else {\n                        add(state, '[', true);\n                    }\n                }\n                else if (i === segment.end) {\n                    add(state, '\\\\[');\n                    state.i = state.openingBracket;\n                    state.openingBracket = segment.source.length;\n                    state.closingBracket = segment.source.length;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (char === '[' &&\n                !state.escapeChar &&\n                i > state.closingBracket &&\n                i < segment.end) {\n                state.openingBracket = i;\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        if (state.pattern.support.extglobs) {\n            var extglobModifiers = state.extglobModifiers, char = state.char, nextChar = state.nextChar, i = state.i;\n            if (nextChar === '(' &&\n                !state.escapeChar &&\n                (char === '@' || char === '?' || char === '*' || char === '+' || char === '!')) {\n                if (state.scanningForParens) {\n                    state.openingParens++;\n                }\n                else if (i > state.parensHandledUntil && !state.closingParens) {\n                    state.parensHandledUntil = i;\n                    state.scanningForParens = true;\n                    state.openingParens++;\n                }\n                else if (state.closingParens >= state.openingParens) {\n                    if (char === '!') {\n                        state.addToMatch = true;\n                        state.addToUnmatch = false;\n                        add(state, state.pattern.wildcard + \"*?\", true);\n                        state.addToMatch = false;\n                        state.addToUnmatch = true;\n                        state.result.useUnmatch = true;\n                    }\n                    extglobModifiers.push(char);\n                    add(state, '(?:', true);\n                    state.openingParens--;\n                    state.i++;\n                    continue;\n                }\n                else {\n                    state.openingParens--;\n                }\n            }\n            else if (char === ')' && !state.escapeChar) {\n                if (state.scanningForParens) {\n                    state.closingParens++;\n                }\n                else if (extglobModifiers.length) {\n                    var modifier_1 = extglobModifiers.pop();\n                    if (modifier_1 === '!' && extglobModifiers.indexOf('!') !== -1) {\n                        throw new Error(\"Nested negated extglobs aren't supported\");\n                    }\n                    modifier_1 = modifier_1 === '!' || modifier_1 === '@' ? '' : modifier_1;\n                    add(state, \")\" + modifier_1);\n                    state.addToMatch = true;\n                    state.addToUnmatch = true;\n                    state.closingParens--;\n                    continue;\n                }\n            }\n            else if (char === '|' && state.closingParens &&\n                !state.scanningForParens &&\n                !state.escapeChar) {\n                add(state, '|');\n                continue;\n            }\n            if (state.scanningForParens) {\n                if (state.closingParens === state.openingParens || i === state.segment.end) {\n                    state.scanningForParens = false;\n                    state.i = state.parensHandledUntil - 1;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        var pattern = state.pattern;\n        var support = pattern.support;\n        if (!state.escapeChar && support.star && state.char === '*') {\n            if (state.i === state.segment.end || state.nextChar !== '*') {\n                add(state, pattern.wildcard + \"*?\", true);\n            }\n        }\n        else if (!state.escapeChar && support.qMark && state.char === '?') {\n            add(state, pattern.wildcard, true);\n        }\n        else {\n            add(state, escapeRegExpChar(state.char));\n        }\n        state.escapeChar = false;\n    }\n    return add(state, separatorMatcher);\n}\nfunction convert(source, options, excludeDot) {\n    var pattern = Pattern(source, options, excludeDot);\n    var result = Result();\n    var segments = pattern.segments;\n    for (var i = 0; i < segments.length; i++) {\n        var segment = Segment(segments[i], pattern, i === 0, i === segments.length - 1);\n        convertSegment(pattern, segment, result);\n    }\n    if (result.useUnmatch) {\n        return \"(?!^\" + result.unmatch + \"$)\" + result.match;\n    }\n    else {\n        return result.match;\n    }\n}\n\nfunction flatMap(array, predicate) {\n    var results = [];\n    for (var i = 0; i < array.length; i++) {\n        var mappedValue = predicate(array[i]);\n        for (var j = 0; j < mappedValue.length; j++) {\n            results.push(mappedValue[j]);\n        }\n    }\n    return results;\n}\nfunction compile(patterns, options) {\n    patterns = Array.isArray(patterns) ? patterns : [patterns];\n    if (options['{}'] !== false) {\n        patterns = flatMap(patterns, expand);\n    }\n    var positiveResults = [];\n    var negativeResults = [];\n    var result = '';\n    for (var i = 0; i < patterns.length; i++) {\n        var negatedPattern = negate(patterns[i], options);\n        var convertedPattern = convert(negatedPattern.pattern, options, !negatedPattern.isNegated);\n        if (negatedPattern.isNegated) {\n            negativeResults.push(convertedPattern);\n        }\n        else {\n            positiveResults.push(convertedPattern);\n        }\n    }\n    if (negativeResults.length) {\n        result = \"(?!(?:\" + negativeResults.join('|') + \")$)\";\n    }\n    if (positiveResults.length > 1) {\n        result += \"(?:\" + positiveResults.join('|') + \")\";\n    }\n    else if (positiveResults.length === 1) {\n        result += positiveResults[0];\n    }\n    else if (result.length) {\n        result += convert('**', options, true);\n    }\n    return \"^\" + result + \"$\";\n}\nfunction isMatch(regexp, sample) { if (typeof sample !== 'string') {\n    throw new TypeError(\"Sample must be a string, but \" + typeof sample + \" given\");\n} return regexp.test(sample); }\n/**\n * Compiles one or more glob patterns into a RegExp and returns an isMatch function.\n * The isMatch function takes a sample string as its only argument and returns true\n * if the string matches the pattern(s).\n *\n * ```js\n * outmatch('src/*.js')('src/index.js') //=> true\n * ```\n *\n * ```js\n * const isMatch = outmatch('*.example.com', '.')\n * isMatch('foo.example.com') //=> true\n * isMatch('foo.bar.com') //=> false\n * ```\n */\nfunction outmatch(pattern, options) {\n    if (typeof pattern !== 'string' && !Array.isArray(pattern)) {\n        throw new TypeError(\"The first argument must be a single pattern string or an array of patterns, but \" + typeof pattern + \" given\");\n    }\n    if (typeof options === 'string' || typeof options === 'boolean') {\n        options = { separator: options };\n    }\n    if (arguments.length === 2 &&\n        !(typeof options === 'undefined' ||\n            (typeof options === 'object' && options !== null && !Array.isArray(options)))) {\n        throw new TypeError(\"The second argument must be an options object or a string/boolean separator, but \" + typeof options + \" given\");\n    }\n    options = options || {};\n    if (options.separator === '\\\\') {\n        throw new Error('\\\\ is not a valid separator');\n    }\n    var regexpPattern = compile(pattern, options);\n    var regexp = new RegExp(regexpPattern, options.flags);\n    var fn = isMatch.bind(null, regexp);\n    fn.options = options;\n    fn.pattern = pattern;\n    fn.regexp = regexp;\n    return fn;\n}\n\nvar Settings = ($settings = {}) => {\n  const Settings = {\n    enable: false,\n    accessors: [accessors.default],\n    propertyDirectory: { scopeKey: $settings.scopeKey, maxDepth: 10 },\n    assign: 'addEventListener', deassign: 'removeEventListener', transsign: 'dispatchEvent',\n    bindListener: true,\n    scopeKey: ':scope',\n    errorLog: false,\n    methods: {\n      assign: {\n        addEventListener: function addEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition;\n          const { options, useCapture } = settings;\n          return $target['addEventListener'](type, listener, options || useCapture)\n        },\n        on: function on($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['on'](type, listener)\n        },\n        once: function once($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['once'](type, listener)\n        },\n      }, \n      deassign: {\n        removeEventListener: function removeEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition;\n          const { options, useCapture } = settings;\n          return $target['removeEventListener'](type, listener, options || useCapture)\n        },\n        off: function off($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['off'](type, listener)\n        },\n      },\n      transsign: {\n        dispatchEvent: function dispatchEvent($eventDefinition, $target, $event) {\n          return $target['dispatchEvent']($event)\n        },\n        emit: function emit($eventDefinition, $target, $type, ...$arguments) {\n          return $target['emit']($type, ...$arguments)\n        },\n      },\n    },\n  };\n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'propertyDirectory':\n        Settings[$settingKey] = Object.assign(Settings[$settingKey], $settingValue);\n        break\n      case 'accessors':\n        Settings[$settingKey] = $settingValue;\n        Settings.propertyDirectory[$settingKey] = $settingValue;\n        break\n      case 'methods': \n        Settings[$settingKey] = recursiveAssign$f(Settings[$settingKey], $settingValue);\n        break\n      case 'enableEvents': break\n      default: \n        Settings[$settingKey] = $settingValue;\n        break\n    }\n  }\n  return Settings\n};\n\nclass EventDefinition {\n  #settings\n  #context\n  #listener\n  #enable = false\n  #path\n  #assigned = []\n  #deassigned = []\n  #transsigned = []\n  #nontranssigned = []\n  #_targets = []\n  #_assign\n  #_deassign\n  #_transsign\n  constructor($settings, $context) { \n    if(!$settings || !$context) { return this }\n    this.#settings = Settings($settings);\n    this.#context = $context;\n    this.enable = this.settings.enable;\n  }\n  get settings() { return this.#settings }\n  get path() { return this.settings.path }\n  get type() { return this.settings.type }\n  get listener() {\n    if(this.#listener !== undefined) { return this.#listener }\n    const listener = this.settings.listener;\n    if(this.settings.bindListener === true) {\n      this.#listener = listener.bind(this.#context);\n    }\n    else { this.#listener = listener; }\n    return this.#listener\n  }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    const targets = this.#targets;\n    const assigned = this.#assigned;\n    const deassigned = this.#deassigned;\n    assigned.length = 0;\n    deassigned.length = 0;\n    iterateTargetElements: \n    for(const $targetElement of targets) {\n      const { path, target, enable } = $targetElement;\n      this.settings;\n      if(enable === $enable) { continue iterateTargetElements }\n      if($enable === true) {\n        try {\n          this.#assign(target);\n          $targetElement.enable = $enable;\n          assigned.push($targetElement);\n          \n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err); } }\n      }\n      else if($enable === false) {\n        try {\n          this.#deassign(target);\n          $targetElement.enable = $enable;\n          deassigned.push($targetElement);\n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err); } }\n      }\n    }\n    this.#enable = $enable;\n  }\n  get assigned() { return this.#assigned }\n  get deassigned() { return this.#deassigned }\n  get #target() { return this.settings.target }\n  get #targets() {\n    const pretargets = this.#_targets;\n    const targets = [];\n    if(this.#target) {\n      for(const $target of [].concat(this.#target)) {\n        const pretargetElement = pretargets.find(\n          ($pretarget) => $pretarget?.path === this.path\n        );\n        if(pretargetElement !== undefined) {\n          targets.push(pretargetElement);\n        }\n        else if(pretargetElement === undefined) {\n          targets.push({\n            path: this.path,\n            target: $target,\n            enable: false,\n          });\n        }\n      }\n    }\n    else if(typeOf$6(this.path) === 'string') {\n      const targetPaths = [];\n      if(this.path === this.#scopeKey) {\n        const targetElement = {\n          path: this.path,\n          target: this.#context,\n          enable: false,\n        };\n        targets.push(targetElement);\n      }\n      else {\n        if(this.settings.propertyDirectory) {\n          const propertyDirectory = this.#propertyDirectory;\n          const propertyPathMatcher = outmatch(this.path, {\n            separator: '.',\n          });\n          for(const $propertyPath of propertyDirectory) {\n            const propertyPathMatch = propertyPathMatcher($propertyPath);\n            if(propertyPathMatch === true) { targetPaths.push($propertyPath); }\n          }\n          if(this.path.charAt(0) === '*') {\n            targetPaths.unshift(this.#scopeKey);\n          }\n        }\n        else {\n          targetPaths.push(this.path);\n        }\n        for(const $targetPath of targetPaths) {\n          const pretargetElement = pretargets.find(\n            ($pretarget) => $pretarget.path === $targetPath\n          );\n          let target = this.#context;\n          let targetElement;\n          const pathKeys = $targetPath.split('.');\n          let pathKeysIndex = 0;\n          iterateTargetPathKeys: \n          while(pathKeysIndex < pathKeys.length) {\n            let pathKey = pathKeys[pathKeysIndex];\n            if(pathKey === this.#scopeKey) { break iterateTargetPathKeys }\n            iterateTargetAccessors: \n            for(const $targetAccessor of this.settings.accessors) {\n              try { target = $targetAccessor(target, pathKey); }\n              catch($err) { if(this.settings.errorLog) { console.error($err); } }\n              if(target !== undefined) { break iterateTargetAccessors }\n            }\n            pathKeysIndex++;\n          }\n          if(target !== undefined) {\n            if(target === pretargetElement?.target) {\n              targetElement = pretargetElement;\n            }\n            else if(typeof target === 'object') {\n              targetElement = {\n                path: $targetPath,\n                target: target,\n                enable: false,\n              };\n            }\n          }\n          if(targetElement !== undefined) { targets.push(targetElement); }\n        }\n      }\n    }\n    this.#_targets = targets;\n    return this.#_targets\n  }\n  get #scopeKey() { return this.settings.scopeKey }\n  get #assign() {\n    if(this.#_assign !== undefined) { return this.#_assign }\n    this.#_assign = this.settings.methods.assign[this.settings.assign].bind(null, this);\n    return this.#_assign\n  }\n  get #deassign() {\n    if(this.#_deassign !== undefined) { return this.#_deassign }\n    this.#_deassign = this.settings.methods.deassign[this.settings.deassign].bind(null, this);\n    return this.#_deassign\n  }\n  get #transsign() {\n    if(this.#_transsign !== undefined) { return this.#_transsign }\n    this.#_transsign = this.settings.methods.transsign[this.settings.transsign].bind(null, this);\n    return this.#_transsign\n  }\n  get #methods() { return this.settings.methods }\n  get #propertyDirectory() {\n    if(!this.settings.propertyDirectory) { return null }\n    const propertyDirectorySettings = ({\n      accessors: this.settings.accessors\n    }, this.settings.propertyDirectory);\n    return propertyDirectory(this.#context, propertyDirectorySettings)\n  }\n  emit() {\n    const targets = this.#targets;\n    const transsigned = this.#transsigned;\n    const nontranssigned = this.#nontranssigned;\n    transsigned.length = 0;\n    nontranssigned.length = 0;\n    for(const $targetElement of targets) {\n      const { target } = $targetElement;\n      try {\n        this.#transsign(target, ...arguments);\n        transsigned.push($targetElement);\n      }\n      catch($err) { nontranssigned.push($targetElement); }\n    }\n    return this\n  }\n}\n\nclass Core extends EventTarget {\n  static implement = function ($target, $settings) {\n    if(!$target || !$settings) { return undefined }\n    const settings = Settings$1($settings);\n    const events = [];\n    Object.defineProperties($target, {\n      [settings.propertyDefinitions.getEvents]: {\n        enumerable: false, writable: false, \n        value: function getEvents() {\n          if(!arguments[0]) { return events }\n          const getEvents = [];\n          const $filterEvents = [].concat(arguments[0]);\n          for(const $filterEvent of $filterEvents) {\n            for(const $event of events) {\n              let match;\n              iterateEventFilterProperties: \n              for(const [\n                $filterEventPropertyKey, $filterEventPropertyValue\n              ] of Object.entries($filterEvent)) {\n                let eventFilterMatch;\n                if($filterEventPropertyKey === 'listener') {\n                  eventFilterMatch = (\n                    $event.settings[$filterEventPropertyKey] === $filterEventPropertyValue\n                  );\n                }\n                else {\n                  eventFilterMatch = (\n                    $event[$filterEventPropertyKey] === $filterEventPropertyValue\n                  );\n                }\n                if(match !== false) { match = eventFilterMatch; }\n                else { break iterateEventFilterProperties }\n              }\n              if(match === true) { getEvents.push($event); }\n            }\n          }\n          return getEvents\n        }\n      },\n      [settings.propertyDefinitions.addEvents]: {\n        enumerable: false, writable: false, \n        value: function addEvents() {\n          if(!arguments.length) { return $target }\n          let $addEvents = expandEvents(arguments[0], settings.scopeKey);\n          let $enableEvents = arguments[1] || false;\n          for(let $addEvent of $addEvents) {\n            const event = {};\n            for(const $settingKey of [\n              'accessors', 'assign', 'deassign', 'transsign', 'propertyDirectory'\n            ]) {\n              const settingValue = settings[$settingKey];\n              if(settingValue !== undefined) { event[$settingKey] = settingValue; }\n            }\n            recursiveAssign$f(event, $addEvent);\n            const eventDefinition = new EventDefinition(event, $target);\n            if($enableEvents) { eventDefinition.enable = true; }\n            events.push(eventDefinition);\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.removeEvents]: {\n        enumerable: false, writable: false, \n        value: function removeEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          let eventsIndex = events.length - 1;\n          while(eventsIndex > -1) {\n            const event = events[eventsIndex];\n            if($events.includes(event)) {\n              event.enable = false;\n              events.splice(eventsIndex, 1);\n            }\n            eventsIndex--;\n          }\n          return $target\n        }\n      },\n      [settings.propertyDefinitions.enableEvents]: {\n        enumerable: false, writable: false, \n        value: function enableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          for(const $event of $events) { $event.enable = true; }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.disableEvents]: {\n        enumerable: false, writable: false, \n        value: function disableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          for(const $event of $events) { $event.enable = false; }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.reenableEvents]: {\n        enumerable: false, writable: false, \n        value: function reenableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          for(const $event of $events) {\n            $event.enable = false;\n            $event.enable = true;\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.emitEvents]: {\n        enumerable: false, writable: false, \n        value: function emitEvents($filterEvents, ...$eventParameters) {\n          const $events = $target[settings.propertyDefinitions.getEvents]($filterEvents);\n          for(const $event of $events) {\n            $event.emit(...$eventParameters);\n          }\n          return $target\n        },\n      },\n    });\n    if(settings.events) { $target[settings.propertyDefinitions.addEvents](settings.events); }\n    if(settings.enableEvents === true) { $target[settings.propertyDefinitions.enableEvents](); }\n    return $target\n  }\n  constructor($settings = {}) {\n    super();\n    return Core.implement(this, $settings)\n  }\n}\n\nclass Verification extends EventTarget {\n  constructor($settings) {\n    super();\n    const settings = Object.assign({}, $settings);\n    Object.defineProperties(this, {\n      'type': { value: settings.type },\n      'key': { value: settings.key },\n      'value': { value: settings.value },\n      'message': { configurable: true, get() {\n        let message;\n        if(this.pass !== undefined) {\n          message = settings.messages[String(this.pass)](this);\n          Object.defineProperty(this, 'message', { value: message });\n        }\n        return message\n      } },\n      'pass': { writable: true, \n        set pass($pass) {\n          Object.defineProperty(this, 'pass', { value: $pass });\n        },\n      },\n    });\n  }\n}\n\nconst { typedObjectLiteral: typedObjectLiteral$d } = index;\nconst Messages$1 = {\n  'true': ($validation) => `${$validation.valid}`,\n  'false': ($validation) => `${$validation.valid}`,\n};\nfunction report($format = \"expand\", $prevalidation) {\n  const prevalidation = $prevalidation || this;\n  const schema = prevalidation.schema;\n  const validations = [].concat(\n    prevalidation.advance, prevalidation.deadvance, prevalidation.unadvance\n  );\n  if($format === \"expand\") {\n    const _report = typedObjectLiteral$d(schema.type);\n    for(const $validation of validations) {\n      const verifications = [].concat(\n        $validation.advance, $validation.deadvance, $validation.unadvance\n      );\n      _report[$validation.key] = {};\n      for(const $verification of verifications) {\n        _report[$validation.key][$verification.type] = {};\n        if($verification.validation) {\n          _report[$validation.key][$verification.type] = this.report($format, $verification.validation);\n        }\n        else {\n          _report[$validation.key][$verification.type] = $verification;\n        }\n      }\n    }\n    return _report\n  }\n  if($format === \"impand\") {\n    if(prevalidation.valid === false) { return false }\n    const _report = typedObjectLiteral$d(schema.type);\n    for(const $validation of validations) {\n      const verifications = [].concat(\n        $validation.advance, $validation.deadvance, $validation.unadvance\n      );\n      let reportValue;\n      iterateVerifications: \n      for(const $verification of verifications) {\n        if($verification.type === 'type') {\n          if($verification.validation && $validation.valid) {\n            reportValue = this.report($format, $verification.validation);\n          }\n          break iterateVerifications\n        }\n      }\n      if(!reportValue) { reportValue = $validation.valid; }\n      _report[$validation.key] = reportValue;\n    }\n    return _report\n  }\n}\nclass Validation extends EventTarget {\n  constructor($settings = {}, $schema) {\n    super();\n    const settings = Object.assign({ messages: Messages$1 }, $settings);\n    let valid;\n    const advance = [];\n    const deadvance = [];\n    const unadvance = [];\n    Object.defineProperties(this, {\n      'schema': { value: $schema },\n      'verificationType': { value: settings.verificationType },\n      'required': { value: settings.required },\n      'definition': { value: settings.definition },\n      'key': { value: settings.key },\n      'value': { value: settings.value },\n      'advance': { value: advance },\n      'deadvance': { value: deadvance },\n      'unadvance': { value: unadvance },\n      'valid': {\n        writable: true,\n        get valid() { return valid },\n        set valid($valid) { Object.defineProperty(this, 'valid', { value: $valid }); }\n      },\n      'report': { configurable: true, get() {\n        const _report = report.bind(this);\n        Object.defineProperty(this, 'report', { value: _report });\n        return _report\n      } },\n    });\n  }\n}\n\nconst { recursiveAssign: recursiveAssign$e } = index;\nconst Messages = {\n  'true': ($verification) => `${$verification.pass}`,\n  'false': ($verification) => `${$verification.pass}`,\n};\nclass Validator extends EventTarget {\n  constructor($definition = {}, $schema) {\n    super();\n    const definition = Object.freeze(\n      Object.assign({ messages: Messages }, $definition)\n    );\n    Object.defineProperties(this, {\n      'definition': { value: definition },\n      'schema': { value: $schema },\n      'type': { value: definition.type },\n      'messages': { value: definition.messages },\n      'validate': { configurable: true, get() {\n        function validate($key, $value, $source, $target) {\n          const { definition, messages, type } = this;\n          let verification = new Verification({\n            type: type,\n            key: $key,\n            value: definition.value,\n            messages: recursiveAssign$e({}, messages, definition.messages),\n          });\n          const validation = definition.validate(...arguments);\n          if(typeof validation === 'object') {\n            verification.validation = validation;\n            verification.pass = validation.valid;\n          }\n          else { verification.pass = validation; }\n          return verification\n        }\n        const boundValidate = validate.bind(this);\n        Object.defineProperty(this, 'validate', {\n          value: boundValidate\n        });\n        return boundValidate\n      } },\n    });\n  }\n}\n\nconst { recursiveAssign: recursiveAssign$d, typedObjectLiteral: typedObjectLiteral$c } = index;\nclass RequiredValidator extends Validator {\n  constructor($definition, $schema) {\n    super(Object.assign({}, $definition, {\n      type: 'required',\n      validate: ($key, $value, $source, $target) => {\n        const { requiredProperties, requiredPropertiesSize, type } = $schema;\n        const corequiredProperties = Object.assign({}, requiredProperties);\n        let corequiredPropertiesSize = requiredPropertiesSize;\n        Object.assign(typedObjectLiteral$c(type), $source, $target);\n        this.definition;\n        let pass;\n        if(!requiredPropertiesSize) { pass = true; }\n        else {\n          if(Object.hasOwn(corequiredProperties, $key)) {\n            delete corequiredProperties[$key];\n            corequiredPropertiesSize--;\n          }\n          if(corequiredPropertiesSize) {\n            const coschema = new Schema(corequiredProperties, {\n              path: $schema.path,\n              parent: $schema.parent,\n            });\n            const comodel = Object.assign({}, $target, $source);\n            const covalidation = coschema.validate(comodel);\n            pass = covalidation.valid;\n          }\n        }\n        return pass\n      }\n    }), $schema);\n  }\n}\n\nconst { typeOf: typeOf$5, variables: variables$1 } = index;\nconst { ObjectKeys, TypeKeys } = variables$1;\nclass TypeValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign({}, $definition, {\n      type: 'type',\n      validate: ($key, $value, $source, $target) => {\n        let pass;\n        const definition = this.definition;\n        let typeOfDefinitionValue = typeOf$5(definition.value);\n        if(typeOfDefinitionValue === 'function') {\n          typeOfDefinitionValue = typeOf$5(definition.value());\n        }\n        else if(definition.value instanceof Schema) {\n          typeOfDefinitionValue = definition.value.type;\n        }\n        else {\n          typeOfDefinitionValue = typeOf$5(definition.value);\n        }\n        if(TypeKeys.includes(typeOfDefinitionValue)) {\n          const typeOfValue = typeOf$5($value);\n          if(typeOfValue === 'undefined') { pass = false; }\n          else if(typeOfDefinitionValue === 'undefined') { pass = true; }\n          else if(definition.value instanceof Schema) {\n            const validation = definition.value.validate($value, $source);\n            pass = validation;\n          }\n          else { pass = (typeOfDefinitionValue === typeOfValue); }\n        }\n        else { pass = false; }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass RangeValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'range',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(typeof $value !== 'number') { pass = false; }\n        else {\n          const { min, max } = definition;\n          let validMin, validMax;\n          if(min !== undefined) { validMin = ($value >= min.value); }\n          else { validMin = true; }\n          if(max !== undefined) { validMax = ($value <= max.value); }\n          else { validMax = true; }\n          if(validMin && validMax) { pass = true; }\n          else { pass = false;}\n        }\n        return pass\n      }\n    }), $schema);\n  }\n}\n\nclass LengthValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'length',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(typeof $value !== 'string') { pass = false; }\n        else {\n          const { min, max } = definition;\n          let validMin, validMax;\n          if(min !== undefined) {\n            validMin = ($value.length >= min.value);\n          }\n          else { validMin = true; }\n          if(max !== undefined) {\n            validMax = ($value.length <= max.value);\n          }\n          else { validMax = true; }\n          if(validMin && validMax) { pass = true; }          \n          else { pass = false;}\n        }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass EnumValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'enum',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(![\n          'string', 'number', 'boolean'\n        ].includes(typeof $value)) { pass = false;}\n        else {\n          const enumeration = definition.value;\n          pass = enumeration.includes($value);\n        }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass MatchValidator extends Validator {\n  constructor($settings = {}, $schema) {\n    super(Object.assign($settings, {\n      type: 'match',\n      validate: ($key, $value) => {\n        const definition = this.settings;\n        let pass;\n        if(![\n          'string', 'number', 'boolean'\n        ].includes(typeof $value)) { pass = false;}\n        else {\n          const match = definition;\n          (match.value.exec($value) !== null);\n        }\n        return pass ? true : false\n      },\n    }), $schema);\n  }\n}\n\nconst { recursiveAssign: recursiveAssign$c } = index;\nvar Options$1 = (...$options) => Object.assign({\n  required: false,\n  verificationType: 'all', \n  // verificationType: 'one',\n  strict: false,\n  properties: {\n    type: 'type',\n    value: 'value',\n  },\n}, ...$options);\n\nconst { typedObjectLiteral: typedObjectLiteral$b, typeOf: typeOf$4, variables } = index;\n\nclass Schema extends EventTarget {\n  constructor($properties = {}, $options = {}) {\n    super();\n    Object.defineProperties(this, {\n      'options': { value: Options$1($options) },\n      'type': { value: typeOf$4($properties) },\n      'parent': { configurable: true, get() {\n        const { options } = this;\n        const parent = (options.parent) ? options.parent : null;\n        Object.defineProperty(this, 'parent', { value: parent });\n        return parent\n      } },\n      'root': { configurable: true, get() {\n        let root = this;\n        iterateParents: \n        while(root) {\n          if([undefined, null].includes(root.parent)) { break iterateParents }\n          root = root.parent;\n        }\n        return root\n      } },\n      'key': { configurable: true, get() {\n        const { path } = this;\n        const key = (path) ? path.split('.').pop() : null;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'path': { configurable: true, get() {\n        const { options } = this;\n        const path = (options.path)\n          ? String(options.path)\n          : null;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'required': { configurable: true, get() {\n        const required = this.options.required;\n        Object.defineProperty(this, 'required', { value: required });\n        return required\n      } },\n      'requiredProperties': { configurable: true, get() {\n        const requiredProperties = typedObjectLiteral$b(this.type);\n        for(const [$propertyKey, $propertyDefinition] of Object.entries(this.target)) {\n          if($propertyDefinition.required?.value === true) {\n            requiredProperties[$propertyKey] = $propertyDefinition;\n          }\n        }\n        Object.defineProperty(this, 'requiredProperties', { value: Object.freeze(requiredProperties) });\n        return requiredProperties\n      } },\n      'requiredPropertiesSize': { configurable: true, get() {\n        const requiredPropertiesSize = Object.keys(this.requiredProperties).length;\n        Object.defineProperty(this, 'requiredPropertiesSize', { value: requiredPropertiesSize });\n        return requiredPropertiesSize\n      } },\n      'verificationType': { configurable: true, get() {\n        const verificationType = this.options.verificationType;\n        Object.defineProperty(this, 'verificationType', { value: verificationType });\n        return verificationType\n      } },\n      'target': { configurable: true, get() {\n        let properties;\n        const type = this.type;\n        if(type === 'array') { properties = $properties.slice(0, 1); }\n        else if(type === 'object') { properties = $properties; }\n        const target = parseProperties(properties, this);\n        Object.defineProperty(this, 'target', { value: target });\n        return target\n      } },\n      'validate': { value: function(...$arguments) {\n        let { $sourceName, $source, $target } = parseValidateArguments(...$arguments);\n        $target = $target || typedObjectLiteral$b($source);\n        const { target, path, required, type, verificationType } = this;\n        let validation = new Validation({\n          required, verificationType,\n          definition: target,\n          key: $sourceName, \n          value: $source,\n        }, this);\n        const sourceProperties = Object.entries($source);\n        let sourcePropertyIndex = 0;\n        while(sourcePropertyIndex < sourceProperties.length) {\n          const [$sourceKey, $sourceValue] = sourceProperties[sourcePropertyIndex];\n          const propertyValidation = this.validateProperty($sourceKey, $sourceValue, $source, $target);\n          if(propertyValidation.valid === true) { validation.advance.push(propertyValidation); } \n          else if(propertyValidation.valid === false) { validation.deadvance.push(propertyValidation); } \n          else if(propertyValidation.valid === undefined) { validation.unadvance.push(propertyValidation );}\n          sourcePropertyIndex++;\n        }\n        if(validation.advance.length) { validation.valid = true; }\n        else if(validation.deadvance.length) { validation.valid = false; }\n        else if(validation.unadvance.length) { validation.valid = undefined; }\n        else { validation.valid = true; }\n        return validation\n      } },\n      'validateProperty': { value: function() {\n        const { $key, $value, $source, $target } = parseValidatePropertyArguments(...arguments);\n        const { target, path, required, schema, type, verificationType } = this;\n        let propertyDefinition;\n        if(type === 'array') { propertyDefinition = target[0]; }\n        else if(type === 'object') { propertyDefinition = target[$key]; }\n        const propertyValidation = new Validation({\n          required,\n          verificationType,\n          definition: propertyDefinition,\n          key: $key,\n          value: $value,\n        }, this);\n        if(propertyDefinition === undefined) {\n          const verification = new Verification({\n            type: null,\n            definition: null,\n            key: $key,\n            value: $value,\n          }, this);\n          verification.pass = false;\n          propertyValidation.unadvance.push(verification);\n        }\n        else {\n          iteratePropertyDefinitionValidators:\n          for(const [$validatorIndex, $validator] of Object.entries(propertyDefinition.validators)) {\n            const verification = $validator.validate($key, $value, $source, $target);\n            if(verification.pass === true) { propertyValidation.advance.push(verification); }\n            else if(verification.pass === false) { propertyValidation.deadvance.push(verification); }\n            else if(verification.pass === undefined) { propertyValidation.unadvance.push(verification); }\n            if(this.verificationType === 'one' && propertyValidation.deadvance.length) {\n              break iteratePropertyDefinitionValidators\n            }\n          }\n        }\n        if(propertyValidation.deadvance.length) { propertyValidation.valid = false; }\n        else if(propertyValidation.advance.length) { propertyValidation.valid = true; }\n        else if(propertyValidation.unadvance.length) { propertyValidation.valid = false; }\n        return propertyValidation\n      } },\n    });\n  }\n}\nfunction parseValidateArguments(...$arguments) {\n  let $sourceName, $source, $target;\n  if($arguments.length === 1) {\n    $sourceName = null; $source = $arguments.shift(); $target = null;\n  }\n  else if($arguments.length === 2) {\n    if(['number', 'string'].includes(typeof $arguments[0])) {\n      $sourceName = $arguments.shift(); $source = $arguments.shift(); $target = null;\n    }\n    else if($arguments[0] && typeof $arguments[0] === 'object') {\n      $sourceName = null; $source = $arguments.shift(); $target = $arguments.shift();\n    }\n  }\n  else if($arguments.length === 3) {\n    if(['number', 'string'].includes(typeof $arguments[0])) {\n      $sourceName = $arguments.shift(); $source = $arguments.shift(); $target = $arguments.shift();\n    }\n  }\n  return { $sourceName, $source, $target }\n}\nfunction parseValidatePropertyArguments(...$arguments) {\n  let [$key, $value, $source, $target] = $arguments;\n  return { $key, $value, $source, $target }\n}\nfunction parseProperties($properties, $schema) {\n  const properties = typedObjectLiteral$b($properties);\n  if(_isPropertyDefinition($properties, $schema)) { return $properties }\n  for(const [\n    $propertyKey, $propertyValue\n  ] of Object.entries($properties)) {\n    let propertyDefinition = {};\n    typeOf$4($propertyValue);\n    const isPropertyDefinition = _isPropertyDefinition($propertyValue, $schema);\n    if(variables.TypeValues.includes($propertyValue)) {\n      Object.assign(propertyDefinition, { type: { value: $propertyValue } });\n    }\n    else if(variables.TypeKeys.includes($propertyValue)) {\n      Object.assign(propertyDefinition, { type: { value: variables.Types[$propertyValue] } });\n    }\n    else if(!isPropertyDefinition) {\n      const subpropertyPath = ($schema.path) ? [$schema.path, $propertyKey].join('.') : $propertyKey;\n      Object.assign(propertyDefinition, {\n        type: { type: 'type', value: new Schema($propertyValue, Object.assign({}, $schema.options, {\n          parent: $schema,\n          path: subpropertyPath\n        })) }\n      });\n    }\n    else if(isPropertyDefinition) {\n      for(const [$propertyValidatorName, $propertyValidator] of Object.entries($propertyValue)) {\n        const isValidatorDefinition = _isValidatorDefinition($propertyValidator, $schema);\n        if(!isValidatorDefinition) {\n          let propertyValidator;\n          if($propertyValidatorName === 'type') {\n            if($propertyValidator && typeof $propertyValidator === 'object') {\n              const subpropertyPath = ($schema.path) ? [$schema.path, $propertyKey].join('.') : $propertyKey;\n              propertyValidator = new Schema($propertyValidator, Object.assign({}, $schema.options, {\n                parent: $schema, \n                path: subpropertyPath,\n              }));\n            }\n            else {\n              propertyValidator = $propertyValidator;\n            }\n          }\n          else {\n            propertyValidator = $propertyValidator;\n          }\n          propertyDefinition[$propertyValidatorName] = {\n            type: $propertyValidatorName, value: propertyValidator\n          };\n        }\n        else if(isValidatorDefinition) {\n          propertyDefinition[$propertyValidatorName] = $propertyValidator;\n        }\n      }\n    }\n    propertyDefinition.validators = [];\n    properties[$propertyKey] = propertyDefinition;\n    const validators = new Map();\n    validators.set('type', Object.assign({}, {\n      type: 'type', validator: TypeValidator, value: propertyDefinition.type.value\n    }));\n    validators.set('required', Object.assign({}, {\n      type: 'required', validator: RequiredValidator, value: propertyDefinition.required?.value || false\n    }));\n    if(propertyDefinition.range) { validators.set('range', Object.assign({}, propertyDefinition.range, {\n      type: 'range', validator: RangeValidator\n    })); }\n    else if(propertyDefinition.min || propertyDefinition.max) { validators.set('range', Object.assign({}, {\n      type: 'range', min: propertyDefinition.min, max: propertyDefinition.max, validator: RangeValidator\n    })); }\n    if(propertyDefinition.length) { validators.set('length', Object.assign({}, propertyDefinition.length, {\n      type: 'length', validator: LengthValidator\n    })); }\n    else if(propertyDefinition.minLength || propertyDefinition.maxLength) { validators.set('length', Object.assign({}, {\n      type: 'length', min: propertyDefinition.minLength, max: maxLength, validator: LengthValidator\n    })); }\n    if(propertyDefinition.enum) { validators.set('enum', Object.assign({}, propertyDefinition.enum, {\n      type: 'enum', validator: EnumValidator\n    })); }\n    if(propertyDefinition.match) { validators.set('match', Object.assign({}, propertyDefinition.match, {\n      type: 'match', validator: MatchValidator\n    })); }\n    delete propertyDefinition.min;\n    delete propertyDefinition.max;\n    delete propertyDefinition.minLength;\n    delete propertyDefinition.maxLength;\n    for(const [\n      $validatorName, $validatorSettings\n    ] of validators.entries()) {\n      const ValidatorClass = $validatorSettings.validator;\n      propertyDefinition[$validatorName] = $validatorSettings;\n      propertyDefinition.validators.push(new ValidatorClass($validatorSettings, $schema));\n    }\n  }\n  return properties\n}\nfunction _isPropertyDefinition($object, $schema) {\n  if(!$object || $object instanceof Schema) { return false }\n  const typeKey = $schema.options.properties.type;\n  return Object.hasOwn($object, typeKey)\n}\nfunction _isValidatorDefinition($object, $schema) {\n  if(!$object) { return false }\n  const valueKey = $schema.options.properties.value;\n  return Object.hasOwn($object, valueKey)\n}\n\nconst { recursiveAssign: recursiveAssign$b } = index;\nvar Options = ($options) => {\n  const Options = recursiveAssign$b({\n    path: null, \n    parent: null, \n    enableEvents: false,\n    enableValidation: true, \n    validationEvents: {\n      'validProperty:$key': true,\n      'validProperty': true,\n      'nonvalidProperty:$key': true,\n      'nonvalidProperty': true,\n    },\n    pathkey: true,\n    subpathError: false,\n    assignObject: 'set', \n    assignArray: 'set', \n    methods: {\n      map: {\n        get: {\n          mutatorEvents: {\n            'get': true,\n            'getProperty': true,\n            'getProperty:$key': true,\n          },\n        },\n        set: {\n          recursive: true,\n          mutatorEvents: {\n            'set': true,\n            'setProperty': true,\n            'setProperty:$key': true,\n          },\n        },\n        delete: {\n          mutatorEvents: {\n            'delete': true,\n            'deleteProperty': true,\n            'deleteProperty:$key': true,\n          },\n        },\n      },\n      array: {\n        concat: {\n          mutatorEvents: {\n            'concatElement:$index': true,\n            'concatElement': true,\n            'concat': true,\n          }\n        },\n        copyWithin: {\n          mutatorEvents: {\n            'copyWithinElement:$index': true,\n            'copyWithinElement': true,\n            'copyWithin': true,\n          }\n        },\n        fill: {\n          lengthen: true,\n          mutatorEvents: {\n            'fillElement:$index': true,\n            'fillElement': true,\n            'fill': true,\n          }\n        },\n        pop: {\n          mutatorEvents: { 'pop': true  },\n        },\n        push: {\n          mutatorEvents: {\n            'pushElement:$index': true,\n            'pushElement': true,\n            'push': true,\n          }\n        },\n        reverse: {\n          mutatorEvents: { 'reverse': true  },\n        },\n        shift: {\n          mutatorEvents: { 'shift': true  },\n        },\n        splice: {\n          mutatorEvents: {\n            'spliceDeleteElement:$index': true,\n            'spliceDeleteElement': true,\n            'spliceAddElement:$index': true,\n            'spliceAddElement': true,\n            'splice': true,\n          }\n        },\n        unshift: {\n          mutatorEvents: {\n            'unshiftElement:$index': true,\n            'unshiftElement': true,\n            'unshift': true,\n          }\n        },\n      },\n      object: {\n        assign: {\n          sourceTree: true,\n          mutatorEvents: {\n            'assignSourceProperty:$key': true,\n            'assignSourceProperty': true,\n            'assignSource': true,\n            'assign': true,\n          },\n        },\n        defineProperties: {\n          descriptorTree: true,\n          mutatorEvents: { 'defineProperties': true },\n        },\n        defineProperty: {\n          descriptorTree: true,\n          mutatorEvents: {\n            'defineProperty': true,\n            'defineProperty:$key': true,\n          },\n        },\n        freeze: {\n          recursive: true,\n          mutatorEvents: {\n            'freezeProperty': true,\n            'freeze': true,\n          },\n        },\n        seal: {\n          recursive: true,\n          mutatorEvents: {\n            'sealProperty': true,\n            'seal': true,\n          },\n        },\n      },\n    },\n  }, $options);\n  return Options\n};\n\nclass ModelEvent extends CustomEvent {\n  constructor($type, $settings, $model) {\n    super($type, $settings);\n    Object.defineProperties(this, {\n      'model': { get () { return $model } },\n      'key': { configurable: true, get () {\n        const key = (this.path) ? this.path.split('.').pop() : null;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'change': { configurable: true, get () {\n        const change = $settings.change;\n        Object.defineProperty(this, 'change', { value: change });\n        return change\n      } },\n      'value': { configurable: true, get () {\n        const value = $settings.value;\n        Object.defineProperty(this, 'value', { value: value });\n        return value\n      } },\n      'path': { configurable: true, get () {\n        const path = $settings.path;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'detail': { configurable: true, get () {\n        const detail = $settings.detail;\n        Object.defineProperty(this, 'detail', { value: detail });\n        return detail\n      } },\n    });\n  }\n}\n\nclass Change {\n  #_keyter = false \n  #_preter = false \n  #_anter = false \n  #_conter = false\n  #keyter\n  #preter\n  #anter\n  #conter\n  constructor($settings = {}) {\n    for(const [$key, $value] of Object.entries($settings)) { this[$key] = $value; }\n  }\n  get preter() { return this.#preter }\n  set preter($preter) {\n    if(this.#_preter === true) { return this.#preter }\n    this.#preter = $preter?.valueOf();\n    this.#_preter = true;\n  }\n  get anter() { return this.#anter }\n  set anter($anter) {\n    if(this.#_anter === true) { return this.#anter }\n    this.#anter = $anter?.valueOf();\n    this.#_anter = true;\n  }\n  get conter() {\n    if(\n      this.#_conter === true ||\n      [this.#_preter, this.#_anter].includes(false)\n    ) { return this.#conter }\n    const preter = JSON.stringify(this.preter);\n    const anter = JSON.stringify(this.anter);\n    let conter;\n    if(anter !== preter) { conter = true; }\n    else { conter = false; }\n    this.#conter = conter;\n    this.#_conter = true;\n    return this.#conter\n  }\n}\n\nlet ValidatorEvent$1 = class ValidatorEvent extends CustomEvent {\n  constructor($type, $settings, $model) {\n    super($type);\n    Object.defineProperties(this, {\n      'key': { configurable: true, get () {\n        const key = $settings.key;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'path': { configurable: true, get () {\n        const path = ($model.path)\n          ? [$model.path, $settings.key].join('.')\n          : $settings.key;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'value': { configurable: true, get () {\n        const value = $settings.value;\n        Object.defineProperty(this, 'value', { value: value, });\n        return value\n      } },\n      'valid': { configurable: true, get () {\n        const valid = $settings.valid;\n        Object.defineProperty(this, 'valid', { value: valid });\n        return valid\n      } },\n    });\n  }\n};\n\nconst { recursiveAssign: recursiveAssign$a, typedObjectLiteral: typedObjectLiteral$a } = index;\nfunction assign($model, $options, ...$sources) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'assign';\n  const assignArray = options.assignArray || 'assign';\n  const { path, schema, source, target } = $model;\n  const { enableValidation, mutatorEvents, required, sourceTree, validationEvents } = options;\n  const assignedSources = [];\n  const assignChange = new Change({ preter: $model });\n  for(let $source of $sources) {\n    let assignedSource;\n    const assignSourceChange = new Change({ preter: $model });\n    if(Array.isArray($source)) { assignedSource = []; }\n    else if($source && typeof $source === 'object') { assignedSource = {}; }\n    let validObject;\n    if(enableValidation && schema) {\n      validObject = schema.validate($source, $model.valueOf());\n      validObject.report();\n    }\n    iterateSourceProperties:\n    for(let [$sourceKey, $sourceValue] of Object.entries($source)) {\n      const assignSourcePropertyChange = new Change({ preter: target[$sourceKey] });\n      const assignSourcePropertyKeyChange = new Change({ preter: target[$sourceKey] });\n      if(schema && enableValidation) {\n        const validatorTarget = $model.valueOf();\n        const validatorSource = $source;\n        const validSourceProperty = schema.validateProperty($sourceKey, $sourceValue, validatorSource, validatorTarget);\n        if(validationEvents) {\n          let type, propertyType;\n          if(validSourceProperty.valid) {\n            type = 'validProperty';\n            propertyType = ['validProperty', $sourceKey].join(':');\n          }\n          else {\n            type = 'nonvalidProperty';\n            propertyType = ['nonvalidProperty', $sourceKey].join(':');\n          }\n          for(const $eventType of [type, propertyType]) {\n            $model.dispatchEvent(new ValidatorEvent$1($eventType, validSourceProperty, $model));\n          }\n        }\n        if(!validSourceProperty.valid) { continue iterateSourceProperties }\n      }\n      let sourceValue;\n      if($sourceValue && typeof $sourceValue === 'object') {\n        if($sourceValue instanceof $model.constructor) {\n          sourceValue = $sourceValue.valueOf();\n        }\n        let subschema;\n        if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema?.type === 'object') { subschema = schema.target[$sourceKey].type.value; }\n        else { subschema = null; }\n        const modelPath = (path)\n          ? [path, $sourceKey].join('.')\n          : String($sourceKey);\n        if(sourceTree === false) {\n          const suboptions = recursiveAssign$a({}, options, {\n            path: modelPath,\n            parent: $model,\n          });\n          sourceValue = new $model.constructor($sourceValue, subschema, suboptions);\n          const assignment = { [$sourceKey]: sourceValue };\n          Object.assign(target, assignment);\n          Object.assign(assignedSource, assignment);\n        }\n        else {\n          if(target[$sourceKey] instanceof $model.constructor) {\n            sourceValue = target[$sourceKey];\n          }\n          else {\n            const subproperties = typedObjectLiteral$a($sourceValue);\n            const suboptions = recursiveAssign$a({}, options, {\n              path: modelPath,\n              parent: $model,\n            });\n            sourceValue = new $model.constructor(subproperties, subschema, suboptions);\n          }\n          const assignment = { [$sourceKey]: sourceValue };\n          Object.assign(target, assignment);\n          Object.assign(assignedSource, assignment);\n          $model.retroReenableEvents();\n          if(sourceValue.type === 'array') {\n            if(['push', 'unshift'].includes(assignArray)) { sourceValue[assignArray](...$sourceValue); }\n            else { sourceValue[assignArray]($sourceValue); }\n          }\n          else if(sourceValue.type === 'object') { sourceValue[assignObject]($sourceValue); }\n        }\n      }\n      else {\n        sourceValue = $sourceValue;\n        const assignment = { [$sourceKey]: sourceValue };\n        Object.assign(target, assignment);\n        Object.assign(assignedSource, assignment);\n      }\n      if(mutatorEvents) {\n        const modelEventPath = (path) ? [path, $sourceKey].join('.') : String($sourceKey);\n        if(mutatorEvents['assignSourceProperty:$key']) {\n          const type = ['assignSourceProperty', $sourceKey].join(':');\n          assignSourcePropertyKeyChange.anter = target[$sourceKey];\n          $model.dispatchEvent(\n            new ModelEvent(type, {\n              path: modelEventPath,\n              value: sourceValue,\n              change: assignSourcePropertyKeyChange,\n              detail: {\n                source: assignedSource,\n              }\n            }, $model)\n          );\n        }\n        if(mutatorEvents['assignSourceProperty']) {\n          assignSourcePropertyChange.anter = target[$sourceKey];\n          $model.dispatchEvent(\n            new ModelEvent('assignSourceProperty', {\n              path: modelEventPath,\n              value: sourceValue,\n              change: assignSourcePropertyChange,\n              detail: {\n                source: assignedSource,\n              }\n            }, $model)\n          );\n        }\n      }\n    }\n    assignedSources.push(assignedSource);\n    if(mutatorEvents && mutatorEvents['assignSource']) {\n      assignSourceChange.anter = $model;\n      $model.dispatchEvent(\n        new ModelEvent('assignSource', {\n          path,\n          change: assignSourceChange,\n          detail: {\n            source: assignedSource,\n          },\n        }, $model)\n      );\n    }\n  }\n  if(mutatorEvents && mutatorEvents['assign']) {\n    assignChange.anter = $model;\n    $model.dispatchEvent(\n      new ModelEvent('assign', { \n        path,\n        change: assignChange,\n        detail: {\n          sources: assignedSources,\n        },\n      }, $model)\n    );\n  }\n  return $model\n}\n\nconst { typedObjectLiteral: typedObjectLiteral$9 } = index;\nfunction defineProperties($model, $options, $propertyDescriptors) {\n  const { path, schema } = $model;\n  let {\n    enableValidation, mutatorEvents, required, \n    validation, validationEvents, validationReport\n  } = $options;\n  const propertyDescriptorEntries = Object.entries($propertyDescriptors);\n  const definePropertiesChange = new Change({ preter: $model });\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of propertyDescriptorEntries) {\n    $model.defineProperty($propertyKey, $propertyDescriptor, Object.assign({}, $options, {\n      validation, validationReport\n    }));\n  }\n  if(mutatorEvents && mutatorEvents['defineProperties']) {\n    definePropertiesChange.anter = $model;\n    $model.dispatchEvent(\n      new ModelEvent(\n        'defineProperties',\n        {\n          path,\n          value: $model.valueOf(),\n          detail: {\n            descriptors: $propertyDescriptors,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nconst { impandTree, recursiveAssign: recursiveAssign$9, typedObjectLiteral: typedObjectLiteral$8 } = index;\nfunction defineProperty($model, $options, $propertyKey, $propertyDescriptor) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'defineProperties';\n  const assignArray = options.assignArray || 'defineProperties';\n  const {\n    descriptorTree, enableValidation, mutatorEvents, \n    validation, validationEvents, validationReport\n  } = options;\n  const { target, path, schema } = $model;\n  const propertyValue = $propertyDescriptor.value;\n  const targetPropertyDescriptor = Object.getOwnPropertyDescriptor(target, $propertyKey) || {};\n  const targetPropertyValue = targetPropertyDescriptor.value;\n  const definePropertyChange = new Change({ preter: targetPropertyValue });\n  const definePropertyKeyChange = new Change({ preter: targetPropertyValue });\n  const targetPropertyValueIsModelInstance = targetPropertyValue instanceof $model.constructor;\n  if(schema && enableValidation) {\n    const validProperty = schema.validateProperty(\n      $propertyKey, \n      impandTree(propertyValue, 'value') || propertyValue,\n      {},\n      $model.valueOf()\n    );\n    if(validationEvents) {\n      let type, propertyType;\n      if(validProperty.valid) {\n        type = 'validProperty';\n        propertyType = ['validProperty', $propertyKey].join(':');\n      }\n      else {\n        type = 'nonvalidProperty';\n        propertyType = ['nonvalidProperty', $propertyKey].join(':');\n      }\n      for(const $eventType of [type, propertyType]) {\n        $model.dispatchEvent(new ValidatorEvent$1($eventType, validProperty, $model));\n      }\n    }\n    if(!validProperty.valid) { return $model }\n  }\n  if(propertyValue && typeof propertyValue === 'object') {\n    const modelPath = (path)\n      ? [path, $propertyKey].join('.')\n      : String($propertyKey);\n    if(targetPropertyValueIsModelInstance) {\n      if(descriptorTree === true) {\n        targetPropertyValue.defineProperties($propertyDescriptor);\n      }\n      else {\n        Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n      }\n    }\n    else {\n      let subschema;\n      if(schema) {\n        if(schema.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema.type === 'object') { subschema = schema.target[$propertyKey].type.value; }\n        else { subschema = undefined; }\n      }\n      let subtarget = typedObjectLiteral$8(propertyValue);\n      const suboptions = recursiveAssign$9({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      const submodel = new $model.constructor(\n        subtarget, subschema, suboptions\n      );\n      if(descriptorTree === true) {\n        target[$propertyKey] = submodel;\n        $model.retroReenableEvents();\n        if(submodel.type === 'array') {\n          if(['push', 'unshift'].includes(assignArray)) { submodel[assignArray](...propertyValue); }\n          else { submodel[assignArray](propertyValue); }\n        }\n        else if(submodel.type === 'object') { submodel[assignObject](propertyValue); }\n      }\n      else if(descriptorTree === false) {\n        Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n      }\n    }\n  }\n  else {\n    Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n  }\n  if(mutatorEvents) {\n    const modelEventPath = (path)\n      ? [path, $propertyKey].join('.')\n      : String($propertyKey);\n    if(mutatorEvents['defineProperty:$key']) {\n      definePropertyKeyChange.anter = target[$propertyKey];\n      const type = ['defineProperty', $propertyKey].join(':');\n      $model.dispatchEvent(\n        new ModelEvent(type, {\n          path: modelEventPath,\n          value: propertyValue,\n          change: definePropertyKeyChange,\n          detail: {\n            prop: $propertyKey,\n            descriptor: $propertyDescriptor,\n          },\n        }, $model\n      ));\n    }\n    if(mutatorEvents['defineProperty']) {\n      definePropertyChange.anter = target[$propertyKey];\n      $model.dispatchEvent(\n        new ModelEvent('defineProperty', {\n          path: modelEventPath,\n          value: propertyValue,\n          change: definePropertyChange,\n          detail: {\n            prop: $propertyKey,\n            descriptor: $propertyDescriptor,\n          },\n        }, $model\n      ));\n    }\n  }\n  return $model\n}\n\nfunction freeze($model, $options) {\n  const { recursive, mutatorEvents } = $options;\n  const { target } = $model;\n  if(recursive === true) {\n    for(const [\n      $propertyKey, $propertyValue\n    ] of Object.entries(target)) {\n      if($propertyValue instanceof $model.constructor) {\n        $propertyValue.freeze();\n        if(mutatorEvents && mutatorEvents['freezeProperty']) {\n          $model.dispatchEvent(\n            new ModelEvent(\n              'freezeProperty',\n              { path: $propertyValue.path },\n              $model\n            )\n          );\n        }\n      }\n    }\n  }\n  Object.freeze(target);\n  if(mutatorEvents && mutatorEvents['freeze']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'freeze',\n        { path: $model.path },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction seal($model, $options) {\n  const { recursive, mutatorEvents } = $options;\n  const { target } = $model;\n  if(recursive === true) {\n    for(const [\n      $propertyKey, $propertyValue\n    ] of Object.entries(target)) {\n      if($propertyValue instanceof $model.constructor) {\n        $propertyValue.seal();\n        if(mutatorEvents && mutatorEvents['sealProperty']) {\n          $model.dispatchEvent(\n            new ModelEvent(\n              'sealProperty',\n              { path: $propertyValue.path },\n              $model\n            )\n          );\n        }\n      }\n    }\n  }\n  Object.seal(target);\n  if(mutatorEvents && mutatorEvents['seal']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'seal',\n        { path: $model.path },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nvar ObjectProperty = {\n  assign,\n  defineProperties,\n  defineProperty,\n  freeze,\n  seal,\n};\n\nconst { typedObjectLiteral: typedObjectLiteral$7 } = index;\nfunction concat($model, $options) {\n  const { target, path, schema } = $model;\n  const { enableValidation, mutatorEvents, source, validationEvents } = $options;\n  const $arguments = [].concat(...arguments);\n  let valueIndex = target.length;\n  const values = [];\n  let targetConcat = [...Array.from(target)];\n  let model;\n  iterateValues: \n  for(let $value of $arguments) {\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$7(validatorTarget);\n      const validValue = schema.validateProperty(valueIndex, $subvalue, validatorSource, validatorTarget);\n      if(schema &&validationEvents) {\n        let type, propertyType;\n        if(validValue.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', valueIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', valueIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validValue, $model));\n        }\n      }\n      if(!validValue.valid) { valueIndex++; continue iterateValues }\n    }\n    const modelPath = (path)\n      ? [path, valueIndex].join('.')\n      : String(valueIndex);\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      let subschema = schema?.target[0].type.value || null;\n      const submodel = typedObjectLiteral$7($value);\n      let value = new $model.constructor(submodel, subschema, {\n        path: modelPath,\n        parent: $model,\n      });\n      value.concat($value);\n      values[valueIndex] = value;\n    }\n    else {\n      values[valueIndex] = $value;\n    }\n    targetConcat = Array.prototype.concat.call(targetConcat, values[valueIndex]);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, valueIndex].join('.')\n        : String(valueIndex);\n      if(mutatorEvents['concatElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('concatElement', {\n            path: modelEventPath,\n            value: values[valueIndex],\n            detail: {\n              valueIndex,\n              value: values[valueIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['concatElement:$index']) {\n        $model.dispatchEvent(\n          new ModelEvent('concatElement', {\n            path: modelEventPath,\n            value: values[valueIndex],\n            detail: {\n              valueIndex,\n              value: values[valueIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    valueIndex++;\n  }\n  model = new $model.constructor(targetConcat, schema, $model.options);\n  if(mutatorEvents && mutatorEvents['concat']) {\n    $model.dispatchEvent(\n      new ModelEvent('concat', {\n        path,\n        detail: {\n          values: model,\n        },\n      }, $model)\n    );\n  }\n  return model\n}\n\nfunction copyWithin($model, $options) {\n  const { target, path } = $model;\n  const { enableValidation, validationEvents, mutatorEvents } = $options;\n  const copyTarget = (\n    arguments[0] >= 0\n  ) ? arguments[0]\n    : target.length = arguments[0];\n  const start = (\n    arguments[1] >= 0\n  ) ? arguments[1]\n    : target.length + arguments[1];\n  const end = (\n    arguments[2] === undefined\n  ) ? target.length\n    : (\n    arguments[2] >= 0\n  ) ? arguments[2]\n    : target.length + arguments[2];\n  const copiedItems = [];\n  let copyIndex = start;\n  let targetIndex = copyTarget;\n  while(copyIndex < end) {\n    const copyItem = target[copyIndex];\n    copiedItems.push(copyItem);\n    Array.prototype.copyWithin.call(\n      target,\n      targetIndex,\n      copyIndex,\n      copyIndex + 1\n    );\n    $model.retroReenableEvents();\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, copyIndex].join('.')\n        : String(copyIndex);\n      if(mutatorEvents['copyWithinElement']) {\n        $model.dispatchEvent(\n          new ModelEvent(\n            'copyWithinElement',\n            {\n              path: modelEventPath,\n              value: copyItem,\n              detail: {\n                target: targetIndex,\n                start: copyIndex,\n                end: copyIndex + 1,\n                item: copyItem,\n              },\n            },\n            $model\n          )\n        );\n      }\n      if(mutatorEvents['copyWithinElement:$index']) {\n        const type  = ['copyWithinElement', copyIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(\n            type,\n            {\n              path: modelEventPath,\n              value: copyItem,\n              detail: {\n                target: targetIndex,\n                start: copyIndex,\n                end: copyIndex + 1,\n                item: copyItem,\n              },\n            },\n            $model\n          )\n        );\n      }\n    }\n    copyIndex++;\n    targetIndex++;\n  }\n  // Array Copy Within Event\n  if(mutatorEvents && mutatorEvents['copyWithin']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'copyWithin',\n        {\n          path,\n          detail: {\n            target: copyTarget,\n            start: start,\n            end: end,\n            items: copiedItems,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nconst { typedObjectLiteral: typedObjectLiteral$6 } = index;\nfunction fill($model, $options, ...$arguments) {\n  const options = Object.assign({}, $options);\n  const { target, path, schema } = $model;\n  const assignObject = options.assignObject;\n  const assignArray = options.assignArray || assignObject;\n  const { enableValidation, lengthen, mutatorEvents, validationEvents } = options;\n  const filled = [];\n  let $start;\n  if(typeof $arguments[1] === 'number') {\n    $start = ($arguments[1] >= 0)\n      ? $arguments[1]\n      : target.length + $arguments[1];\n  }\n  else { $start = 0; }\n  let $end;\n  if(typeof $arguments[2] === 'number') {\n    $end = ($arguments[2] >= 0)\n      ? $arguments[2]\n      : target.length + $arguments[2];\n  } else { $end = target.length; }\n  if(lengthen && target.length < $end) { target.length = $end; }\n  let fillIndex = $start;\n  iterateFillIndexes: \n  while(\n    fillIndex < target.length &&\n    fillIndex < $end\n  ) {\n    if(schema && enableValidation) {\n      let validValue = schema.validate(validValue, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        if(validValue.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', fillIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', fillIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validValue, $model));\n        }\n      }\n      if(!validValue.valid) { continue iterateFillIndexes }\n    }\n    const modelPath = (path)\n      ? [path, fillIndex].join('.')\n      : String(fillIndex);\n    let $value = $arguments[0];\n    let value;\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral$6($value);\n      const suboptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      value = new $model.constructor(subproperties, subschema, suboptions);\n    }\n    Array.prototype.fill.call(target, value, fillIndex, fillIndex + 1);\n    $model.retroReenableEvents();\n    if(value.type === 'array') {\n      if(['push', 'unshift'].includes(assignArray)) { value[assignArray](...$value); }\n      else { value[assignArray]($value); }\n    }\n    else if(value.type === 'object') { value[assignObject]($value); }\n    filled.push(value);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, fillIndex].join('.')\n        : String(fillIndex);\n      if(mutatorEvents['fillElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('fillElement', {\n            path: modelEventPath, \n            value: value,\n            detail: {\n              start: fillIndex,\n              end: fillIndex + 1,\n              value,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['fillElement:$index']) {\n        const type = ['fillElement', fillIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            detail: {\n              start: fillIndex,\n              end: fillIndex + 1,\n              value,\n            },\n          }, $model)\n        );\n      }\n    }\n    fillIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['fill']) {\n    $model.dispatchEvent(\n      new ModelEvent('fill', {\n        path,\n        detail: {\n          start: $start,\n          end: $end,\n          filled,\n        },\n      },\n      $model)\n    );\n  }\n  return $model\n}\n\nfunction pop($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  const popElement = Array.prototype.pop.call(target);\n  const popElementIndex = target.length - 1;\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['pop']) {\n    const modelEventPath = (path)\n      ? [path, popElementIndex].join('.')\n      : String(popElementIndex);\n      $model.dispatchEvent(\n      new ModelEvent(\n        'pop',\n        {\n          path: modelEventPath,\n          value: popElement,\n          detail: {\n            elementIndex: popElementIndex,\n            element: popElement,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return popElement\n}\n\nconst { recursiveAssign: recursiveAssign$8, typedObjectLiteral: typedObjectLiteral$5, typeOf: typeOf$3 } = index;\nfunction push($model, $options, ...$elements) {\n  const options = Object.assign({}, $options);\n  const assignArray = 'push';\n  const assignObject = options.assignObject;\n  const { enableValidation, mutatorEvents, source, validationEvents } = options;\n  const { target, path, schema } = $model;\n  const elements = [];\n  let elementsIndex = 0;\n  for(let $element of $elements) {\n    let element;\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$5(validatorTarget);\n      const validElement = schema.validateProperty(elementsIndex, $element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validElement.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', elementsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', elementsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validElement, $model));\n        }\n      }\n      if(!validElement.valid) { return target.length }\n    }\n    const modelPath = (path)\n      ? [path, elementsIndex].join('.')\n      : String(elementsIndex);\n    if($element && typeof $element === 'object') {\n      $element = ($element instanceof $model.constructor) ? $element.valueOf() : $element;\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral$5(typeOf$3($element));\n      const submodelOptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      element = new $model.constructor(subproperties, subschema, submodelOptions);\n      Array.prototype.push.call(target, element);\n      $model.retroReenableEvents();\n      if(element.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { element[assignArray](...$element); }\n        else { element[assignArray]($element); }\n      }\n      else if(element.type === 'object') { element[assignObject]($element); }\n    }\n    else {\n      element = $element;\n      Array.prototype.push.call(target, element);\n    }\n    elements.push(element);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, elementsIndex].join('.')\n        : String(elementsIndex);\n      if(mutatorEvents['pushElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('pushElement', {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['pushElement:$index']) {\n        const type = ['pushElement', elementsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    elementsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['push']) {\n    $model.dispatchEvent(\n      new ModelEvent('push', {\n        path,\n        detail: {\n          elements,\n        },\n      }, $model)\n    );\n  }\n  return target.length\n}\n\nfunction reverse($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  Array.prototype.reverse.call(target, ...arguments);\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['reverse']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'reverse',\n        {\n          path,\n          detail: {\n            reference: target\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction shift($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  const shiftElement = Array.prototype.shift.call(target);\n  const shiftElementIndex = 0;\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['shift']) {\n    const modelEventPath = (path)\n      ? [path, shiftElementIndex].join('.')\n      : String(shiftElementIndex);\n    $model.dispatchEvent(\n      new ModelEvent(\n        'shift',\n        {\n          path: modelEventPath,\n          value: shiftElement,\n          detail: {\n            elementIndex: shiftElementIndex,\n            element: shiftElement,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return shiftElement\n}\n\nconst { typedObjectLiteral: typedObjectLiteral$4 } = index;\nfunction splice($model, $options) {\n  const options = Object.assign({}, $options);\n  const assignObject = options.assignObject;\n  const assignArray = options.assignArray || assignObject;\n  const { mutatorEvents, source } = options;\n  const { target, path, schema } = $model;\n  const { enableValidation, validationEvents } = options;\n  const $arguments = [...arguments];\n  const $start = ($arguments[0] >= 0)\n    ? $arguments[0]\n    : target.length + $arguments[0];\n  const $deleteCount = ($arguments[1] <= 0)\n    ? 0\n    : (\n      $arguments[1] === undefined ||\n      $start + $arguments[1] >= target.length\n    ) ? target.length - $start\n      : $arguments[1];\n  const $addItems = $arguments.slice(2);\n  const addCount = $addItems.length;\n  const deleteItems = [];\n  let deleteItemsIndex = 0;\n  while(deleteItemsIndex < $deleteCount) {\n    const deleteItem = Array.prototype.splice.call(target, $start, 1)[0];\n    deleteItems.push(deleteItem);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, deleteItemsIndex].join('.')\n        : String(deleteItemsIndex);\n      if(mutatorEvents['spliceDeleteElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('spliceDeleteElement', {\n            path: modelEventPath,\n            value: deleteItem,\n            detail: {\n              index: $start + deleteItemsIndex,\n              deleteIndex: deleteItemsIndex,\n              deleteItem: deleteItem,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['spliceDeleteElement:$index']) {\n        const type = ['spliceDeleteElement', deleteItemsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: deleteItem,\n            detail: {\n              index: $start + deleteItemsIndex,\n              deleteIndex: deleteItemsIndex,\n              deleteItem: deleteItem,\n            },\n          }, $model)\n        );\n      }\n    }\n    deleteItemsIndex++;\n  }\n  let addItemsIndex = 0;\n  spliceAdd: \n  while(addItemsIndex < addCount) {\n    let addItem = $addItems[addItemsIndex];\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$4(validatorTarget);\n      const validAddItem = schema.validateProperty(elementIndex, element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validAddItem.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', addItemsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', addItemsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validAddItem, $model));\n        }\n      }\n      if(!validAddItem.valid) { addItemsIndex++; continue spliceAdd }\n    }\n    const modelPath = (path)\n      ? [path, addItemsIndex].join('.')\n      : String(addItemsIndex);\n    let startIndex = $start + addItemsIndex;\n    if(addItem && typeof addItem === 'object') {\n      if(addItem instanceof $model.constructor) { addItem = addItem.valueOf(); }\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral$4(addItem);\n      const suboptions = recursiveAssign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      addItem = new $model.constructor(subproperties, subschema, suboptions);\n      Array.prototype.splice.call(target, startIndex, 0, addItem);\n      $model.retroReenableEvents();\n      if(addItem.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { addItem[assignArray](...$value); }\n        else { addItem[assignArray]($value); }\n      }\n      else if(addItem.type === 'object') { addItem[assignObject]($value); }\n    }\n    else {\n      Array.prototype.splice.call(target, startIndex, 0, addItem);\n    }\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, addItemsIndex].join('.')\n        : String(addItemsIndex);\n      if(mutatorEvents['spliceAddElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('spliceAddElement', {\n            path: modelEventPath,\n            value: addItem,\n            detail: {\n              index: $start + addItemsIndex,\n              addIndex: addItemsIndex,\n              addItem: addItem,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['spliceAddElement:$index']) {\n        const type = ['spliceAddElement', addItemsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: addItem,\n            detail: {\n              index: $start + addItemsIndex,\n              addIndex: addItemsIndex,\n              addItem: addItem,\n            },\n          }, $model)\n        );\n      }\n    }\n    addItemsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['splice']) {\n    $model.dispatchEvent(\n      new ModelEvent('splice', {\n        path,\n        detail: {\n          $start,\n          deleted: deleteItems,\n          added: $addItems,\n          length: target.length,\n        },\n      },\n      $model)\n    );\n  }\n  return deleteItems\n}\n\nconst { recursiveAssign: recursiveAssign$7, typedObjectLiteral: typedObjectLiteral$3, typeOf: typeOf$2 } = index;\nfunction unshift($model, $options, ...$elements) {\n  const options = Object.assign({}, $options);\n  const assignArray = 'unshift';\n  const assignObject = options.assignObject;\n  const { enableValidation, mutatorEvents, source, validationEvents } = options;\n  const { target, path, schema } = $model;\n  const elements = [];\n  let elementsIndex = 0;\n  for(let $element of $elements) {\n    let element;\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$3(validatorTarget);\n      const validElement = schema.validateProperty(elementsIndex, $element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validElement.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', elementsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', elementsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validElement, $model));\n        }\n      }\n      if(!validElement.valid) { return target.length }\n    }\n    const modelPath = (path)\n      ? [path, elementsIndex].join('.')\n      : String(elementsIndex);\n    if($element && typeof $element === 'object') {\n      $element = ($element instanceof $model.constructor) ? $element.valueOf() : $element;\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral$3(typeOf$2($element));\n      const submodelOptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      element = new $model.constructor(subproperties, subschema, submodelOptions);\n      Array.prototype.unshift.call(target, element);\n      $model.retroReenableEvents();\n      if(element.type === 'array') { element[assignArray](...$element); }\n      else if(element.type === 'object') { element[assignObject]($element); }\n    }\n    else {\n      element = $element;\n      Array.prototype.unshift.call(target, element);\n    }\n    elements.unshift(element);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, elementsIndex].join('.')\n        : String(elementsIndex);\n      if(mutatorEvents['unshiftElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('unshiftElement', {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['unshiftElement:$index']) {\n        const type = ['unshiftElement', elementsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    elementsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['unshift']) {\n    $model.dispatchEvent(\n      new ModelEvent('unshift', {\n        path,\n        detail: {\n          elements,\n        },\n      }, $model)\n    );\n  }\n  return target.length\n}\n\nvar ArrayProperty = {\n  concat: concat,\n  copyWithin: copyWithin,\n  fill: fill,\n  pop: pop,\n  push: push,\n  reverse: reverse,\n  shift: shift,\n  splice: splice,\n  unshift: unshift,\n};\n\nfunction getContent($model, $options) {\n  const { path } = $model;\n  const { mutatorEvents } = $options;\n  if(mutatorEvents && mutatorEvents['get']) {\n    $model.dispatchEvent(\n      new ModelEvent('get', {\n        path,\n        value: $model.valueOf(),\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nconst { regularExpressions: regularExpressions$2} = index;\nfunction getContentProperty($model, $options, $path) {\n  const { target, path } = $model;\n  const { mutatorEvents, pathkey, subpathError } = $options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions$2.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue = target[propertyKey];\n    if(subpaths.length) {\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      return propertyValue.get(subpaths.join('.'), $options)\n    }\n    if(mutatorEvents) {\n      if(mutatorEvents['getProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('getProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['getProperty:$key']) {\n        const type = ['getProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n  else if(pathkey === false) {\n    const propertyValue = target[propertyKey];\n    return propertyValue\n  }\n}\n\nconst { recursiveAssign: recursiveAssign$6 } = index;\nfunction getProperty($model, $options, ...$arguments) {\n  let getProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 2) { recursiveAssign$6(options, $arguments[1]); }\n    getProperty = getContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 1) { recursiveAssign$6(options, $arguments[0]); }\n    getProperty = getContent($model, options, ...$arguments);\n  }\n  return getProperty\n}\n\nfunction setContent($model, $options, $properties) {\n  const { path, schema } = $model;\n  let { enableValidation, mutatorEvents, required, validationEvents  } = $options;\n  for(const [$propertyKey, $propertyValue] of Object.entries($properties)) {\n    $model.set($propertyKey, $propertyValue, Object.assign($options, {\n      source: $properties,\n    }));\n  }\n  if(mutatorEvents && mutatorEvents['set']) {\n    $model.dispatchEvent(\n      new ModelEvent('set', {\n        path,\n        value: $model.valueOf(),\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nconst { recursiveAssign: recursiveAssign$5, regularExpressions: regularExpressions$1, typedObjectLiteral: typedObjectLiteral$2, typeOf: typeOf$1 } = index;\nfunction setContentProperty($model, $options, $path, $value) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'set';\n  const assignArray = options.assignArray || 'set';\n  const { target, path, schema } = $model;\n  const {\n    enableValidation, mutatorEvents, pathkey, \n    recursive, subpathError, \n    validationEvents, source, \n  } = options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions$1.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue;\n    const typeOfPropertyValue = typeOf$1($value);\n    const modelPath = (path)\n      ? [path, propertyKey].join('.')\n      : String(propertyKey);\n    if(subpaths.length) {\n      if(recursive && target[propertyKey] === undefined) {\n        let subschema;\n        if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema?.type === 'object') { subschema = schema.target[propertyKey].type.value; }\n        else { subschema = undefined; }\n        let submodel;\n        if(typeOfPropertyValue === 'array') { submodel = []; }\n        else if(typeOfPropertyValue === 'object') { submodel = {}; }\n        else {\n          if(isNaN(Number(propertyKey))) { submodel = {}; }\n          else { submodel = []; }\n        }\n        const submodelOptions = recursiveAssign$5({}, options, {\n          path: modelPath,\n          parent: $model,\n        });\n        propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      }\n      else {\n        propertyValue = target[propertyKey];\n      }\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject](subpaths.join('.'), $value, options); }\n      return propertyValue\n    }\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$2(validatorTarget);\n      const validTargetProp = schema.validateProperty(propertyKey, $value, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validTargetProp, $model));\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const typeOfPropertyValue= typeOf$1($value);\n      let subschema;\n      let submodel;\n      if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n      else if(schema?.type === 'object') { subschema = schema.target[propertyKey].type.value; }\n      else { subschema = undefined; }\n      if(typeOfPropertyValue === 'array') { submodel = []; }\n      else if(typeOfPropertyValue === 'object') { submodel = {}; }\n      else {\n        if(isNaN(Number(propertyKey))) { submodel = {}; }\n        else { submodel = []; }\n      }\n      const submodelOptions = recursiveAssign$5({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      target[propertyKey] = propertyValue;\n      $model.retroReenableEvents();\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject]($value); }\n    }\n    else {\n      propertyValue = $value;\n      target[propertyKey] = propertyValue;\n    }\n    // const _propertyValue = (propertyValue === null) ? null : propertyValue.valueOf()\n    const _propertyValue = propertyValue.valueOf();\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      if(mutatorEvents['setProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('setProperty', {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              key: propertyKey,\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['setProperty:$key']) {\n        const type = ['setProperty', propertyKey].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n  else if(pathkey === false) {\n    let propertyKey = $path;\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const typeOfPropertyValue = typeOf$1($value);\n      let subschema;\n      let submodel;\n      if(schema?.type === 'array') {\n        subschema = schema.target[0].type.value;\n      }\n      if(schema?.type === 'object') {\n        subschema = schema.target[propertyKey].type.value;\n      }\n      else { subschema = undefined; }\n      if(typeOfPropertyValue === 'array') { submodel = []; }\n      else if(typeOfPropertyValue === 'object') { submodel = {}; }\n      else {\n        if(isNaN(Number(propertyKey))) { submodel = {}; }\n        else { submodel = []; }\n      }\n      const modelPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      const submodelOptions = recursiveAssign$5({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      target[propertyKey] = propertyValue;\n      $model.retroReenableEvents();\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject]($value); }\n    }\n    else {\n      propertyValue = $value;\n      target[propertyKey] = propertyValue;\n    }\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      if(mutatorEvents['setProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('setProperty', {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              key: propertyKey,\n              value: _propertyValue,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['setProperty:$key']) {\n        const type = ['setProperty', propertyKey].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n}\n\nconst { recursiveAssign: recursiveAssign$4 } = index;\nfunction setProperty($model, $options, ...$arguments) {\n  let setProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 3) { recursiveAssign$4(options, $arguments[2]); }\n    setProperty = setContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 2) { recursiveAssign$4(options, $arguments[1]); }\n    setProperty = setContent($model, options, ...$arguments);\n  }\n  return setProperty\n}\n\nfunction deleteContent($model, $options) {\n  const { target } = $model;\n  for(const [$targetPropertyKey, $targetPropertyValue] of Object.entries(target)) {\n    $model.delete($targetPropertyKey, $options);\n  }\n  const { path } = $model;\n  const { mutatorEvents } = $options;\n  if(mutatorEvents && mutatorEvents['delete']) {\n    $model.dispatchEvent(\n      new ModelEvent('delete', {\n        path,\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nconst { regularExpressions} = index;\nfunction deleteContentProperty($model, $options, $path) {\n  const { target, path, schema } = $model;\n  const { mutatorEvents, pathkey, subpathError, enableValidation, validationEvents } = $options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue = target[propertyKey];\n    if(subpaths.length) {\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      return propertyValue.delete(subpaths.join('.'), $options)\n    }\n    if(schema && enableValidation) {\n      const differedPropertyProxy = $model.valueOf();\n      delete differedPropertyProxy[propertyKey];\n      const validTargetProp = schema.validate(propertyKey, differedPropertyProxy, {}, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        const validatorEventPath = (path)\n          ? [path, propertyKey].join('.')\n          : String(propertyKey);\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(\n            new ValidatorEvent$1($eventType, Object.assign(validTargetProp, {\n              path: validatorEventPath\n            }), $model)\n          );\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n    if(propertyValue && typeof propertyValue === 'object') {\n      propertyValue.delete($options);\n    }\n    delete target[propertyKey];\n    if(mutatorEvents) {\n      if(mutatorEvents['deleteProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('deleteProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['deleteProperty:$key']) {\n        const type = ['deleteProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            value: propertyValue,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return undefined\n  }\n  else if(pathkey === false) {\n    const propertyKey = $path;\n    const propertyValue = target[propertyKey];\n\n    if(schema && enableValidation) {\n      const differedPropertyProxy = $model.valueOf();\n      delete differedPropertyProxy[propertyKey];\n      const validTargetProp = schema.validate(propertyKey, differedPropertyProxy, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(\n            new ValidatorEvent$1($eventType, validTargetProp, $model)\n          );\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n  \n    if(propertyValue instanceof $model.constructor) {\n      propertyValue.delete($options);\n    }\n    delete target[propertyKey];\n    if(mutatorEvents) {\n      if(mutatorEvents['deleteProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('deleteProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['deleteProperty:$key']) {\n        const type = ['deleteProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            value: propertyValue,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return undefined\n  }\n}\n\nconst { recursiveAssign: recursiveAssign$3 } = index;\nfunction deleteProperty($model, $options, ...$arguments) {\n  let deleteProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 2) { recursiveAssign$3(options, $arguments[1]); }\n    deleteProperty = deleteContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 1) { recursiveAssign$3(options, $arguments[0]); }\n    deleteProperty = deleteContent($model, options, ...$arguments);\n  }\n  return deleteProperty\n}\n\nvar MapProperty = {\n  get: getProperty,\n  set: setProperty,\n  delete: deleteProperty,\n};\n\nconst { recursiveAssign: recursiveAssign$2, recursiveFreeze } = index;\nconst Defaults = Object.freeze({\n  object: [{\n    keys: ['valueOf'],\n    methodDescriptor: function($methodName, $model) {\n      return { value: function valueOf() { return $model.parse({ type: 'object' }) } }\n    },\n  }, {\n    keys: ['toString'],\n    methodDescriptor: function($methodName, $model) {\n      return { value: function toString($parseSettings = {}) {\n        const replacer = ($parseSettings.replacer !== undefined)\n          ? $parseSettings.replacer : null;\n        const space = ($parseSettings.space !== undefined)\n          ? $parseSettings.space : 0;\n        return $model.parse({ type: 'string', replacer, space })\n      } }\n    }, \n  }, {\n    keys: [\n      'entries', 'fromEntries', 'getOwnPropertyDescriptors', \n      'getOwnPropertyDescriptor', 'getOwnPropertyNames', \n      /* 'getOwnPropertySymbols', */ 'groupBy', 'hasOwn', 'is', \n      'getPrototypeOf', 'isExtensible', 'isFrozen', 'isSealed', \n      'keys', 'preventExtensions', 'values',\n    ],\n    methodDescriptor: function($methodName, $model) {\n      return { value: Object[$methodName].bind(null, $model.valueOf()) }\n    },\n  }, {\n    keys: ['propertyIsEnumerable', 'hasOwnProperty'], \n    methodDescriptor: function($methodName, $model) {\n      return { value: () => $model.parse({ type: 'object' })[$methodName] }\n    },\n  }, {\n    type: 'mutators',\n    keys: Object.keys(ObjectProperty), \n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: ObjectProperty[$methodName].bind(null, $model, $options) }\n    }\n  }],\n  array: [{\n    keys: ['length'], \n    methodDescriptor: function($propertyName, $model, $options) {\n      return {\n        get() { return $model.target.length },\n        set($propertyValue) { $model.target.length = $propertyValue; },\n      }\n    }\n  }, {\n    keys: [\n      'from', 'fromAsync', 'isArray', 'of', \n    ], \n    methodDescriptor: function($methodName, $model) {\n      return { value: Array[$methodName] }\n    }, \n  }, {\n    keys: [\n      'at', 'every', 'filter', 'find', 'findIndex', 'findLast',\n      'findLastIndex', 'flat', 'flatMap', 'forEach', 'includes', \n      'indexOf', 'join', 'lastIndexOf', 'map', 'reduce', 'reduceRight', \n      'slice', 'some', 'sort', 'toReversed',  'toSorted', 'toSpliced', \n      'with', \n    ], \n    methodDescriptor: function($methodName, $model) {\n      return { value: Array.prototype[$methodName].bind(null, $model) }\n    }\n  }, {\n    type: 'mutators',\n    keys: Object.keys(ArrayProperty), \n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: ArrayProperty[$methodName].bind(null, $model, $options) }\n    }\n  }],\n  map: [{\n    type: 'mutators',\n    keys: Object.keys(MapProperty),\n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: MapProperty[$methodName].bind(null, $model, $options) }\n    }\n  }]\n});\nfunction Methods($model) {\n  // Object, Array, Map\n  for(const [$propertyClassName, $propertyClasses] of Object.entries(Defaults)) {\n    for(const $propertyClass of $propertyClasses) {\n      const { keys, methodDescriptor, type } = $propertyClass;\n      for(const $methodName of keys) {\n        if($propertyClassName === 'map' || type === 'mutators') {\n          const modelMethodOptions = structuredClone(\n            $model.options.methods[$propertyClassName][$methodName]\n          );\n          const methodOptions = Object.assign({}, $model.options, modelMethodOptions);\n          delete methodOptions.mutatorEvents;\n          methodOptions.mutatorEvents = modelMethodOptions.mutatorEvents;\n          Object.defineProperty(\n            $model, $methodName, methodDescriptor($methodName, $model, methodOptions)\n          );\n        }\n        else {\n          Object.defineProperty(\n            $model, $methodName, methodDescriptor($methodName,  $model)\n          );\n        }\n      }\n    }\n  }\n  return $model\n}\n\nconst { recursiveAssign: recursiveAssign$1, typedObjectLiteral: typedObjectLiteral$1 } = index;\nconst ValidArrayAssigmentMethods = Object.freeze(\n  ['push', 'unshift']\n);\nconst ValidObjectAssigmentMethods = Object.freeze(\n  ['assign', 'defineProperties', 'set']\n);\n\nfunction Assign($model, $properties, $options) {\n  const { type } = $model;\n  const { assignObject, assignArray } = $options;\n  if(type === 'array' && ValidArrayAssigmentMethods.includes(assignArray)) {\n    $model[assignArray](...$properties);\n  }\n  else if(['array', 'object'].includes(type) && ValidObjectAssigmentMethods.includes(assignObject)) {\n    $model[assignObject]($properties);\n  }\n  return $model\n}\n\nconst { typedObjectLiteral, typeOf } = index;\n\nclass Model extends Core {\n  constructor($properties = {}, $schema = null, $options = {}) {\n    super({ propertyDirectory: { accessors: [($target, $property) => {\n      if($property === undefined) { return $target.target }\n      else { return $target.get($property) }\n    }] } });\n    const properties = ($properties instanceof Model) ? $properties.valueOf() : $properties;\n    let parent = null;\n    let path = null;\n    try {\n      Object.defineProperty(this, 'mount', { value: function($mount) {\n        const mountParent = $mount.parent;\n        const mountPath = $mount.path;\n        const property = (mountPath) ? mountPath.split('.').pop() : mountPath;\n        if(parent) { parent.unmount(property); }\n        parent = mountParent;\n        path = mountPath;\n      } });\n    }\n    catch($err) { console.error($err); }\n    try {\n      Object.defineProperty(this, 'unmount', { value: function($unmount) {\n        const unmountPath = $unmount.path;\n        delete this[$property];\n      } });\n    }\n    catch($err) { console.error($err); }\n    Object.defineProperties(this, {\n      'options': { configurable: true, get() {\n        const options = Options($options);\n        if(options.events) {\n          this.addEvents(options.events);\n          delete options.events;\n        }\n        if(options.enableEvents) {\n          const typeofEnableEvents = typeof options.enableEvents;\n          if(typeofEnableEvents === 'boolean') { this.enableEvents(); }\n          else if(typeofEnableEvents === 'object') { this.enableEvents(options.enableEvents); }\n        }\n        Object.defineProperty(this, 'options', { value: options });\n        return options\n      } },\n      'parent': { get() { return parent } },\n      'path': { get() { return path } },\n      'key': { get() { return (path) ? path.pop() : path } },\n      'target': { configurable: true, get() {\n        const target = typedObjectLiteral(properties);\n        Object.defineProperty(this, 'target', { value: target });\n        return target\n      } },\n      'type': { configurable: true, get() {\n        const type = typeOf(this.target);\n        Object.defineProperty(this, 'type', { value: type });\n        return type\n      } },\n      'schema': { configurable: true, get() {\n        const typeOfSchema = typeOf($schema);\n        let schema;\n        if(['undefined', 'null'].includes(typeOfSchema)) { schema = null; }\n        else if($schema instanceof Schema) { schema = $schema; }\n        else if(['array', 'object'].includes(typeOfSchema)) { schema = new Schema($schema); }\n        Object.defineProperty(this, 'schema', { value: schema });\n        return schema\n      } },\n    });\n    this.mount({\n      parent: this.options.parent,\n      path: this.options.path\n    });\n    Methods(this);\n    Assign(this, properties, this.options);\n  }\n  retroReenableEvents() {\n    let model = this;\n    while(model) {\n      model.reenableEvents({ enable: true });\n      model = model.parent;\n    }\n    return this\n  }\n  parse($settings = { type: 'object', replacer: null, space: 0 }) {\n    let parsement = typedObjectLiteral(this.type);\n    for(const [\n      $propertyDescriptorName, $propertyDescriptor\n    ] of Object.entries(\n      Object.getOwnPropertyDescriptors(this.target))\n    ) {\n      let { enumerable, value, writable, configurable } = $propertyDescriptor;\n      if(value instanceof Model) {\n        Object.defineProperty(parsement, $propertyDescriptorName, {\n          enumerable, value: value.valueOf(), writable, configurable\n        });\n      }\n      else {\n        Object.defineProperty(parsement, $propertyDescriptorName, {\n          enumerable, value, writable, configurable\n        });\n      }\n    }\n    let { type, replacer, space } = $settings;\n    if(type === 'object') { return parsement }\n    else if(type === 'string') { return JSON.stringify(parsement, replacer, space) }\n    else { return undefined }\n  }\n}\n\nexport { Model, Schema, Validation, Validator, Verification };\n//# sourceMappingURL=objecture.js.map\n"],"names":["accessors","default","$target","$property","undefined","get","expandEvents","$propEvents","$scopeKey","Array","isArray","propEvents","$propEventSettings","$propEventListener","Object","entries","propEventSettings","trim","split","path","type","listener","length","propEvent","enable","push","Primitives","string","String","number","Number","boolean","Boolean","null","PrimitiveKeys","keys","PrimitiveValues","values","Objects","object","array","ObjectKeys","ObjectValues","Types","assign","TypeKeys","TypeValues","TypeMethods","index$1","freeze","__proto__","regularExpressions","quotationEscape","typeOf","$data","prototype","toString","call","slice","toLowerCase","subpaths","$path","RegExp","keypaths","_subpaths","pop","key","root","shift","typeofRoot","typedObjectLiteral","$value","_typedObjectLiteral","typeOfValue","$source","subtarget","$subpath","set","parse","target","Options","depth","maxDepth","propertyDirectory","$object","$options","_propertyDirectory","options","$accessor","bind","accessor","$key","subtargets","$subtargetKey","$subtarget","join","recursiveAssign","$sources","$sourcePropertyKey","$sourcePropertyValue","typeOfTargetPropertyValue","typeOfSourcePropertyValue","index","expandTree","typeOfProperty","typeOfSource","includes","$sourceKey","$sourceValue","impandTree","recursiveAssignConcat","concat","recursiveFreeze","$propertyKey","$propertyValue","variables","handleNoCommaBraces","span","separatorI","i","rangeStart","substr","rangeEnd","expand","pattern","TypeError","scanning","openingBraces","closingBraces","handledUntil","results","alternatives","char","substring","j","newResults","k","l","unhandledFrom","negate","supportNegation","supportParens","isNegated","escapeRegExpChar","Pattern","source","excludeDot","separator","separatorSplitter","separatorMatcher","wildcard","str","result","escapeRegExpString","requiredSeparator","optionalSeparator","segments","support","qMark","star","globstar","brackets","extglobs","Segment","isFirst","isLast","end","EXCLUDE_DOT_PATTERN","add","state","addition","addToUnmatch","unmatch","addToMatch","dotHandled","match","convertSegment","segment","openingBracket","closingBracket","openingParens","closingParens","parensHandledUntil","extglobModifiers","scanningForParens","escapeChar","nextChar","State","modifier_1","indexOf","Error","useUnmatch","convert","isMatch","regexp","sample","test","outmatch","arguments","regexpPattern","patterns","predicate","mappedValue","flatMap","positiveResults","negativeResults","negatedPattern","convertedPattern","compile","flags","fn","EventDefinition","context","nontranssigned","_targets","_assign","_deassign","_transsign","constructor","$settings","$context","this","settings","Settings","deassign","transsign","bindListener","errorLog","methods","addEventListener","$eventDefinition","useCapture","on","once","removeEventListener","off","dispatchEvent","$event","emit","$type","$arguments","$settingKey","$settingValue","defineProperties","value","assigned","deassigned","transsigned","configurable","listenerTarget","iterateListenerPathKeys","$pathKey","defineProperty","$enable","targets","$targetElement","$err","console","error","pretargets","pretargetElement","find","$pretarget","ptargets","targetPaths","scopeKey","targetElement","propertyPathMatcher","$propertyPath","charAt","unshift","$targetPath","$targetValue","propertyDirectorySettings","Core","EventTarget","static","events","enableEvents","propertyDefinitions","getEvents","addEvents","removeEvents","disableEvents","reenableEvents","emitEvents","Settings$1","enumerable","writable","$filterEvents","$filterEvent","iterateEventFilterProperties","$filterEventPropertyKey","$filterEventPropertyValue","eventFilterMatch","$addEvents","$enableEvents","$addEvent","event","settingValue","eventDefinition","$events","eventsIndex","splice","$eventParameters","super","implement","Coutil","path.parse","tree","treeNode","isPropertyDefinition","$root","$tree","typeofTree","$rootKey","$rootValue","Tree.set","keytree","objectCount","count","pathkeytree","Settings$5","Options$7","parent","definition","propertyClasses","MVCFrameworkCore","Map","fromEntries","$mount","mountParent","mountPath","property","unmount","$unmount","iterateParents","retroReenableEvents","core","addPropertyClasses","$this","$addPropertyClasses","iteratePropertyClasses","$addPropertyClass","targetType","name","administer","deadminister","instate","deinstate","$properties","properties","reverse","removePropertyClasses","$removePropertyClasses","reduce","$propertyClasses","propertyClass","$propertyClass","$removePropertyClass","propertyClassIndex","findIndex","mount","map","addProperties","message","pass","messages","$pass","typedObjectLiteral$d","Messages$1","true","$validation","valid","false","report","$format","$prevalidation","prevalidation","schema","validations","advance","deadvance","unadvance","_report","verifications","$verification","validation","reportValue","iterateVerifications","$schema","verificationType","required","$valid","recursiveAssign$e","Messages","$definition","validate","boundValidate","verification","Verification","recursiveAssign$d","typedObjectLiteral$c","RequiredValidator","Validator","requiredProperties","requiredPropertiesSize","corequiredProperties","corequiredPropertiesSize","hasOwn","coschema","Schema","comodel","typeOf$5","variables$1","TypeValidator","typeOfDefinitionValue","RangeValidator","min","max","validMin","validMax","LengthValidator","EnumValidator","MatchValidator","exec","recursiveAssign$c","Options$1","strict","typedObjectLiteral$b","typeOf$4","$propertyDefinition","_isPropertyDefinition","propertyDefinition","$propertyValidatorName","$propertyValidator","isValidatorDefinition","_isValidatorDefinition","propertyValidator","subpropertyPath","validators","validator","range","minLength","maxLength","enum","$validatorName","$validatorSettings","ValidatorClass","parseProperties","$sourceName","parseValidateArguments","Validation","sourceProperties","sourcePropertyIndex","propertyValidation","validateProperty","parseValidatePropertyArguments","iteratePropertyDefinitionValidators","$validatorIndex","$validator","typeKey","valueKey","recursiveAssign$b","ModelEvent","CustomEvent","$model","model","change","detail","Change","_keyter","_preter","_anter","_conter","keyter","preter","anter","conter","$preter","valueOf","$anter","JSON","stringify","ValidatorEvent$1","recursiveAssign$a","typedObjectLiteral$a","typedObjectLiteral$9","recursiveAssign$9","typedObjectLiteral$8","ObjectProperty","assignArray","enableValidation","mutatorEvents","sourceTree","validationEvents","assignedSources","assignChange","assignedSource","assignSourceChange","validObject","iterateSourceProperties","assignSourcePropertyChange","assignSourcePropertyKeyChange","validatorTarget","validatorSource","validSourceProperty","propertyType","$eventType","sourceValue","subschema","modelPath","suboptions","assignment","subproperties","modelEventPath","sources","$propertyDescriptors","validationReport","propertyDescriptorEntries","definePropertiesChange","$propertyDescriptor","descriptors","descriptorTree","propertyValue","targetPropertyValue","getOwnPropertyDescriptor","definePropertyChange","definePropertyKeyChange","targetPropertyValueIsModelInstance","validProperty","submodel","prop","descriptor","recursive","seal","typedObjectLiteral$7","typedObjectLiteral$6","recursiveAssign$8","typedObjectLiteral$5","typeOf$3","typedObjectLiteral$4","recursiveAssign$7","typedObjectLiteral$3","typeOf$2","ArrayProperty","valueIndex","targetConcat","from","iterateValues","validValue","$subvalue","copyWithin","copyTarget","start","copiedItems","copyIndex","targetIndex","copyItem","item","items","fill","assignObject","lengthen","filled","$start","$end","fillIndex","iterateFillIndexes","popElement","popElementIndex","elementIndex","element","$elements","elements","elementsIndex","$element","validElement","submodelOptions","reference","shiftElement","shiftElementIndex","$deleteCount","$addItems","addCount","deleteItems","deleteItemsIndex","deleteItem","deleteIndex","addItemsIndex","spliceAdd","addItem","validAddItem","ValidatorEvent","startIndex","addIndex","deleted","added","regularExpressions$2","recursiveAssign$6","recursiveAssign$5","regularExpressions$1","typedObjectLiteral$2","typeOf$1","recursiveAssign$4","recursiveAssign$3","MapProperty","getProperty","pathkey","subpathError","propertyKey","_path","getContentProperty","getContent","setProperty","typeOfPropertyValue","isNaN","validTargetProp","_propertyValue","setContentProperty","setContent","delete","deleteProperty","differedPropertyProxy","validatorEventPath","deleteContentProperty","$targetPropertyKey","$targetPropertyValue","deleteContent","recursiveAssign$2","Defaults","methodDescriptor","$methodName","$parseSettings","replacer","space","$propertyName","recursiveAssign$1","typedObjectLiteral$1","ValidArrayAssigmentMethods","ValidObjectAssigmentMethods","Model","nonvalidProperty","concatElement","copyWithinElement","fillElement","pushElement","spliceDeleteElement","spliceAddElement","unshiftElement","assignSourceProperty","assignSource","freezeProperty","sealProperty","typeofEnableEvents","typeOfSchema","$propertyClassName","modelMethodOptions","structuredClone","methodOptions","Methods","Assign","parsement","$propertyDescriptorName","getOwnPropertyDescriptors","LocalStorage","db","localStorage","getItem","$content","setItem","remove","removeItem","ObjectureModel","window","location","pathname","save","content","load","unload","TOKENS","attribute","id","class","comma","combinator","universal","TRIM_TOKENS","Set","RECURSIVE_PSEUDO_CLASSES","nthChildRegExp","RECURSIVE_PSEUDO_CLASSES_ARGS","getArgumentPatternByType","replace","gobbleParens","text","offset","nesting","STRING_PATTERN","ESCAPE_PATTERN","tokenize","selector","grammar","replacements","repeat","quote","pos","tokens","token","lastIndex","args","before","groups","after","has","tokenizeBy","changedTokens","replacement","tokenOffset","nestTokens","list","t","selectors","temp","left","right","flatten","node","child","ast","argument","childArg","subtree","listOrNode","QuerySelector","method","querySelectors","Combinators","Query","$queryMethod","$queryString","query","queryString","queryTokens","parsel.tokenize","scopeCombinator","scopeQueryString","parsel.stringify","scopeQueryParse","parsel.parse","children","$childIndex","$child","dexter","matches","childQuery","NodeList","Node","View","templates","scope","parentElement","_template","eventListeners","enableQuerySelectors","_querySelectors","qs","addQuerySelectors","template","document","createElement","$templateString","disableQuerySelectors","innerHTML","append","$children","forEach","removeChild","clear","querySelector","$queryScope","querySelectorAll","$queryMethods","$selectors","$selectorName","$selector","removeQuerySelectors","render","$models","$template","Events","ok","$response","$requestMethod","response","status","statusCode","eventType","statusText","statusTextMessage","abort","$abortController","abortController","FetchRoute","origin","addMethods","$methods","$methodOptions","abortKey","async","$resourcePath","$resourceOptions","resourceOptions","urlSearchParams","headers","body","priority","pathParameters","URLSearchParams","resource","decodePath","createEvent","AbortController","signal","fetch","then","$fetchSource","clone","catch","pathFragments","resourcePathFragments","decodedPathFragments","pathFragmentsIndex","pathFragment","resourcePathFragment","removeMethods","aborted","$eventTarget","FetchRouter","scheme","domain","port","_authority","_origin","routes","authority","$routes","addRoutes","_routes","$routePath","$routeSettings","removeRoutes","dist","TokenData","encode","encodeURIComponent","delimiter","DEFAULT_DELIMITER","tokensToFunction","data","missing","decode","decodeURIComponent","pathToRegexp","decoders","NOOP_VALUE","input","m","params","create","decoder","stringifyToken","isSafe","first","rest","ID_START","every","ID_CONTINUE","isNameSafe","isNextNameSafe","DEBUG_URL","SIMPLE_TOKENS","escape","Iter","peek","_peek","next","tryConsume","consume","nextType","encodePath","it","chars","lexer","endType","param","encoders","encodeValue","tokenToFunction","encoder","extras","sensitive","trailing","seq","sequenceToRegExp","init","fork","backtrack","isSafeSegmentParam","Route","_settings","active","$settingVal","$active","RouteEvent","route","LocationRouter","hashpath","windowLocationOrigin","base","routeEntries","setRoute","boundPopstate","popstate","navigate","$method","matchPath","matchRoute","hash","href","routeEventOptions","preterRoute","history","search","enableRoute","getRoute","disableRoute","routeSettings","deleteRoute","routeEntryIndex","iterateMatchEntries","$route","SocketEvent","socket","$socket","isBinary","MessageAdapter","SocketRouter","webSocket","messageAdapters","url","boundMessage","WebSocket","protocol","host","URL","$isBinary","$messageAdapter","messageEvent","$adapter","adapter","send","Instate","ValidClasses","Class","Deinstate","Control","models","views","controls","fetchRouters","locationRouters","ObjectKeys$1","TypeKeys$1","regularExpressions$3","typeOf$6","typedObjectLiteral$e","Options$2","impandTree$1","recursiveAssign$f","recursiveFreeze$1"],"mappings":"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","x_google_ignoreList":[14,25]}