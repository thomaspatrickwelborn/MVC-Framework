{"version":3,"file":"mvc-framework.min.js","sources":["../../../../Core-Plex/distributement/core-plex.js","../../../../Recourse/distributement/recourse.js","../../../development/core/settings/index.js","../../../development/core/options/index.js","../../../development/core/index.js","../../../node_modules/objecture/distributement/objecture.sans.core-plex.js","../../../node_modules/parsel-js/dist/parsel.js","../../../development/view/querySelector/index.js","../../../development/view/query/index.js","../../../development/view/index.js","../../../development/view/settings/index.js","../../../development/view/options/index.js","../../../development/routers/fetch/interfaces/response/events/index.js","../../../development/routers/fetch/fetchRoute/index.js","../../../development/routers/fetch/index.js","../../../development/routers/fetch/settings/index.js","../../../development/routers/fetch/options/index.js","../../../node_modules/path-to-regexp/dist/index.js","../../../development/routers/location/route/index.js","../../../development/routers/location/routeEvent/index.js","../../../development/routers/location/index.js","../../../development/routers/location/settings/index.js","../../../development/routers/location/options/index.js","../../../development/routers/socket/event/index.js","../../../development/routers/socket/messageAdapter/index.js","../../../development/routers/socket/index.js","../../../development/routers/socket/settings/index.js","../../../development/routers/socket/options/index.js","../../../development/control/index.js","../../../development/control/settings/index.js","../../../development/control/options/index.js","../../../node_modules/objecture/distributement/objecture.js"],"sourcesContent":["const Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n};\nObject.values(Primitives);\nconst Objects = {\n  'object': Object,\n  'array': Array,\n};\nObject.values(Objects);\nconst Types = Object.assign({}, Primitives, Objects);\nObject.values(Types);\n[\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n];\n\nvar typeOf = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nconst defaultAccessor$1 = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n};\nvar Accessors = {\n  default: defaultAccessor$1};\n\nconst Options$2 = {\n  depth: 0,\n  maxDepth: 10,\n  accessors: [Accessors.default],\n  ancestors: [],\n};\nfunction propertyDirectory($object, $options) {\n  const _propertyDirectory = [];\n  const options = Object.assign({}, Options$2, $options, {\n    ancestors: [].concat($options.ancestors)\n  });\n  options.depth++;\n  if(options.depth > options.maxDepth) { return _propertyDirectory }\n  iterateAccessors: \n  for(const $accessor of options.accessors) {\n    const accessor = $accessor.bind($object);\n    const object = accessor($object);\n    if(!object) { continue iterateAccessors }\n    if(!options.ancestors.includes(object)) { options.ancestors.unshift(object); }\n    for(const [$key, $value] of Object.entries(object)) {\n      if(!options.values) { _propertyDirectory.push($key); }\n      else if(options.values) { _propertyDirectory.push([$key, $value]); }\n      if(\n        typeof $value === 'object' &&\n        $value !== null &&\n        !Object.is($value, object) && \n        !options.ancestors.includes($value)\n      ) {\n        const subtargets = propertyDirectory($value, options);\n        if(!options.values) {\n          for(const $subtarget of subtargets) {\n            const path = [$key, $subtarget].join('.');\n            _propertyDirectory.push(path);\n          }\n        }\n        else if(options.values) {\n          for(const [$subtargetKey, $subtarget] of subtargets) {\n            const path = [$key, $subtargetKey].join('.');\n            _propertyDirectory.push([path, $subtarget]);\n          }\n        }\n      }\n    }\n  }\n  return _propertyDirectory\n}\n\nfunction assign($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = assign($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nfunction expandEvents($propEvents, $scopeKey = ':scope') {\n  if(\n    Array.isArray($propEvents) ||\n    $propEvents === undefined\n  ) { return $propEvents }\n  const propEvents = [];\n  for(const [\n    $propEventSettings, $propEventListener\n  ] of Object.entries($propEvents)) {\n    const propEventSettings = $propEventSettings.trim().split(' ');\n    let path, type, listener;\n    if(propEventSettings.length === 1) {\n      path = $scopeKey;\n      type = propEventSettings[0];\n    }\n    else if(propEventSettings.length > 1) {\n      path = propEventSettings[0];\n      type = propEventSettings[1];\n    }\n    if(Array.isArray($propEventListener)) {\n      listener = $propEventListener[0];\n      $propEventListener[1];\n    }\n    else {\n      listener = $propEventListener;\n    }\n    const propEvent = {\n      type,\n      path,\n      listener,\n      enable: false,\n    };\n    propEvents.push(propEvent);\n  }\n  return propEvents\n}\n\nconst defaultAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n};\nvar accessors = {\n  default: defaultAccessor};\n\nvar Settings$1 = ($settings = {}) => {\n  const Settings = {\n    events: {},\n    enableEvents: false,\n    propertyDirectory: {\n      accessors: [accessors.default],\n      scopeKey: ':scope', \n      maxDepth: 10,\n    },\n    propertyDefinitions: {\n      getEvents: 'getEvents',\n      addEvents: 'addEvents',\n      removeEvents: 'removeEvents',\n      enableEvents: 'enableEvents',\n      disableEvents: 'disableEvents',\n      reenableEvents: 'reenableEvents',\n      emitEvents: 'emitEvents',\n    },\n  };\n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'propertyDefinitions':\n      case 'propertyDirectory':\n        Settings[$settingKey] = Object.assign(Settings[$settingKey], $settingValue);\n        break\n      default: \n        Settings[$settingKey] = $settingValue;\n        break\n    }\n  }\n  return Settings\n};\n\nfunction handleNoCommaBraces(span) {\n    if (span.length < 3) {\n        return \"{\" + span + \"}\";\n    }\n    var separatorI = -1;\n    for (var i = 2; i < span.length; i++) {\n        if (span[i] === '.' && span[i - 1] === '.' && (i < 2 || span[i - 2] !== '\\\\')) {\n            if (separatorI > -1) {\n                return \"{\" + span + \"}\";\n            }\n            separatorI = i - 1;\n        }\n    }\n    if (separatorI > -1) {\n        var rangeStart = span.substr(0, separatorI);\n        var rangeEnd = span.substr(separatorI + 2);\n        if (rangeStart.length > 0 && rangeEnd.length > 0) {\n            return \"[\" + span.substr(0, separatorI) + \"-\" + span.substr(separatorI + 2) + \"]\";\n        }\n    }\n    return \"{\" + span + \"}\";\n}\nfunction expand(pattern) {\n    if (typeof pattern !== 'string') {\n        throw new TypeError(\"A pattern must be a string, but \" + typeof pattern + \" given\");\n    }\n    var scanning = false;\n    var openingBraces = 0;\n    var closingBraces = 0;\n    var handledUntil = -1;\n    var results = [''];\n    var alternatives = [];\n    var span;\n    for (var i = 0; i < pattern.length; i++) {\n        var char = pattern[i];\n        if (char === '\\\\') {\n            i++;\n            continue;\n        }\n        if (char === '{') {\n            if (scanning) {\n                openingBraces++;\n            }\n            else if (i > handledUntil && !openingBraces) {\n                span = pattern.substring(handledUntil + 1, i);\n                for (var j = 0; j < results.length; j++) {\n                    results[j] += span;\n                }\n                alternatives = [];\n                handledUntil = i;\n                scanning = true;\n                openingBraces++;\n            }\n            else {\n                openingBraces--;\n            }\n        }\n        else if (char === '}') {\n            if (scanning) {\n                closingBraces++;\n            }\n            else if (closingBraces === 1) {\n                span = pattern.substring(handledUntil + 1, i);\n                if (alternatives.length > 0) {\n                    var newResults = [];\n                    alternatives.push(expand(span));\n                    for (var j = 0; j < results.length; j++) {\n                        for (var k = 0; k < alternatives.length; k++) {\n                            for (var l = 0; l < alternatives[k].length; l++) {\n                                newResults.push(results[j] + alternatives[k][l]);\n                            }\n                        }\n                    }\n                    results = newResults;\n                }\n                else {\n                    span = handleNoCommaBraces(span);\n                    for (var j = 0; j < results.length; j++) {\n                        results[j] += span;\n                    }\n                }\n                handledUntil = i;\n                closingBraces--;\n            }\n            else {\n                closingBraces--;\n            }\n        }\n        else if (!scanning && char === ',' && closingBraces - openingBraces === 1) {\n            span = pattern.substring(handledUntil + 1, i);\n            alternatives.push(expand(span));\n            handledUntil = i;\n        }\n        if (scanning && (closingBraces === openingBraces || i === pattern.length - 1)) {\n            scanning = false;\n            i = handledUntil - 1;\n        }\n    }\n    if (handledUntil === -1) {\n        return [pattern];\n    }\n    var unhandledFrom = pattern[handledUntil] === '{' ? handledUntil : handledUntil + 1;\n    if (unhandledFrom < pattern.length) {\n        span = pattern.substr(unhandledFrom);\n        for (var j = 0; j < results.length; j++) {\n            results[j] += span;\n        }\n    }\n    return results;\n}\n\nfunction negate(pattern, options) {\n    var supportNegation = options['!'] !== false;\n    var supportParens = options['()'] !== false;\n    var isNegated = false;\n    var i;\n    if (supportNegation) {\n        for (i = 0; i < pattern.length && pattern[i] === '!'; i++) {\n            if (supportParens && pattern[i + 1] === '(') {\n                i--;\n                break;\n            }\n            isNegated = !isNegated;\n        }\n        if (i > 0) {\n            pattern = pattern.substr(i);\n        }\n    }\n    return { pattern: pattern, isNegated: isNegated };\n}\n\nfunction escapeRegExpChar(char) { if (char === '-' ||\n    char === '^' ||\n    char === '$' ||\n    char === '+' ||\n    char === '.' ||\n    char === '(' ||\n    char === ')' ||\n    char === '|' ||\n    char === '[' ||\n    char === ']' ||\n    char === '{' ||\n    char === '}' ||\n    char === '*' ||\n    char === '?' ||\n    char === '\\\\') {\n    return \"\\\\\" + char;\n}\nelse {\n    return char;\n} }\nfunction escapeRegExpString(str) {\n    var result = '';\n    for (var i = 0; i < str.length; i++) {\n        result += escapeRegExpChar(str[i]);\n    }\n    return result;\n}\n\nfunction Pattern(source, options, excludeDot) {\n    var separator = typeof options.separator === 'undefined' ? true : options.separator;\n    var separatorSplitter = '';\n    var separatorMatcher = '';\n    var wildcard = '.';\n    if (separator === true) {\n        separatorSplitter = '/';\n        separatorMatcher = '[/\\\\\\\\]';\n        wildcard = '[^/\\\\\\\\]';\n    }\n    else if (separator) {\n        separatorSplitter = separator;\n        separatorMatcher = escapeRegExpString(separatorSplitter);\n        if (separatorMatcher.length > 1) {\n            separatorMatcher = \"(?:\" + separatorMatcher + \")\";\n            wildcard = \"((?!\" + separatorMatcher + \").)\";\n        }\n        else {\n            wildcard = \"[^\" + separatorMatcher + \"]\";\n        }\n    }\n    else {\n        wildcard = '.';\n    }\n    var requiredSeparator = separator ? separatorMatcher + \"+?\" : '';\n    var optionalSeparator = separator ? separatorMatcher + \"*?\" : '';\n    var segments = separator ? source.split(separatorSplitter) : [source];\n    var support = {\n        qMark: options['?'] !== false,\n        star: options['*'] !== false,\n        globstar: separator && options['**'] !== false,\n        brackets: options['[]'] !== false,\n        extglobs: options['()'] !== false,\n        excludeDot: excludeDot && options.excludeDot !== false,\n    };\n    return {\n        source: source,\n        segments: segments,\n        options: options,\n        separator: separator,\n        separatorSplitter: separatorSplitter,\n        separatorMatcher: separatorMatcher,\n        optionalSeparator: optionalSeparator,\n        requiredSeparator: requiredSeparator,\n        wildcard: wildcard,\n        support: support,\n    };\n}\nfunction Segment(source, pattern, isFirst, isLast) { return {\n    source: source,\n    isFirst: isFirst,\n    isLast: isLast,\n    end: source.length - 1,\n}; }\nfunction Result() {\nreturn {\n    match: '',\n    unmatch: '',\n    useUnmatch: false,\n}; }\nfunction State(pattern, segment, result) { return {\n    pattern: pattern,\n    segment: segment,\n    result: result,\n    openingBracket: segment.end + 1,\n    closingBracket: -1,\n    openingParens: 0,\n    closingParens: 0,\n    parensHandledUntil: -1,\n    extglobModifiers: [],\n    scanningForParens: false,\n    escapeChar: false,\n    addToMatch: true,\n    addToUnmatch: pattern.support.extglobs,\n    dotHandled: false,\n    i: -1,\n    char: '',\n    nextChar: '',\n}; }\n\nvar EXCLUDE_DOT_PATTERN = '(?!\\\\.)';\nfunction add(state, addition, excludeDot) {\n    if (state.addToUnmatch) {\n        state.result.unmatch += addition;\n    }\n    if (state.addToMatch) {\n        if (excludeDot && !state.dotHandled) {\n            addition = EXCLUDE_DOT_PATTERN + addition;\n        }\n        state.dotHandled = true;\n        state.result.match += addition;\n    }\n    return state.result;\n}\nfunction convertSegment(pattern, segment, result) {\n    var support = pattern.support;\n    var state = State(pattern, segment, result);\n    var separatorMatcher = segment.isLast\n        ? pattern.optionalSeparator\n        : pattern.requiredSeparator;\n    if (!support.excludeDot) {\n        state.dotHandled = true;\n    }\n    if (segment.end === -1) {\n        return segment.isLast && !segment.isFirst ? result : add(state, separatorMatcher);\n    }\n    if (support.globstar && segment.source === '**') {\n        var prefix = !state.dotHandled ? EXCLUDE_DOT_PATTERN : '';\n        var globstarSegment = prefix + pattern.wildcard + \"*?\" + separatorMatcher;\n        return add(state, \"(?:\" + globstarSegment + \")*?\");\n    }\n    while (++state.i <= segment.end) {\n        state.char = state.segment.source[state.i];\n        state.nextChar = state.i < segment.end ? segment.source[state.i + 1] : '';\n        if (state.char === '\\\\') {\n            if (state.i < state.segment.end) {\n                state.escapeChar = true;\n                continue;\n            }\n            else {\n                state.char = '';\n            }\n        }\n        var pattern = state.pattern, segment = state.segment, char = state.char, i = state.i;\n        if (pattern.support.brackets && !state.scanningForParens) {\n            if (i > state.openingBracket && i <= state.closingBracket) {\n                if (state.escapeChar) {\n                    add(state, escapeRegExpChar(char));\n                }\n                else if (i === state.closingBracket) {\n                    add(state, ']');\n                    state.openingBracket = segment.source.length;\n                }\n                else if (char === '-' && i === state.closingBracket - 1) {\n                    add(state, '\\\\-');\n                }\n                else if (char === '!' && i === state.openingBracket + 1) {\n                    add(state, '^');\n                }\n                else if (char === ']') {\n                    add(state, '\\\\]');\n                }\n                else {\n                    add(state, char);\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (i > state.openingBracket) {\n                if (char === ']' &&\n                    !state.escapeChar &&\n                    i > state.openingBracket + 1 &&\n                    i > state.closingBracket) {\n                    state.closingBracket = i;\n                    state.i = state.openingBracket;\n                    if (pattern.separator) {\n                        add(state, \"(?!\" + pattern.separatorMatcher + \")[\", true);\n                    }\n                    else {\n                        add(state, '[', true);\n                    }\n                }\n                else if (i === segment.end) {\n                    add(state, '\\\\[');\n                    state.i = state.openingBracket;\n                    state.openingBracket = segment.source.length;\n                    state.closingBracket = segment.source.length;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (char === '[' &&\n                !state.escapeChar &&\n                i > state.closingBracket &&\n                i < segment.end) {\n                state.openingBracket = i;\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        if (state.pattern.support.extglobs) {\n            var extglobModifiers = state.extglobModifiers, char = state.char, nextChar = state.nextChar, i = state.i;\n            if (nextChar === '(' &&\n                !state.escapeChar &&\n                (char === '@' || char === '?' || char === '*' || char === '+' || char === '!')) {\n                if (state.scanningForParens) {\n                    state.openingParens++;\n                }\n                else if (i > state.parensHandledUntil && !state.closingParens) {\n                    state.parensHandledUntil = i;\n                    state.scanningForParens = true;\n                    state.openingParens++;\n                }\n                else if (state.closingParens >= state.openingParens) {\n                    if (char === '!') {\n                        state.addToMatch = true;\n                        state.addToUnmatch = false;\n                        add(state, state.pattern.wildcard + \"*?\", true);\n                        state.addToMatch = false;\n                        state.addToUnmatch = true;\n                        state.result.useUnmatch = true;\n                    }\n                    extglobModifiers.push(char);\n                    add(state, '(?:', true);\n                    state.openingParens--;\n                    state.i++;\n                    continue;\n                }\n                else {\n                    state.openingParens--;\n                }\n            }\n            else if (char === ')' && !state.escapeChar) {\n                if (state.scanningForParens) {\n                    state.closingParens++;\n                }\n                else if (extglobModifiers.length) {\n                    var modifier_1 = extglobModifiers.pop();\n                    if (modifier_1 === '!' && extglobModifiers.indexOf('!') !== -1) {\n                        throw new Error(\"Nested negated extglobs aren't supported\");\n                    }\n                    modifier_1 = modifier_1 === '!' || modifier_1 === '@' ? '' : modifier_1;\n                    add(state, \")\" + modifier_1);\n                    state.addToMatch = true;\n                    state.addToUnmatch = true;\n                    state.closingParens--;\n                    continue;\n                }\n            }\n            else if (char === '|' && state.closingParens &&\n                !state.scanningForParens &&\n                !state.escapeChar) {\n                add(state, '|');\n                continue;\n            }\n            if (state.scanningForParens) {\n                if (state.closingParens === state.openingParens || i === state.segment.end) {\n                    state.scanningForParens = false;\n                    state.i = state.parensHandledUntil - 1;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        var pattern = state.pattern;\n        var support = pattern.support;\n        if (!state.escapeChar && support.star && state.char === '*') {\n            if (state.i === state.segment.end || state.nextChar !== '*') {\n                add(state, pattern.wildcard + \"*?\", true);\n            }\n        }\n        else if (!state.escapeChar && support.qMark && state.char === '?') {\n            add(state, pattern.wildcard, true);\n        }\n        else {\n            add(state, escapeRegExpChar(state.char));\n        }\n        state.escapeChar = false;\n    }\n    return add(state, separatorMatcher);\n}\nfunction convert(source, options, excludeDot) {\n    var pattern = Pattern(source, options, excludeDot);\n    var result = Result();\n    var segments = pattern.segments;\n    for (var i = 0; i < segments.length; i++) {\n        var segment = Segment(segments[i], pattern, i === 0, i === segments.length - 1);\n        convertSegment(pattern, segment, result);\n    }\n    if (result.useUnmatch) {\n        return \"(?!^\" + result.unmatch + \"$)\" + result.match;\n    }\n    else {\n        return result.match;\n    }\n}\n\nfunction flatMap(array, predicate) {\n    var results = [];\n    for (var i = 0; i < array.length; i++) {\n        var mappedValue = predicate(array[i]);\n        for (var j = 0; j < mappedValue.length; j++) {\n            results.push(mappedValue[j]);\n        }\n    }\n    return results;\n}\nfunction compile(patterns, options) {\n    patterns = Array.isArray(patterns) ? patterns : [patterns];\n    if (options['{}'] !== false) {\n        patterns = flatMap(patterns, expand);\n    }\n    var positiveResults = [];\n    var negativeResults = [];\n    var result = '';\n    for (var i = 0; i < patterns.length; i++) {\n        var negatedPattern = negate(patterns[i], options);\n        var convertedPattern = convert(negatedPattern.pattern, options, !negatedPattern.isNegated);\n        if (negatedPattern.isNegated) {\n            negativeResults.push(convertedPattern);\n        }\n        else {\n            positiveResults.push(convertedPattern);\n        }\n    }\n    if (negativeResults.length) {\n        result = \"(?!(?:\" + negativeResults.join('|') + \")$)\";\n    }\n    if (positiveResults.length > 1) {\n        result += \"(?:\" + positiveResults.join('|') + \")\";\n    }\n    else if (positiveResults.length === 1) {\n        result += positiveResults[0];\n    }\n    else if (result.length) {\n        result += convert('**', options, true);\n    }\n    return \"^\" + result + \"$\";\n}\nfunction isMatch(regexp, sample) { if (typeof sample !== 'string') {\n    throw new TypeError(\"Sample must be a string, but \" + typeof sample + \" given\");\n} return regexp.test(sample); }\n/**\n * Compiles one or more glob patterns into a RegExp and returns an isMatch function.\n * The isMatch function takes a sample string as its only argument and returns true\n * if the string matches the pattern(s).\n *\n * ```js\n * outmatch('src/*.js')('src/index.js') //=> true\n * ```\n *\n * ```js\n * const isMatch = outmatch('*.example.com', '.')\n * isMatch('foo.example.com') //=> true\n * isMatch('foo.bar.com') //=> false\n * ```\n */\nfunction outmatch(pattern, options) {\n    if (typeof pattern !== 'string' && !Array.isArray(pattern)) {\n        throw new TypeError(\"The first argument must be a single pattern string or an array of patterns, but \" + typeof pattern + \" given\");\n    }\n    if (typeof options === 'string' || typeof options === 'boolean') {\n        options = { separator: options };\n    }\n    if (arguments.length === 2 &&\n        !(typeof options === 'undefined' ||\n            (typeof options === 'object' && options !== null && !Array.isArray(options)))) {\n        throw new TypeError(\"The second argument must be an options object or a string/boolean separator, but \" + typeof options + \" given\");\n    }\n    options = options || {};\n    if (options.separator === '\\\\') {\n        throw new Error('\\\\ is not a valid separator');\n    }\n    var regexpPattern = compile(pattern, options);\n    var regexp = new RegExp(regexpPattern, options.flags);\n    var fn = isMatch.bind(null, regexp);\n    fn.options = options;\n    fn.pattern = pattern;\n    fn.regexp = regexp;\n    return fn;\n}\n\nvar Settings = ($settings = {}) => {\n  const Settings = {\n    enable: false,\n    assign: 'addEventListener', deassign: 'removeEventListener', transsign: 'dispatchEvent',\n    bindListener: true,\n    errorLog: false,\n    methods: {\n      assign: {\n        addEventListener: function addEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition;\n          const { options, useCapture } = settings;\n          return $target['addEventListener'](type, listener, options || useCapture)\n        },\n        on: function on($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['on'](type, listener)\n        },\n        once: function once($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['once'](type, listener)\n        },\n      }, \n      deassign: {\n        removeEventListener: function removeEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition;\n          const { options, useCapture } = settings;\n          return $target['removeEventListener'](type, listener, options || useCapture)\n        },\n        off: function off($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['off'](type, listener)\n        },\n      },\n      transsign: {\n        dispatchEvent: function dispatchEvent($eventDefinition, $target, $event) {\n          return $target['dispatchEvent']($event)\n        },\n        emit: function emit($eventDefinition, $target, $type, ...$arguments) {\n          return $target['emit']($type, ...$arguments)\n        },\n      },\n    },\n  };\n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'methods': \n        Settings[$settingKey] = assign(Settings[$settingKey], $settingValue);\n        break\n      case 'enableEvents': break\n      default: \n        Settings[$settingKey] = $settingValue;\n        break\n    }\n  }\n  return Settings\n};\n\nclass EventDefinition {\n  #context\n  #enable = false\n  #nontranssigned = []\n  #_targets = []\n  #_assign\n  #_deassign\n  #_transsign\n  constructor($settings, $context) { \n    if(!$settings || !$context) { return this }\n    const settings = Settings($settings);\n    const assigned = [];\n    const deassigned = [];\n    const transsigned = [];\n    Object.defineProperties(this, {\n      'settings': { value: settings },\n      'path': { value: settings.path },\n      'type': { value: settings.type },\n      'assigned': { value: assigned },\n      'deassigned': { value: deassigned },\n      'transsigned': { value: transsigned },\n      'listener':  { configurable: true, get() {\n        const typeOfListener = typeOf(settings.listener);\n        let listener; \n        if(typeOfListener === 'string') {\n          let listenerTarget = $context;\n          iterateListenerPathKeys: \n          for(const $pathKey of settings.listener.split('.')) {\n            const value = listenerTarget[$pathKey];\n            if(value !== undefined) { listenerTarget = listenerTarget[$pathKey]; }\n            else { break iterateListenerPathKeys }\n          }\n          if(typeOf(listenerTarget) === 'function') {\n            listener = listenerTarget;\n          }\n        }\n        else { listener = settings.listener; }\n        if(settings.bindListener === true) {\n          listener = listener.bind(this.#context);\n        }\n        Object.defineProperty(this, 'listener', { value: listener });\n        return listener\n      } }\n    });\n    this.#context = $context;\n    this.enable = this.settings.enable;\n  }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    const targets = this.#targets;\n    const assigned = this.assigned;\n    const deassigned = this.deassigned;\n    assigned.length = 0;\n    deassigned.length = 0;\n    iterateTargetElements: \n    for(const $targetElement of targets) {\n      const { path, target, enable } = $targetElement;\n      this.settings;\n      if(enable === $enable) { continue iterateTargetElements }\n      if($enable === true) {\n        try {\n          this.#assign(target);\n          $targetElement.enable = $enable;\n          assigned.push($targetElement);\n          \n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err); } }\n      }\n      else if($enable === false) {\n        try {\n          this.#deassign(target);\n          $targetElement.enable = $enable;\n          deassigned.push($targetElement);\n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err); } }\n      }\n    }\n    this.#enable = $enable;\n  }\n  get #target() { return this.settings.target }\n  get #targets() {\n    const pretargets = this.#_targets;\n    const targets = [];\n    if(this.#target) {\n      for(const $target of [].concat(this.#target)) {\n        const pretargetElement = pretargets.find(\n          ($pretarget) => $pretarget?.path === this.path\n        );\n        if(pretargetElement !== undefined) {\n          targets.push(pretargetElement);\n        }\n        else if(pretargetElement === undefined) {ptargets.push({\n            path: this.path,\n            target: $target,\n            enable: false,\n          });\n        }\n      }\n    }\n    else if(typeOf(this.path) === 'string') {\n      const targetPaths = [];\n      if(this.path === this.#scopeKey) {\n        const targetElement = {\n          path: this.path,\n          target: this.#context,\n          enable: false,\n        };\n        targets.push(targetElement);\n      }\n      else {\n        if(this.settings.propertyDirectory) {\n          const propertyDirectory = this.#propertyDirectory;\n          const propertyPathMatcher = outmatch(this.path, {\n            separator: '.',\n          });\n          for(const [$propertyPath, $propertyValue] of propertyDirectory) {\n            const propertyPathMatch = propertyPathMatcher($propertyPath);\n            if(propertyPathMatch === true) { targetPaths.push([$propertyPath, $propertyValue]); }\n          }\n          if(this.path.charAt(0) === '*') {\n            targetPaths.unshift([this.#scopeKey, this.#context]);\n          }\n        }\n        else {\n          targetPaths.push(this.path);\n        }\n        for(const [$targetPath, $targetValue] of targetPaths) {\n          const pretargetElement = pretargets.find(\n            ($pretarget) => $pretarget.path === $targetPath\n          );\n          let target = $targetValue;\n          let targetElement;\n          if(target !== undefined) {\n            if(target === pretargetElement?.target) {\n              targetElement = pretargetElement;\n            }\n            else if(typeof target === 'object') {\n              targetElement = {\n                path: $targetPath,\n                target: target,\n                enable: false,\n              };\n            }\n          }\n          if(targetElement !== undefined) { targets.push(targetElement); }\n        }\n      }\n    }\n    this.#_targets = targets;\n    return this.#_targets\n  }\n  get #scopeKey() { return this.settings.propertyDirectory.scopeKey }\n  get #assign() {\n    if(this.#_assign !== undefined) { return this.#_assign }\n    this.#_assign = this.settings.methods.assign[this.settings.assign].bind(null, this);\n    return this.#_assign\n  }\n  get #deassign() {\n    if(this.#_deassign !== undefined) { return this.#_deassign }\n    this.#_deassign = this.settings.methods.deassign[this.settings.deassign].bind(null, this);\n    return this.#_deassign\n  }\n  get #transsign() {\n    if(this.#_transsign !== undefined) { return this.#_transsign }\n    this.#_transsign = this.settings.methods.transsign[this.settings.transsign].bind(null, this);\n    return this.#_transsign\n  }\n  get #propertyDirectory() {\n    if(!this.settings.propertyDirectory) { return null }\n    const propertyDirectorySettings = Object.assign(this.settings.propertyDirectory, { values: true });\n    return propertyDirectory(this.#context, propertyDirectorySettings)\n  }\n  emit() {\n    const targets = this.#targets;\n    const transsigned = this.transsigned;\n    const nontranssigned = this.#nontranssigned;\n    transsigned.length = 0;\n    nontranssigned.length = 0;\n    for(const $targetElement of targets) {\n      const { target } = $targetElement;\n      try {\n        this.#transsign(target, ...arguments);\n        transsigned.push($targetElement);\n      }\n      catch($err) { nontranssigned.push($targetElement); }\n    }\n    return this\n  }\n}\n\nclass Core extends EventTarget {\n  static implement = function ($target, $settings) {\n    if(!$target || !$settings) { return undefined }\n    const settings = Settings$1($settings);\n    const events = [];\n    Object.defineProperties($target, {\n      [settings.propertyDefinitions.getEvents]: {\n        enumerable: false, writable: false, \n        value: function getEvents() {\n          if(!arguments[0]) { return events }\n          const getEvents = [];\n          const $filterEvents = [].concat(arguments[0]);\n          for(const $filterEvent of $filterEvents) {\n            for(const $event of events) {\n              let match;\n              iterateEventFilterProperties: \n              for(const [\n                $filterEventPropertyKey, $filterEventPropertyValue\n              ] of Object.entries($filterEvent)) {\n                let eventFilterMatch;\n                if($filterEventPropertyKey === 'listener') {\n                  eventFilterMatch = (\n                    $event.settings[$filterEventPropertyKey] === $filterEventPropertyValue\n                  );\n                }\n                else {\n                  eventFilterMatch = (\n                    $event[$filterEventPropertyKey] === $filterEventPropertyValue\n                  );\n                }\n                if(match !== false) { match = eventFilterMatch; }\n                else { break iterateEventFilterProperties }\n              }\n              if(match === true) { getEvents.push($event); }\n            }\n          }\n          return getEvents\n        }\n      },\n      [settings.propertyDefinitions.addEvents]: {\n        enumerable: false, writable: false, \n        value: function addEvents() {\n          if(!arguments.length) { return $target }\n          let $addEvents = expandEvents(arguments[0], settings.propertyDirectory.scopeKey);\n          let $enableEvents = arguments[1] || false;\n          for(let $addEvent of $addEvents) {\n            const event = {};\n            for(const $settingKey of [\n              'assign', 'deassign', 'transsign', 'propertyDirectory', 'bindListener'\n            ]) {\n              const settingValue = settings[$settingKey];\n              if(settingValue !== undefined) { event[$settingKey] = settingValue; }\n            }\n            assign(event, $addEvent);\n            const eventDefinition = new EventDefinition(event, $target);\n            if($enableEvents) { eventDefinition.enable = true; }\n            events.push(eventDefinition);\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.removeEvents]: {\n        enumerable: false, writable: false, \n        value: function removeEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          let eventsIndex = events.length - 1;\n          while(eventsIndex > -1) {\n            const event = events[eventsIndex];\n            if($events.includes(event)) {\n              event.enable = false;\n              events.splice(eventsIndex, 1);\n            }\n            eventsIndex--;\n          }\n          return $target\n        }\n      },\n      [settings.propertyDefinitions.enableEvents]: {\n        enumerable: false, writable: false, \n        value: function enableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          for(const $event of $events) { $event.enable = true; }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.disableEvents]: {\n        enumerable: false, writable: false, \n        value: function disableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          for(const $event of $events) { $event.enable = false; }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.reenableEvents]: {\n        enumerable: false, writable: false, \n        value: function reenableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          for(const $event of $events) {\n            $event.enable = false;\n            $event.enable = true;\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.emitEvents]: {\n        enumerable: false, writable: false, \n        value: function emitEvents($filterEvents, ...$eventParameters) {\n          const $events = $target[settings.propertyDefinitions.getEvents]($filterEvents);\n          for(const $event of $events) {\n            $event.emit(...$eventParameters);\n          }\n          return $target\n        },\n      },\n    });\n    if(settings.events) { $target[settings.propertyDefinitions.addEvents](settings.events); }\n    if(settings.enableEvents === true) { $target[settings.propertyDefinitions.enableEvents](); }\n    return $target\n  }\n  constructor($settings = {}) {\n    super();\n    return Core.implement(this, $settings)\n  }\n}\n\nexport { Core as default };\n//# sourceMappingURL=core-plex.js.map\n","const Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n};\nconst PrimitiveKeys = Object.keys(Primitives);\nconst PrimitiveValues = Object.values(Primitives);\nconst Objects = {\n  'object': Object,\n  'array': Array,\n};\nconst ObjectKeys = Object.keys(Objects);\nconst ObjectValues = Object.values(Objects);\nconst Types = Object.assign({}, Primitives, Objects);\nconst TypeKeys = Object.keys(Types);\nconst TypeValues = Object.values(Types);\nconst TypeMethods = [\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n];\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ObjectKeys: ObjectKeys,\n  ObjectValues: ObjectValues,\n  Objects: Objects,\n  PrimitiveKeys: PrimitiveKeys,\n  PrimitiveValues: PrimitiveValues,\n  Primitives: Primitives,\n  TypeKeys: TypeKeys,\n  TypeMethods: TypeMethods,\n  TypeValues: TypeValues,\n  Types: Types\n});\n\nvar typeOf = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nfunction typedObjectLiteral($value) {\n  let _typedObjectLiteral;\n  const typeOfValue = typeOf($value);\n  if(typeOfValue === 'string') {\n    const value = $value.toLowerCase();\n    if(value === 'object') { _typedObjectLiteral = {}; }\n    else if(value === 'array') { _typedObjectLiteral = []; }\n  }\n  else  {\n    if(typeOfValue === 'object') { _typedObjectLiteral = {}; }\n    else if(typeOfValue === 'array') { _typedObjectLiteral = []; }\n  }\n  return _typedObjectLiteral\n}\n\nvar regularExpressions = {\n  quotationEscape: /\\.(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,\n};\n\nfunction get($path, $source) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n  const key = subpaths.pop();\n  let subtarget = $source;\n  for(const $subpath of subpaths) { subtarget = subtarget[$subpath]; }\n  return subtarget[key]\n}\nfunction set($path, $source) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n  const key = subpaths.pop();\n  const target = (key && !isNaN(key)) ? [] : {};\n  let subtarget = target;\n  let subpathIndex = 0;\n  while(subpathIndex < subpaths.length - 2) {\n    const $subpath = keypaths[subpathIndex];\n    if(isNaN($subpath)) { subtarget[$subpath] = {}; }\n    else { subtarget[$subpath] = {}; }\n    subtarget = subtarget[$subpath];\n    subpathIndex++;\n  }\n  subtarget[key] = $source;\n  return target\n}\n\nconst ValidPropertyTypes = ['string', 'function'];\nfunction expandTree($source, $property) {\n  const typeOfProperty = typeOf($property);\n  const typeOfSource = typeOf($source);\n  if(\n    !ValidPropertyTypes.includes(typeOfProperty) ||\n    !ObjectKeys.includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source);\n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    const sourceValue = (\n      ObjectKeys.includes(typeOf($sourceValue))\n    ) ? expandTree($sourceValue, $property) : $sourceValue;\n    if(typeOfProperty === ValidPropertyTypes[0]) {\n      target[$sourceKey] = set($property, sourceValue);\n    }\n    else if(typeOfProperty === ValidPropertyTypes[1]) {\n      target[$sourceKey] = $property(sourceValue);\n    }\n  }\n  return target\n}\n\nfunction impandTree($source, $property) {\n  const typeOfProperty = typeOf($property);\n  const typeOfSource = typeOf($source);\n  if(\n    !['string', 'function'].includes(typeOfProperty) ||\n    !['array', 'object'].includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral($source);\n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = get($property, $sourceValue); }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue); }\n    if(target[$sourceKey] && typeof target[$sourceKey] === 'object') {\n      target[$sourceKey] = impandTree(target[$sourceKey], $property);\n    }\n  }\n  return target\n}\n\nvar isArrayLike = ($source) => {\n  let isArrayLike;\n  const typeOfSource = typeOf($source);\n  if(typeOfSource === 'array') { isArrayLike = true; }\n  else if(\n    typeOfSource === 'object' &&\n    Number.isInteger($source.length) && $source.length >= 0\n  ) {\n    iterateSourceKeys: \n    for(const $sourceKey of Object.keys(\n      Object.getOwnPropertyDescriptors($source)\n    )) {\n      if($sourceKey === 'length') { continue iterateSourceKeys }\n      isArrayLike = !isNaN($sourceKey);\n      if(!isArrayLike) { break iterateSourceKeys }\n    }\n  }\n  else { isArrayLike = false; }\n  return isArrayLike\n};\n\nconst defaultAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n};\nvar Accessors = {\n  default: defaultAccessor};\n\nconst Options$2 = {\n  depth: 0,\n  maxDepth: 10,\n  accessors: [Accessors.default],\n  ancestors: [],\n};\nfunction propertyDirectory($object, $options) {\n  const _propertyDirectory = [];\n  const options = Object.assign({}, Options$2, $options, {\n    ancestors: [].concat($options.ancestors)\n  });\n  options.depth++;\n  if(options.depth > options.maxDepth) { return _propertyDirectory }\n  iterateAccessors: \n  for(const $accessor of options.accessors) {\n    const accessor = $accessor.bind($object);\n    const object = accessor($object);\n    if(!object) { continue iterateAccessors }\n    if(!options.ancestors.includes(object)) { options.ancestors.unshift(object); }\n    for(const [$key, $value] of Object.entries(object)) {\n      if(!options.values) { _propertyDirectory.push($key); }\n      else if(options.values) { _propertyDirectory.push([$key, $value]); }\n      if(\n        typeof $value === 'object' &&\n        $value !== null &&\n        !Object.is($value, object) && \n        !options.ancestors.includes($value)\n      ) {\n        const subtargets = propertyDirectory($value, options);\n        if(!options.values) {\n          for(const $subtarget of subtargets) {\n            const path = [$key, $subtarget].join('.');\n            _propertyDirectory.push(path);\n          }\n        }\n        else if(options.values) {\n          for(const [$subtargetKey, $subtarget] of subtargets) {\n            const path = [$key, $subtargetKey].join('.');\n            _propertyDirectory.push([path, $subtarget]);\n          }\n        }\n      }\n    }\n  }\n  return _propertyDirectory\n}\n\nfunction assign($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = assign($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nfunction assignConcat($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if( \n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = assignConcat($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else if(\n        typeOfTargetPropertyValue === 'array' &&\n        typeOfSourcePropertyValue === 'array'\n      ) {\n        $target[$sourcePropertyKey] = $target[$sourcePropertyKey].concat($sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nvar Options$1 = {\n  ancestors: [],\n  delimiter: '.',\n  depth: 0,\n  frozen: false,\n  maxDepth: 10,\n  nonenumerable: true,\n  path: false,\n  sealed: false,\n  type: false,\n};\n\nfunction getOwnPropertyDescriptor($properties, $propertyKey, $options) {\n  const options = Object.assign({}, Options$1, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  });\n  const propertyDescriptor = Object.getOwnPropertyDescriptor($properties, $propertyKey);\n  if(!options.nonenumerable && !propertyDescriptor.enumerable) { return }\n  if(!options.ancestors.includes($properties)) { options.ancestors.unshift($properties); }\n  if(options.ancestors.includes(propertyDescriptor.value)) { return }\n  if(options.path) {\n    options.path = (typeOf(options.path) === 'string') ? [options.path, $propertyKey].join(options.delimiter) : $propertyKey;\n    propertyDescriptor.path = options.path;\n  }\n  if(options.type) { propertyDescriptor.type = typeOf(propertyDescriptor.value); }\n  if(options.frozen) { propertyDescriptor.frozen = Object.isFrozen(propertyDescriptor.value); }\n  if(options.sealed) { propertyDescriptor.sealed = Object.isSealed(propertyDescriptor.value); }\n  if(['array', 'object'].includes(typeOf(propertyDescriptor.value))) {\n    propertyDescriptor.value = getOwnPropertyDescriptors(propertyDescriptor.value, options);\n  }\n  return propertyDescriptor\n}\n\nfunction getOwnPropertyDescriptors($properties, $options) {\n  const propertyDescriptors = {};\n  const options = Object.assign({}, Options$1, $options);\n  if(options.depth >= options.maxDepth) { return propertyDescriptors }\n  else { options.depth++; }\n  for(const [$propertyKey, $propertyDescriptor] of Object.entries(Object.getOwnPropertyDescriptors($properties))) {\n    const propertyDescriptor = getOwnPropertyDescriptor($properties, $propertyKey, options);\n    if(propertyDescriptor !== undefined) { propertyDescriptors[$propertyKey] = propertyDescriptor; }\n  }\n  return propertyDescriptors\n}\n\nvar Options = {\n  typeCoercion: false,\n};\n\nfunction defineProperty($target, $propertyKey, $propertyDescriptor, $options) {\n  const propertyDescriptor = Object.assign({}, $propertyDescriptor);\n  const options = Object.assign({}, Options, $options);\n  const typeOfPropertyValue = typeOf(propertyDescriptor.value);\n  if(['array', 'object'].includes(typeOfPropertyValue)) {\n    const propertyValue = isArrayLike(Object.defineProperties(\n      typedObjectLiteral(typeOfPropertyValue), propertyDescriptor.value\n    )) ? [] : {};\n    propertyDescriptor.value = defineProperties(propertyValue, propertyDescriptor.value, options);\n  }\n  else if(\n    options.typeCoercion && \n    Object.getOwnPropertyDescriptor(propertyDescriptor, 'type') !== undefined &&\n    !['undefined', 'null'].includes(typeOfPropertyValue)\n  ) {\n    propertyDescriptor.value = Primitives[propertyDescriptor.type](propertyDescriptor.value);\n  }\n  Object.defineProperty($target, $propertyKey, propertyDescriptor);\n  if($propertyDescriptor.sealed) { Object.seal($target[$propertyKey]); }\n  if($propertyDescriptor.frozen) { Object.freeze($target[$propertyKey]); }\n  return $target\n}\n\nfunction defineProperties($target, $propertyDescriptors, $options) {\n  const options = Object.assign({}, Options, $options);\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of Object.entries($propertyDescriptors)) {\n    defineProperty($target, $propertyKey, $propertyDescriptor, options);\n  }\n  return $target\n}\n\nfunction freeze($target) {\n  for(const [$propertyKey, $propertyValue] of Object.entries($target)) {\n    if(Object.is($propertyValue, $target)) { continue }\n    if($propertyValue && typeof $propertyValue === 'object') {\n      freeze($propertyValue);\n    }\n  }\n  return Object.freeze($target)\n}\n\nexport { assign, assignConcat, defineProperties, defineProperty, expandTree, freeze, getOwnPropertyDescriptor, getOwnPropertyDescriptors, impandTree, isArrayLike, propertyDirectory, regularExpressions, typeOf, typedObjectLiteral, index as variables };\n//# sourceMappingURL=recourse.js.map\n","export default ($settings) => Object.assign({}, $settings)","export default ($options) => Object.assign({\n  parent: null,\n  path: null,\n  enableEvents: true,\n  definition: null,\n  propertyClasses: [],\n}, $options)","import Core from 'core-plex'\nimport { typedObjectLiteral } from 'recourse'\nimport Settings from './settings/index.js'\nimport Options from './options/index.js'\nexport default class MVCFrameworkCore extends Core {\n  static propertyClasses = []\n  constructor($settings = {}, $options = {}) {\n    super(Object.assign({}, $options, {\n      propertyDirectory: {\n        accessors: [function objectAccessor($target, $property) {\n          if($property === undefined) { return $target }\n          else { return $target[$property] }\n        }, function mapAccessor($target, $property) {\n          if($target instanceof Map === true) {\n            if($property === undefined) { return Object.fromEntries($target) }\n            else { return $target.get($property) }\n          }\n        }, function objectureAccessor($target, $property) {\n          if($property === undefined) { return $target.target }\n          else { return $target.target[$property] }\n        }],\n      },\n    }))\n    const propertyClasses = []\n    const addProperties = ($properties) => {\n      const propertyClassNames = propertyClasses.map(\n        ($propertyClass) => $propertyClass.name\n      )\n      iteratePropertyClasses: \n      for(const $propertyClass of propertyClasses) {\n        const { administer, name, targetType } = $propertyClass\n        if(!targetType) { continue iteratePropertyClasses }\n        if($properties[name] === undefined) { continue iteratePropertyClasses }\n        if(targetType !== undefined) {\n          this[administer](this.settings[name])\n        }\n        else if(this.settings[name] !== undefined) {\n          this[name] = this.settings[name]\n        }\n      }\n      return this\n    }\n    let parent = null\n    let path = null\n    try {\n      Object.defineProperty(this, 'mount', { value: function($mount) {\n        const mountParent = $mount.parent\n        const mountPath = $mount.path\n        const property = (mountPath) ? mountPath.split('.').pop() : mountPath\n        if(parent) { parent.unmount(property) }\n        parent = mountParent\n        path = mountPath\n      } })\n    }\n    catch($err) { console.error($err) }\n    try {\n      Object.defineProperty(this, 'unmount', { value: function($unmount) {\n        const unmountPath = $unmount.path\n        delete this[$property]\n      } })\n    }\n    catch($err) { console.error($err) }\n    Object.defineProperties(this, {\n      'settings': { value: Settings($settings) },\n      'options': { value: Options($options) },\n      'definition': { get() { return definition } },\n      'parent': { get() { return parent } },\n      'path': { get() { return path } },\n      'key': { get() { return (path) ? path.pop() : path } },\n      'root': { get() {\n        let root = this\n        iterateParents: \n        while(root) {\n          if([undefined, null].includes(root.parent)) { break iterateParents }\n          root = root.parent\n        }\n        return root\n      } },\n      'retroReenableEvents': { value: function() {\n        let core = this\n        while(core) {\n          core.reenableEvents({ enable: true })\n          core = core.parent\n        }\n        return this\n      } },\n      'addPropertyClasses': { value: function() {\n        const $this = this\n        let $addPropertyClasses = (arguments.length === 0)\n          ? this.options.propertyClasses\n          : [].concat(...arguments)\n        iteratePropertyClasses: \n        for(const $addPropertyClass of $addPropertyClasses) {\n          if(!$addPropertyClass.targetType) {\n            propertyClasses.push($addPropertyClass)\n            continue iteratePropertyClasses\n          }\n          const {\n            name,\n            administer, deadminister,\n            instate, deinstate,\n            targetType, definition,\n          } = $addPropertyClass\n          let propertyValue\n          Object.defineProperties(this, {\n            [name]: {\n              configurable: true, enumerable: true, writable: true,\n              value: typedObjectLiteral(targetType)\n            }, \n            [administer]: {\n              configurable: true, enumerable: false, writable: false, \n              value: function($properties) {\n                if(!$this[name]) { $this[name] = typedObjectLiteral(targetType) }\n                iterateProperties: \n                for(const [$propertyKey, $propertyValue] of Object.entries($properties)) {\n                  $this[name][$propertyKey] = instate(\n                    $this, $propertyKey, $propertyValue, $addPropertyClass\n                  )\n                  $this.retroReenableEvents()\n                }\n                return $this\n              }\n            },\n            [deadminister]: {\n              configurable: true, enumerable: false, writable: false, \n              value: function(...$arguments) {\n                let properties\n                if($arguments.length === 0) {\n                  properties = Object.keys($this[name]).reverse()\n                }\n                else {\n                  properties = [].concat(...$arguments).reverse()\n                }\n                for(const $propertyKey of properties) {\n                  deinstate(\n                    $this, $propertyKey, $addPropertyClass\n                  )\n                  delete $this[name][$propertyKey]\n                  $this.retroReenableEvents()\n                }\n                return $this\n              }\n            },\n          })\n          propertyClasses.push($addPropertyClass)\n        }\n        return this\n      } },\n      'removePropertyClasses': { value: function(...$arguments) {\n        let $removePropertyClasses\n        if($arguments.length === 0) {\n          $removePropertyClasses = propertyClasses.reduce(($propertyClasses, propertyClass) => {\n            $propertyClasses.push($propertyClass.name)\n            return $propertyClasses\n          }, [])\n        }\n        else {\n          $removePropertyClasses = [].concat(...$arguments)\n        }\n        iterateRemovePropertyClasses: \n        for(const $removePropertyClass of $removePropertyClasses) {\n          const propertyClassIndex = propertyClasses.findIndex(\n            ($propertyClass) => $propertyClass.name === $removePropertyClass\n          )\n          const { name, deadminister } = propertyClasses.splice(propertyClassIndex, 1)[0]\n          this[deadminister]()\n          delete this[name]\n        }\n        return this\n      } },\n    })\n    if(this.settings.defineProperties) {\n      Object.defineProperties(this, this.settings.defineProperties)\n    }\n    if(this.settings.assign) {\n      Object.assign(this, this.settings.assign)\n    }\n    if(this.options.propertyClasses) {\n      this.addPropertyClasses(this.options.propertyClasses)\n    }\n    this.mount({\n      parent: this.options.parent,\n      path: this.options.path\n    })\n    addProperties(this.settings)\n  }\n}","import Core from 'core-plex';\n\nconst Primitives$1 = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n};\nconst PrimitiveKeys = Object.keys(Primitives$1);\nconst PrimitiveValues = Object.values(Primitives$1);\nconst Objects$1 = {\n  'object': Object,\n  'array': Array,\n};\nconst ObjectKeys$1 = Object.keys(Objects$1);\nconst ObjectValues = Object.values(Objects$1);\nconst Types$1 = Object.assign({}, Primitives$1, Objects$1);\nconst TypeKeys$1 = Object.keys(Types$1);\nconst TypeValues = Object.values(Types$1);\nconst TypeMethods = [\n Primitives$1.String, Primitives$1.Number, Primitives$1.Boolean, \n Objects$1.Object, Objects$1.Array\n];\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ObjectKeys: ObjectKeys$1,\n  ObjectValues: ObjectValues,\n  Objects: Objects$1,\n  PrimitiveKeys: PrimitiveKeys,\n  PrimitiveValues: PrimitiveValues,\n  Primitives: Primitives$1,\n  TypeKeys: TypeKeys$1,\n  TypeMethods: TypeMethods,\n  TypeValues: TypeValues,\n  Types: Types$1\n});\n\nvar typeOf$1 = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nfunction typedObjectLiteral$1($value) {\n  let _typedObjectLiteral;\n  const typeOfValue = typeOf$1($value);\n  if(typeOfValue === 'string') {\n    const value = $value.toLowerCase();\n    if(value === 'object') { _typedObjectLiteral = {}; }\n    else if(value === 'array') { _typedObjectLiteral = []; }\n  }\n  else  {\n    if(typeOfValue === 'object') { _typedObjectLiteral = {}; }\n    else if(typeOfValue === 'array') { _typedObjectLiteral = []; }\n  }\n  return _typedObjectLiteral\n}\n\nvar regularExpressions = {\n  quotationEscape: /\\.(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,\n};\n\nfunction get($path, $source) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n  const key = subpaths.pop();\n  let subtarget = $source;\n  for(const $subpath of subpaths) { subtarget = subtarget[$subpath]; }\n  return subtarget[key]\n}\n\nfunction impandTree($source, $property) {\n  const typeOfProperty = typeOf$1($property);\n  const typeOfSource = typeOf$1($source);\n  if(\n    !['string', 'function'].includes(typeOfProperty) ||\n    !['array', 'object'].includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral$1($source);\n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = get($property, $sourceValue); }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue); }\n    if(target[$sourceKey] && typeof target[$sourceKey] === 'object') {\n      target[$sourceKey] = impandTree(target[$sourceKey], $property);\n    }\n  }\n  return target\n}\n\nfunction assign$3($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf$1($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf$1($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = assign$3($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nconst Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n};\nObject.values(Primitives);\nconst Objects = {\n  'object': Object,\n  'array': Array,\n};\nObject.values(Objects);\nconst Types = Object.assign({}, Primitives, Objects);\nObject.values(Types);\n[\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n];\n\nvar typeOf = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nfunction typedObjectLiteral($value) {\n  let _typedObjectLiteral;\n  const typeOfValue = typeOf($value);\n  if(typeOfValue === 'string') {\n    const value = $value.toLowerCase();\n    if(value === 'object') { _typedObjectLiteral = {}; }\n    else if(value === 'array') { _typedObjectLiteral = []; }\n  }\n  else  {\n    if(typeOfValue === 'object') { _typedObjectLiteral = {}; }\n    else if(typeOfValue === 'array') { _typedObjectLiteral = []; }\n  }\n  return _typedObjectLiteral\n}\n\nvar isArrayLike = ($source) => {\n  let isArrayLike;\n  const typeOfSource = typeOf($source);\n  if(typeOfSource === 'array') { isArrayLike = true; }\n  else if(\n    typeOfSource === 'object' &&\n    Number.isInteger($source.length) && $source.length >= 0\n  ) {\n    iterateSourceKeys: \n    for(const $sourceKey of Object.keys(\n      Object.getOwnPropertyDescriptors($source)\n    )) {\n      if($sourceKey === 'length') { continue iterateSourceKeys }\n      isArrayLike = !isNaN($sourceKey);\n      if(!isArrayLike) { break iterateSourceKeys }\n    }\n  }\n  else { isArrayLike = false; }\n  return isArrayLike\n};\n\nfunction assign$2($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = assign$2($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nvar Options$1$1 = {\n  ancestors: [],\n  delimiter: '.',\n  depth: 0,\n  frozen: false,\n  maxDepth: 10,\n  nonenumerable: true,\n  path: false,\n  sealed: false,\n  type: false,\n};\n\nfunction getOwnPropertyDescriptor($properties, $propertyKey, $options) {\n  const options = Object.assign({}, Options$1$1, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  });\n  const propertyDescriptor = Object.getOwnPropertyDescriptor($properties, $propertyKey);\n  if(!options.nonenumerable && !propertyDescriptor.enumerable) { return }\n  if(!options.ancestors.includes($properties)) { options.ancestors.unshift($properties); }\n  if(options.ancestors.includes(propertyDescriptor.value)) { return }\n  if(options.path) {\n    options.path = (typeOf(options.path) === 'string') ? [options.path, $propertyKey].join(options.delimiter) : $propertyKey;\n    propertyDescriptor.path = options.path;\n  }\n  if(options.type) { propertyDescriptor.type = typeOf(propertyDescriptor.value); }\n  if(options.frozen) { propertyDescriptor.frozen = Object.isFrozen(propertyDescriptor.value); }\n  if(options.sealed) { propertyDescriptor.sealed = Object.isSealed(propertyDescriptor.value); }\n  if(['array', 'object'].includes(typeOf(propertyDescriptor.value))) {\n    propertyDescriptor.value = getOwnPropertyDescriptors(propertyDescriptor.value, options);\n  }\n  return propertyDescriptor\n}\n\nfunction getOwnPropertyDescriptors($properties, $options) {\n  const propertyDescriptors = {};\n  const options = Object.assign({}, Options$1$1, $options);\n  if(options.depth >= options.maxDepth) { return propertyDescriptors }\n  else { options.depth++; }\n  for(const [$propertyKey, $propertyDescriptor] of Object.entries(Object.getOwnPropertyDescriptors($properties))) {\n    const propertyDescriptor = getOwnPropertyDescriptor($properties, $propertyKey, options);\n    if(propertyDescriptor !== undefined) { propertyDescriptors[$propertyKey] = propertyDescriptor; }\n  }\n  return propertyDescriptors\n}\n\nvar Options$2 = {\n  typeCoercion: false,\n};\n\nfunction defineProperty$1($target, $propertyKey, $propertyDescriptor, $options) {\n  const propertyDescriptor = Object.assign({}, $propertyDescriptor);\n  const options = Object.assign({}, Options$2, $options);\n  const typeOfPropertyValue = typeOf(propertyDescriptor.value);\n  if(['array', 'object'].includes(typeOfPropertyValue)) {\n    const propertyValue = isArrayLike(Object.defineProperties(\n      typedObjectLiteral(typeOfPropertyValue), propertyDescriptor.value\n    )) ? [] : {};\n    propertyDescriptor.value = defineProperties$1(propertyValue, propertyDescriptor.value, options);\n  }\n  else if(\n    options.typeCoercion && \n    Object.getOwnPropertyDescriptor(propertyDescriptor, 'type') !== undefined &&\n    !['undefined', 'null'].includes(typeOfPropertyValue)\n  ) {\n    propertyDescriptor.value = Primitives[propertyDescriptor.type](propertyDescriptor.value);\n  }\n  Object.defineProperty($target, $propertyKey, propertyDescriptor);\n  if($propertyDescriptor.sealed) { Object.seal($target[$propertyKey]); }\n  if($propertyDescriptor.frozen) { Object.freeze($target[$propertyKey]); }\n  return $target\n}\n\nfunction defineProperties$1($target, $propertyDescriptors, $options) {\n  const options = Object.assign({}, Options$2, $options);\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of Object.entries($propertyDescriptors)) {\n    defineProperty$1($target, $propertyKey, $propertyDescriptor, options);\n  }\n  return $target\n}\n\nvar Options$1$2 = ($options) => assign$2({\n  basename: '',\n  propertyDescriptors: false,\n  defineProperties: {\n    typeCoercion: true,\n  },\n  replacers: [function replacer($key, $value) {\n    if(typeOf($value) === 'bigint') { return String($value) }\n    else { return $value }\n  }],\n  revivers: [function reviver($key, $value) { return $value }],\n}, $options);\n\nfunction JSONMiddlewares($middlewares, $key, $value) {\n  let value = $value;\n  for(const $middleware of $middlewares) {\n    value = $middleware($key, $value);\n  }\n  return value\n}\nclass LocalStorageRoute extends EventTarget {\n  constructor($path, $options) {\n    super();\n    if(!$path) return null\n    const options = Options$1$2($options);\n    const db = localStorage;\n    Object.defineProperties(this, {\n      'path': { value: $path },\n      'raw': { value: function raw() { return db.getItem(this.path) } },\n      'get': { value: function get() {\n        let model = db.getItem(this.path);\n        if(['undefined', undefined].includes(model)) { return }\n        const modelParsement = JSON.parse(model, JSONMiddlewares.bind(null, options.revivers));\n        if(model) {\n          const modelTypedObjectLiteral = typedObjectLiteral(modelParsement);\n          if(options.propertyDescriptors) {\n            model = defineProperties$1(modelTypedObjectLiteral, modelParsement, options.defineProperties);\n          }\n          else {\n            model = modelParsement;\n          }\n        }\n        return model\n      } },\n      'set': { value: function set($data) {\n        if(options.propertyDescriptors) {\n          return db.setItem(this.path, JSON.stringify(\n            getOwnPropertyDescriptors($data, options.propertyDescriptors), JSONMiddlewares.bind(null, options.replacers)\n          ))\n        }\n        else {\n          return db.setItem(this.path, JSON.stringify($data, JSONMiddlewares.bind(null, options.replacers)))\n        }\n      } },\n      'remove': { value: function remove() { return db.removeItem(this.path) } },\n    });\n  }\n}\n\nclass Verification extends EventTarget {\n  constructor($settings) {\n    super();\n    const settings = Object.assign({}, $settings);\n    Object.defineProperties(this, {\n      'type': { value: settings.type },\n      'key': { value: settings.key },\n      'value': { value: settings.value },\n      'message': { configurable: true, get() {\n        let message;\n        if(this.pass !== undefined) {\n          message = settings.messages[String(this.pass)](this);\n          Object.defineProperty(this, 'message', { value: message });\n        }\n        return message\n      } },\n      'pass': { writable: true, \n        set pass($pass) {\n          Object.defineProperty(this, 'pass', { value: $pass });\n        },\n      },\n    });\n  }\n}\n\nconst Messages$1 = {\n  'true': ($validation) => `${$validation.valid}`,\n  'false': ($validation) => `${$validation.valid}`,\n};\nfunction report($format = \"expand\", $prevalidation) {\n  const prevalidation = $prevalidation || this;\n  const schema = prevalidation.schema;\n  const validations = [].concat(\n    prevalidation.advance, prevalidation.deadvance, prevalidation.unadvance\n  );\n  if($format === \"expand\") {\n    const _report = typedObjectLiteral$1(schema.type);\n    for(const $validation of validations) {\n      const verifications = [].concat(\n        $validation.advance, $validation.deadvance, $validation.unadvance\n      );\n      _report[$validation.key] = {};\n      for(const $verification of verifications) {\n        _report[$validation.key][$verification.type] = {};\n        if($verification.validation) {\n          _report[$validation.key][$verification.type] = this.report($format, $verification.validation);\n        }\n        else {\n          _report[$validation.key][$verification.type] = $verification;\n        }\n      }\n    }\n    return _report\n  }\n  if($format === \"impand\") {\n    if(prevalidation.valid === false) { return false }\n    const _report = typedObjectLiteral$1(schema.type);\n    for(const $validation of validations) {\n      const verifications = [].concat(\n        $validation.advance, $validation.deadvance, $validation.unadvance\n      );\n      let reportValue;\n      iterateVerifications: \n      for(const $verification of verifications) {\n        if($verification.type === 'type') {\n          if($verification.validation && $validation.valid) {\n            reportValue = this.report($format, $verification.validation);\n          }\n          break iterateVerifications\n        }\n      }\n      if(!reportValue) { reportValue = $validation.valid; }\n      _report[$validation.key] = reportValue;\n    }\n    return _report\n  }\n}\nclass Validation extends EventTarget {\n  constructor($settings = {}, $schema) {\n    super();\n    const settings = Object.assign({ messages: Messages$1 }, $settings);\n    let valid;\n    const advance = [];\n    const deadvance = [];\n    const unadvance = [];\n    Object.defineProperties(this, {\n      'schema': { value: $schema },\n      'verificationType': { value: settings.verificationType },\n      'required': { value: settings.required },\n      'definition': { value: settings.definition },\n      'key': { value: settings.key },\n      'value': { value: settings.value },\n      'advance': { value: advance },\n      'deadvance': { value: deadvance },\n      'unadvance': { value: unadvance },\n      'valid': {\n        writable: true,\n        get valid() { return valid },\n        set valid($valid) { Object.defineProperty(this, 'valid', { value: $valid }); }\n      },\n      'report': { configurable: true, get() {\n        const _report = report.bind(this);\n        Object.defineProperty(this, 'report', { value: _report });\n        return _report\n      } },\n    });\n  }\n}\n\nconst Messages = {\n  'true': ($verification) => `${$verification.pass}`,\n  'false': ($verification) => `${$verification.pass}`,\n};\nclass Validator extends EventTarget {\n  constructor($definition = {}, $schema) {\n    super();\n    const definition = Object.freeze(\n      Object.assign({ messages: Messages }, $definition)\n    );\n    Object.defineProperties(this, {\n      'definition': { value: definition },\n      'schema': { value: $schema },\n      'type': { value: definition.type },\n      'messages': { value: definition.messages },\n      'validate': { configurable: true, get() {\n        function validate($key, $value, $source, $target) {\n          const { definition, messages, type } = this;\n          let verification = new Verification({\n            type: type,\n            key: $key,\n            value: definition.value,\n            messages: assign$3({}, messages, definition.messages),\n          });\n          const validation = definition.validate(...arguments);\n          if(typeof validation === 'object') {\n            verification.validation = validation;\n            verification.pass = validation.valid;\n          }\n          else { verification.pass = validation; }\n          return verification\n        }\n        const boundValidate = validate.bind(this);\n        Object.defineProperty(this, 'validate', {\n          value: boundValidate\n        });\n        return boundValidate\n      } },\n    });\n  }\n}\n\nclass RequiredValidator extends Validator {\n  constructor($definition, $schema) {\n    super(Object.assign({}, $definition, {\n      type: 'required',\n      validate: ($key, $value, $source, $target) => {\n        const { requiredProperties, requiredPropertiesSize, type } = $schema;\n        const corequiredProperties = Object.assign({}, requiredProperties);\n        let corequiredPropertiesSize = requiredPropertiesSize;\n        Object.assign(typedObjectLiteral$1(type), $source, $target);\n        this.definition;\n        let pass;\n        if(!requiredPropertiesSize) { pass = true; }\n        else {\n          if(Object.hasOwn(corequiredProperties, $key)) {\n            delete corequiredProperties[$key];\n            corequiredPropertiesSize--;\n          }\n          if(corequiredPropertiesSize) {\n            const coschema = new Schema(corequiredProperties, {\n              path: $schema.path,\n              parent: $schema.parent,\n            });\n            const comodel = Object.assign({}, $target, $source);\n            const covalidation = coschema.validate(comodel);\n            pass = covalidation.valid;\n          }\n        }\n        return pass\n      }\n    }), $schema);\n  }\n}\n\nconst { ObjectKeys, TypeKeys } = index;\nclass TypeValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign({}, $definition, {\n      type: 'type',\n      validate: ($key, $value, $source, $target) => {\n        let pass;\n        const definition = this.definition;\n        let typeOfDefinitionValue = typeOf$1(definition.value);\n        if(typeOfDefinitionValue === 'function') {\n          typeOfDefinitionValue = typeOf$1(definition.value());\n        }\n        else if(definition.value instanceof Schema) {\n          typeOfDefinitionValue = definition.value.type;\n        }\n        else {\n          typeOfDefinitionValue = typeOf$1(definition.value);\n        }\n        if(TypeKeys.includes(typeOfDefinitionValue)) {\n          const typeOfValue = typeOf$1($value);\n          if(typeOfValue === 'undefined') { pass = false; }\n          else if(typeOfDefinitionValue === 'undefined') { pass = true; }\n          else if(definition.value instanceof Schema) {\n            const validation = definition.value.validate($value, $source);\n            pass = validation;\n          }\n          else { pass = (typeOfDefinitionValue === typeOfValue); }\n        }\n        else { pass = false; }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass RangeValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'range',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(typeof $value !== 'number') { pass = false; }\n        else {\n          const { min, max } = definition;\n          let validMin, validMax;\n          if(min !== undefined) { validMin = ($value >= min.value); }\n          else { validMin = true; }\n          if(max !== undefined) { validMax = ($value <= max.value); }\n          else { validMax = true; }\n          if(validMin && validMax) { pass = true; }\n          else { pass = false;}\n        }\n        return pass\n      }\n    }), $schema);\n  }\n}\n\nclass LengthValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'length',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(typeof $value !== 'string') { pass = false; }\n        else {\n          const { min, max } = definition;\n          let validMin, validMax;\n          if(min !== undefined) {\n            validMin = ($value.length >= min.value);\n          }\n          else { validMin = true; }\n          if(max !== undefined) {\n            validMax = ($value.length <= max.value);\n          }\n          else { validMax = true; }\n          if(validMin && validMax) { pass = true; }          \n          else { pass = false;}\n        }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass EnumValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'enum',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(![\n          'string', 'number', 'boolean'\n        ].includes(typeof $value)) { pass = false;}\n        else {\n          const enumeration = definition.value;\n          pass = enumeration.includes($value);\n        }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass MatchValidator extends Validator {\n  constructor($settings = {}, $schema) {\n    super(Object.assign($settings, {\n      type: 'match',\n      validate: ($key, $value) => {\n        const definition = this.settings;\n        let pass;\n        if(![\n          'string', 'number', 'boolean'\n        ].includes(typeof $value)) { pass = false;}\n        else {\n          const match = definition;\n          (match.value.exec($value) !== null);\n        }\n        return pass ? true : false\n      },\n    }), $schema);\n  }\n}\n\nvar Options$1 = (...$options) => Object.assign({\n  required: false,\n  verificationType: 'all', \n  // verificationType: 'one',\n  strict: false,\n  properties: {\n    type: 'type',\n    value: 'value',\n  },\n}, ...$options);\n\nclass Schema extends EventTarget {\n  constructor($properties = {}, $options = {}) {\n    super();\n    Object.defineProperties(this, {\n      'options': { value: Options$1($options) },\n      'type': { value: typeOf$1($properties) },\n      'parent': { configurable: true, get() {\n        const { options } = this;\n        const parent = (options.parent) ? options.parent : null;\n        Object.defineProperty(this, 'parent', { value: parent });\n        return parent\n      } },\n      'root': { configurable: true, get() {\n        let root = this;\n        iterateParents: \n        while(root) {\n          if([undefined, null].includes(root.parent)) { break iterateParents }\n          root = root.parent;\n        }\n        return root\n      } },\n      'key': { configurable: true, get() {\n        const { path } = this;\n        const key = (path) ? path.split('.').pop() : null;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'path': { configurable: true, get() {\n        const { options } = this;\n        const path = (options.path)\n          ? String(options.path)\n          : null;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'required': { configurable: true, get() {\n        const required = this.options.required;\n        Object.defineProperty(this, 'required', { value: required });\n        return required\n      } },\n      'requiredProperties': { configurable: true, get() {\n        const requiredProperties = typedObjectLiteral$1(this.type);\n        for(const [$propertyKey, $propertyDefinition] of Object.entries(this.target)) {\n          if($propertyDefinition.required?.value === true) {\n            requiredProperties[$propertyKey] = $propertyDefinition;\n          }\n        }\n        Object.defineProperty(this, 'requiredProperties', { value: Object.freeze(requiredProperties) });\n        return requiredProperties\n      } },\n      'requiredPropertiesSize': { configurable: true, get() {\n        const requiredPropertiesSize = Object.keys(this.requiredProperties).length;\n        Object.defineProperty(this, 'requiredPropertiesSize', { value: requiredPropertiesSize });\n        return requiredPropertiesSize\n      } },\n      'verificationType': { configurable: true, get() {\n        const verificationType = this.options.verificationType;\n        Object.defineProperty(this, 'verificationType', { value: verificationType });\n        return verificationType\n      } },\n      'target': { configurable: true, get() {\n        let properties;\n        const type = this.type;\n        if(type === 'array') { properties = $properties.slice(0, 1); }\n        else if(type === 'object') { properties = $properties; }\n        const target = parseProperties(properties, this);\n        Object.defineProperty(this, 'target', { value: target });\n        return target\n      } },\n      'validate': { value: function(...$arguments) {\n        let { $sourceName, $source, $target } = parseValidateArguments(...$arguments);\n        $target = $target || typedObjectLiteral$1($source);\n        const { target, path, required, type, verificationType } = this;\n        let validation = new Validation({\n          required, verificationType,\n          definition: target,\n          key: $sourceName, \n          value: $source,\n        }, this);\n        const sourceProperties = Object.entries($source);\n        let sourcePropertyIndex = 0;\n        while(sourcePropertyIndex < sourceProperties.length) {\n          const [$sourceKey, $sourceValue] = sourceProperties[sourcePropertyIndex];\n          const propertyValidation = this.validateProperty($sourceKey, $sourceValue, $source, $target);\n          if(propertyValidation.valid === true) { validation.advance.push(propertyValidation); } \n          else if(propertyValidation.valid === false) { validation.deadvance.push(propertyValidation); } \n          else if(propertyValidation.valid === undefined) { validation.unadvance.push(propertyValidation );}\n          sourcePropertyIndex++;\n        }\n        if(validation.advance.length) { validation.valid = true; }\n        else if(validation.deadvance.length) { validation.valid = false; }\n        else if(validation.unadvance.length) { validation.valid = undefined; }\n        else { validation.valid = true; }\n        return validation\n      } },\n      'validateProperty': { value: function() {\n        const { $key, $value, $source, $target } = parseValidatePropertyArguments(...arguments);\n        const { target, path, required, schema, type, verificationType } = this;\n        let propertyDefinition;\n        if(type === 'array') { propertyDefinition = target[0]; }\n        else if(type === 'object') { propertyDefinition = target[$key]; }\n        const propertyValidation = new Validation({\n          required,\n          verificationType,\n          definition: propertyDefinition,\n          key: $key,\n          value: $value,\n        }, this);\n        if(propertyDefinition === undefined) {\n          const verification = new Verification({\n            type: null,\n            definition: null,\n            key: $key,\n            value: $value,\n          }, this);\n          verification.pass = false;\n          propertyValidation.unadvance.push(verification);\n        }\n        else {\n          iteratePropertyDefinitionValidators:\n          for(const [$validatorIndex, $validator] of Object.entries(propertyDefinition.validators)) {\n            const verification = $validator.validate($key, $value, $source, $target);\n            if(verification.pass === true) { propertyValidation.advance.push(verification); }\n            else if(verification.pass === false) { propertyValidation.deadvance.push(verification); }\n            else if(verification.pass === undefined) { propertyValidation.unadvance.push(verification); }\n            if(this.verificationType === 'one' && propertyValidation.deadvance.length) {\n              break iteratePropertyDefinitionValidators\n            }\n          }\n        }\n        if(propertyValidation.deadvance.length) { propertyValidation.valid = false; }\n        else if(propertyValidation.advance.length) { propertyValidation.valid = true; }\n        else if(propertyValidation.unadvance.length) { propertyValidation.valid = false; }\n        return propertyValidation\n      } },\n    });\n  }\n}\nfunction parseValidateArguments(...$arguments) {\n  let $sourceName, $source, $target;\n  if($arguments.length === 1) {\n    $sourceName = null; $source = $arguments.shift(); $target = null;\n  }\n  else if($arguments.length === 2) {\n    if(['number', 'string'].includes(typeof $arguments[0])) {\n      $sourceName = $arguments.shift(); $source = $arguments.shift(); $target = null;\n    }\n    else if($arguments[0] && typeof $arguments[0] === 'object') {\n      $sourceName = null; $source = $arguments.shift(); $target = $arguments.shift();\n    }\n  }\n  else if($arguments.length === 3) {\n    if(['number', 'string'].includes(typeof $arguments[0])) {\n      $sourceName = $arguments.shift(); $source = $arguments.shift(); $target = $arguments.shift();\n    }\n  }\n  return { $sourceName, $source, $target }\n}\nfunction parseValidatePropertyArguments(...$arguments) {\n  let [$key, $value, $source, $target] = $arguments;\n  return { $key, $value, $source, $target }\n}\nfunction parseProperties($properties, $schema) {\n  const properties = typedObjectLiteral$1($properties);\n  if(_isPropertyDefinition($properties, $schema)) { return $properties }\n  for(const [\n    $propertyKey, $propertyValue\n  ] of Object.entries($properties)) {\n    let propertyDefinition = {};\n    typeOf$1($propertyValue);\n    const isPropertyDefinition = _isPropertyDefinition($propertyValue, $schema);\n    if(index.TypeValues.includes($propertyValue)) {\n      Object.assign(propertyDefinition, { type: { value: $propertyValue } });\n    }\n    else if(index.TypeKeys.includes($propertyValue)) {\n      Object.assign(propertyDefinition, { type: { value: index.Types[$propertyValue] } });\n    }\n    else if(!isPropertyDefinition) {\n      const subpropertyPath = ($schema.path) ? [$schema.path, $propertyKey].join('.') : $propertyKey;\n      Object.assign(propertyDefinition, {\n        type: { type: 'type', value: new Schema($propertyValue, Object.assign({}, $schema.options, {\n          parent: $schema,\n          path: subpropertyPath\n        })) }\n      });\n    }\n    else if(isPropertyDefinition) {\n      for(const [$propertyValidatorName, $propertyValidator] of Object.entries($propertyValue)) {\n        const isValidatorDefinition = _isValidatorDefinition($propertyValidator, $schema);\n        if(!isValidatorDefinition) {\n          let propertyValidator;\n          if($propertyValidatorName === 'type') {\n            if($propertyValidator && typeof $propertyValidator === 'object') {\n              const subpropertyPath = ($schema.path) ? [$schema.path, $propertyKey].join('.') : $propertyKey;\n              propertyValidator = new Schema($propertyValidator, Object.assign({}, $schema.options, {\n                parent: $schema, \n                path: subpropertyPath,\n              }));\n            }\n            else {\n              propertyValidator = $propertyValidator;\n            }\n          }\n          else {\n            propertyValidator = $propertyValidator;\n          }\n          propertyDefinition[$propertyValidatorName] = {\n            type: $propertyValidatorName, value: propertyValidator\n          };\n        }\n        else if(isValidatorDefinition) {\n          propertyDefinition[$propertyValidatorName] = $propertyValidator;\n        }\n      }\n    }\n    propertyDefinition.validators = [];\n    properties[$propertyKey] = propertyDefinition;\n    const validators = new Map();\n    validators.set('type', Object.assign({}, {\n      type: 'type', validator: TypeValidator, value: propertyDefinition.type.value\n    }));\n    validators.set('required', Object.assign({}, {\n      type: 'required', validator: RequiredValidator, value: propertyDefinition.required?.value || false\n    }));\n    if(propertyDefinition.range) { validators.set('range', Object.assign({}, propertyDefinition.range, {\n      type: 'range', validator: RangeValidator\n    })); }\n    else if(propertyDefinition.min || propertyDefinition.max) { validators.set('range', Object.assign({}, {\n      type: 'range', min: propertyDefinition.min, max: propertyDefinition.max, validator: RangeValidator\n    })); }\n    if(propertyDefinition.length) { validators.set('length', Object.assign({}, propertyDefinition.length, {\n      type: 'length', validator: LengthValidator\n    })); }\n    else if(propertyDefinition.minLength || propertyDefinition.maxLength) { validators.set('length', Object.assign({}, {\n      type: 'length', min: propertyDefinition.minLength, max: maxLength, validator: LengthValidator\n    })); }\n    if(propertyDefinition.enum) { validators.set('enum', Object.assign({}, propertyDefinition.enum, {\n      type: 'enum', validator: EnumValidator\n    })); }\n    if(propertyDefinition.match) { validators.set('match', Object.assign({}, propertyDefinition.match, {\n      type: 'match', validator: MatchValidator\n    })); }\n    delete propertyDefinition.min;\n    delete propertyDefinition.max;\n    delete propertyDefinition.minLength;\n    delete propertyDefinition.maxLength;\n    for(const [\n      $validatorName, $validatorSettings\n    ] of validators.entries()) {\n      const ValidatorClass = $validatorSettings.validator;\n      propertyDefinition[$validatorName] = $validatorSettings;\n      propertyDefinition.validators.push(new ValidatorClass($validatorSettings, $schema));\n    }\n  }\n  return properties\n}\nfunction _isPropertyDefinition($object, $schema) {\n  if(!$object || $object instanceof Schema) { return false }\n  const typeKey = $schema.options.properties.type;\n  return Object.hasOwn($object, typeKey)\n}\nfunction _isValidatorDefinition($object, $schema) {\n  if(!$object) { return false }\n  const valueKey = $schema.options.properties.value;\n  return Object.hasOwn($object, valueKey)\n}\n\nvar Options = ($options) => {\n  const Options = assign$3({\n    autoload: false, \n    autosave: false, \n    localStorage: false, \n    path: null, \n    parent: null, \n    enableEvents: false,\n    enableValidation: true, \n    validationEvents: {\n      'validProperty:$key': true,\n      'validProperty': true,\n      'nonvalidProperty:$key': true,\n      'nonvalidProperty': true,\n    },\n    pathkey: true,\n    subpathError: false,\n    assignObject: 'set', \n    assignArray: 'set', \n    methods: {\n      map: {\n        get: {\n          mutatorEvents: {\n            'get': true,\n            'getProperty': true,\n            'getProperty:$key': true,\n          },\n        },\n        set: {\n          recursive: true,\n          mutatorEvents: {\n            'set': true,\n            'setProperty': true,\n            'setProperty:$key': true,\n          },\n        },\n        delete: {\n          mutatorEvents: {\n            'delete': true,\n            'deleteProperty': true,\n            'deleteProperty:$key': true,\n          },\n        },\n      },\n      array: {\n        concat: {\n          mutatorEvents: {\n            'concatElement:$index': true,\n            'concatElement': true,\n            'concat': true,\n          }\n        },\n        copyWithin: {\n          mutatorEvents: {\n            'copyWithinElement:$index': true,\n            'copyWithinElement': true,\n            'copyWithin': true,\n          }\n        },\n        fill: {\n          lengthen: true,\n          mutatorEvents: {\n            'fillElement:$index': true,\n            'fillElement': true,\n            'fill': true,\n          }\n        },\n        pop: {\n          mutatorEvents: { 'pop': true  },\n        },\n        push: {\n          mutatorEvents: {\n            'pushElement:$index': true,\n            'pushElement': true,\n            'push': true,\n          }\n        },\n        reverse: {\n          mutatorEvents: { 'reverse': true  },\n        },\n        shift: {\n          mutatorEvents: { 'shift': true  },\n        },\n        splice: {\n          mutatorEvents: {\n            'spliceDeleteElement:$index': true,\n            'spliceDeleteElement': true,\n            'spliceAddElement:$index': true,\n            'spliceAddElement': true,\n            'splice': true,\n          }\n        },\n        unshift: {\n          mutatorEvents: {\n            'unshiftElement:$index': true,\n            'unshiftElement': true,\n            'unshift': true,\n          }\n        },\n      },\n      object: {\n        assign: {\n          sourceTree: true,\n          mutatorEvents: {\n            'assignSourceProperty:$key': true,\n            'assignSourceProperty': true,\n            'assignSource': true,\n            'assign': true,\n          },\n        },\n        defineProperties: {\n          descriptorTree: true,\n          mutatorEvents: { 'defineProperties': true },\n        },\n        defineProperty: {\n          descriptorTree: true,\n          mutatorEvents: {\n            'defineProperty': true,\n            'defineProperty:$key': true,\n          },\n        },\n        freeze: {\n          recursive: true,\n          mutatorEvents: {\n            'freezeProperty': true,\n            'freeze': true,\n          },\n        },\n        seal: {\n          recursive: true,\n          mutatorEvents: {\n            'sealProperty': true,\n            'seal': true,\n          },\n        },\n      },\n    },\n  }, $options);\n  return Options\n};\n\nclass ModelEvent extends CustomEvent {\n  constructor($type, $settings, $model) {\n    super($type, $settings);\n    Object.defineProperties(this, {\n      'model': { get () { return $model } },\n      'key': { configurable: true, get () {\n        const key = (this.path) ? this.path.split('.').pop() : null;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'change': { configurable: true, get () {\n        const change = $settings.change;\n        Object.defineProperty(this, 'change', { value: change });\n        return change\n      } },\n      'value': { configurable: true, get () {\n        const value = $settings.value;\n        Object.defineProperty(this, 'value', { value: value });\n        return value\n      } },\n      'path': { configurable: true, get () {\n        const path = $settings.path;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'detail': { configurable: true, get () {\n        const detail = $settings.detail;\n        Object.defineProperty(this, 'detail', { value: detail });\n        return detail\n      } },\n    });\n  }\n}\n\nclass Change {\n  #_keyter = false \n  #_preter = false \n  #_anter = false \n  #_conter = false\n  #keyter\n  #preter\n  #anter\n  #conter\n  constructor($settings = {}) {\n    for(const [$key, $value] of Object.entries($settings)) { this[$key] = $value; }\n  }\n  get preter() { return this.#preter }\n  set preter($preter) {\n    if(this.#_preter === true) { return this.#preter }\n    this.#preter = $preter?.valueOf();\n    this.#_preter = true;\n  }\n  get anter() { return this.#anter }\n  set anter($anter) {\n    if(this.#_anter === true) { return this.#anter }\n    this.#anter = $anter?.valueOf();\n    this.#_anter = true;\n  }\n  get conter() {\n    if(\n      this.#_conter === true ||\n      [this.#_preter, this.#_anter].includes(false)\n    ) { return this.#conter }\n    const preter = JSON.stringify(this.preter);\n    const anter = JSON.stringify(this.anter);\n    let conter;\n    if(anter !== preter) { conter = true; }\n    else { conter = false; }\n    this.#conter = conter;\n    this.#_conter = true;\n    return this.#conter\n  }\n}\n\nlet ValidatorEvent$1 = class ValidatorEvent extends CustomEvent {\n  constructor($type, $settings, $model) {\n    super($type);\n    Object.defineProperties(this, {\n      'key': { configurable: true, get () {\n        const key = $settings.key;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'path': { configurable: true, get () {\n        const path = ($model.path)\n          ? [$model.path, $settings.key].join('.')\n          : $settings.key;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'value': { configurable: true, get () {\n        const value = $settings.value;\n        Object.defineProperty(this, 'value', { value: value, });\n        return value\n      } },\n      'valid': { configurable: true, get () {\n        const valid = $settings.valid;\n        Object.defineProperty(this, 'valid', { value: valid });\n        return valid\n      } },\n    });\n  }\n};\n\nfunction assign$1($model, $options, ...$sources) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'assign';\n  const assignArray = options.assignArray || 'assign';\n  const { path, schema, source, target } = $model;\n  const { enableValidation, mutatorEvents, required, sourceTree, validationEvents } = options;\n  const assignedSources = [];\n  const assignChange = new Change({ preter: $model });\n  for(let $source of $sources) {\n    let assignedSource;\n    const assignSourceChange = new Change({ preter: $model });\n    if(Array.isArray($source)) { assignedSource = []; }\n    else if($source && typeof $source === 'object') { assignedSource = {}; }\n    let validObject;\n    if(enableValidation && schema) {\n      validObject = schema.validate($source, $model.valueOf());\n      validObject.report();\n    }\n    iterateSourceProperties:\n    for(let [$sourceKey, $sourceValue] of Object.entries($source)) {\n      const assignSourcePropertyChange = new Change({ preter: target[$sourceKey] });\n      const assignSourcePropertyKeyChange = new Change({ preter: target[$sourceKey] });\n      if(schema && enableValidation) {\n        const validatorTarget = $model.valueOf();\n        const validatorSource = $source;\n        const validSourceProperty = schema.validateProperty($sourceKey, $sourceValue, validatorSource, validatorTarget);\n        if(validationEvents) {\n          let type, propertyType;\n          if(validSourceProperty.valid) {\n            type = 'validProperty';\n            propertyType = ['validProperty', $sourceKey].join(':');\n          }\n          else {\n            type = 'nonvalidProperty';\n            propertyType = ['nonvalidProperty', $sourceKey].join(':');\n          }\n          for(const $eventType of [type, propertyType]) {\n            $model.dispatchEvent(new ValidatorEvent$1($eventType, validSourceProperty, $model));\n          }\n        }\n        if(!validSourceProperty.valid) { continue iterateSourceProperties }\n      }\n      let sourceValue;\n      if($sourceValue && typeof $sourceValue === 'object') {\n        if($sourceValue instanceof $model.constructor) {\n          sourceValue = $sourceValue.valueOf();\n        }\n        let subschema;\n        if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema?.type === 'object') { subschema = schema.target[$sourceKey].type.value; }\n        else { subschema = null; }\n        const modelPath = (path)\n          ? [path, $sourceKey].join('.')\n          : String($sourceKey);\n        if(sourceTree === false) {\n          const suboptions = assign$3({}, options, {\n            path: modelPath,\n            parent: $model,\n          });\n          sourceValue = new $model.constructor($sourceValue, subschema, suboptions);\n          const assignment = { [$sourceKey]: sourceValue };\n          Object.assign(target, assignment);\n          Object.assign(assignedSource, assignment);\n        }\n        else {\n          if(target[$sourceKey] instanceof $model.constructor) {\n            sourceValue = target[$sourceKey];\n          }\n          else {\n            const subproperties = typedObjectLiteral$1($sourceValue);\n            const suboptions = assign$3({}, options, {\n              path: modelPath,\n              parent: $model,\n            });\n            sourceValue = new $model.constructor(subproperties, subschema, suboptions);\n          }\n          const assignment = { [$sourceKey]: sourceValue };\n          Object.assign(target, assignment);\n          Object.assign(assignedSource, assignment);\n          $model.retroReenableEvents();\n          if(sourceValue.type === 'array') {\n            if(['push', 'unshift'].includes(assignArray)) { sourceValue[assignArray](...$sourceValue); }\n            else { sourceValue[assignArray]($sourceValue); }\n          }\n          else if(sourceValue.type === 'object') { sourceValue[assignObject]($sourceValue); }\n        }\n      }\n      else {\n        sourceValue = $sourceValue;\n        const assignment = { [$sourceKey]: sourceValue };\n        Object.assign(target, assignment);\n        Object.assign(assignedSource, assignment);\n      }\n      if(mutatorEvents) {\n        const modelEventPath = (path) ? [path, $sourceKey].join('.') : String($sourceKey);\n        if(mutatorEvents['assignSourceProperty:$key']) {\n          const type = ['assignSourceProperty', $sourceKey].join(':');\n          assignSourcePropertyKeyChange.anter = target[$sourceKey];\n          $model.dispatchEvent(\n            new ModelEvent(type, {\n              path: modelEventPath,\n              value: sourceValue,\n              change: assignSourcePropertyKeyChange,\n              detail: {\n                source: assignedSource,\n              }\n            }, $model)\n          );\n        }\n        if(mutatorEvents['assignSourceProperty']) {\n          assignSourcePropertyChange.anter = target[$sourceKey];\n          $model.dispatchEvent(\n            new ModelEvent('assignSourceProperty', {\n              path: modelEventPath,\n              value: sourceValue,\n              change: assignSourcePropertyChange,\n              detail: {\n                source: assignedSource,\n              }\n            }, $model)\n          );\n        }\n      }\n    }\n    assignedSources.push(assignedSource);\n    if(mutatorEvents && mutatorEvents['assignSource']) {\n      assignSourceChange.anter = $model;\n      $model.dispatchEvent(\n        new ModelEvent('assignSource', {\n          path,\n          change: assignSourceChange,\n          detail: {\n            source: assignedSource,\n          },\n        }, $model)\n      );\n    }\n  }\n  if(mutatorEvents && mutatorEvents['assign']) {\n    assignChange.anter = $model;\n    $model.dispatchEvent(\n      new ModelEvent('assign', { \n        path,\n        change: assignChange,\n        detail: {\n          sources: assignedSources,\n        },\n      }, $model)\n    );\n  }\n  return $model\n}\n\nfunction defineProperties($model, $options, $propertyDescriptors) {\n  const { path, schema } = $model;\n  let {\n    enableValidation, mutatorEvents, required, \n    validation, validationEvents, validationReport\n  } = $options;\n  const propertyDescriptorEntries = Object.entries($propertyDescriptors);\n  const definePropertiesChange = new Change({ preter: $model });\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of propertyDescriptorEntries) {\n    $model.defineProperty($propertyKey, $propertyDescriptor, Object.assign({}, $options, {\n      validation, validationReport\n    }));\n  }\n  if(mutatorEvents && mutatorEvents['defineProperties']) {\n    definePropertiesChange.anter = $model;\n    $model.dispatchEvent(\n      new ModelEvent(\n        'defineProperties',\n        {\n          path,\n          value: $model.valueOf(),\n          detail: {\n            descriptors: $propertyDescriptors,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction defineProperty($model, $options, $propertyKey, $propertyDescriptor) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'defineProperties';\n  const assignArray = options.assignArray || 'defineProperties';\n  const {\n    descriptorTree, enableValidation, mutatorEvents, \n    validation, validationEvents, validationReport\n  } = options;\n  const { target, path, schema } = $model;\n  const propertyValue = $propertyDescriptor.value;\n  const targetPropertyDescriptor = Object.getOwnPropertyDescriptor(target, $propertyKey) || {};\n  const targetPropertyValue = targetPropertyDescriptor.value;\n  const definePropertyChange = new Change({ preter: targetPropertyValue });\n  const definePropertyKeyChange = new Change({ preter: targetPropertyValue });\n  const targetPropertyValueIsModelInstance = targetPropertyValue instanceof $model.constructor;\n  if(schema && enableValidation) {\n    const validProperty = schema.validateProperty(\n      $propertyKey, \n      impandTree(propertyValue, 'value') || propertyValue,\n      {},\n      $model.valueOf()\n    );\n    if(validationEvents) {\n      let type, propertyType;\n      if(validProperty.valid) {\n        type = 'validProperty';\n        propertyType = ['validProperty', $propertyKey].join(':');\n      }\n      else {\n        type = 'nonvalidProperty';\n        propertyType = ['nonvalidProperty', $propertyKey].join(':');\n      }\n      for(const $eventType of [type, propertyType]) {\n        $model.dispatchEvent(new ValidatorEvent$1($eventType, validProperty, $model));\n      }\n    }\n    if(!validProperty.valid) { return $model }\n  }\n  if(propertyValue && typeof propertyValue === 'object') {\n    const modelPath = (path)\n      ? [path, $propertyKey].join('.')\n      : String($propertyKey);\n    if(targetPropertyValueIsModelInstance) {\n      if(descriptorTree === true) {\n        targetPropertyValue.defineProperties($propertyDescriptor);\n      }\n      else {\n        Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n      }\n    }\n    else {\n      let subschema;\n      if(schema) {\n        if(schema.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema.type === 'object') { subschema = schema.target[$propertyKey].type.value; }\n        else { subschema = undefined; }\n      }\n      let subtarget = typedObjectLiteral$1(propertyValue);\n      const suboptions = assign$3({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      const submodel = new $model.constructor(\n        subtarget, subschema, suboptions\n      );\n      if(descriptorTree === true) {\n        target[$propertyKey] = submodel;\n        $model.retroReenableEvents();\n        if(submodel.type === 'array') {\n          if(['push', 'unshift'].includes(assignArray)) { submodel[assignArray](...propertyValue); }\n          else { submodel[assignArray](propertyValue); }\n        }\n        else if(submodel.type === 'object') { submodel[assignObject](propertyValue); }\n      }\n      else if(descriptorTree === false) {\n        Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n      }\n    }\n  }\n  else {\n    Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n  }\n  if(mutatorEvents) {\n    const modelEventPath = (path)\n      ? [path, $propertyKey].join('.')\n      : String($propertyKey);\n    if(mutatorEvents['defineProperty:$key']) {\n      definePropertyKeyChange.anter = target[$propertyKey];\n      const type = ['defineProperty', $propertyKey].join(':');\n      $model.dispatchEvent(\n        new ModelEvent(type, {\n          path: modelEventPath,\n          value: propertyValue,\n          change: definePropertyKeyChange,\n          detail: {\n            prop: $propertyKey,\n            descriptor: $propertyDescriptor,\n          },\n        }, $model\n      ));\n    }\n    if(mutatorEvents['defineProperty']) {\n      definePropertyChange.anter = target[$propertyKey];\n      $model.dispatchEvent(\n        new ModelEvent('defineProperty', {\n          path: modelEventPath,\n          value: propertyValue,\n          change: definePropertyChange,\n          detail: {\n            prop: $propertyKey,\n            descriptor: $propertyDescriptor,\n          },\n        }, $model\n      ));\n    }\n  }\n  return $model\n}\n\nfunction freeze($model, $options) {\n  const { recursive, mutatorEvents } = $options;\n  const { target } = $model;\n  if(recursive === true) {\n    for(const [\n      $propertyKey, $propertyValue\n    ] of Object.entries(target)) {\n      if($propertyValue instanceof $model.constructor) {\n        $propertyValue.freeze();\n        if(mutatorEvents && mutatorEvents['freezeProperty']) {\n          $model.dispatchEvent(\n            new ModelEvent(\n              'freezeProperty',\n              { path: $propertyValue.path },\n              $model\n            )\n          );\n        }\n      }\n    }\n  }\n  Object.freeze(target);\n  if(mutatorEvents && mutatorEvents['freeze']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'freeze',\n        { path: $model.path },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction seal($model, $options) {\n  const { recursive, mutatorEvents } = $options;\n  const { target } = $model;\n  if(recursive === true) {\n    for(const [\n      $propertyKey, $propertyValue\n    ] of Object.entries(target)) {\n      if($propertyValue instanceof $model.constructor) {\n        $propertyValue.seal();\n        if(mutatorEvents && mutatorEvents['sealProperty']) {\n          $model.dispatchEvent(\n            new ModelEvent(\n              'sealProperty',\n              { path: $propertyValue.path },\n              $model\n            )\n          );\n        }\n      }\n    }\n  }\n  Object.seal(target);\n  if(mutatorEvents && mutatorEvents['seal']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'seal',\n        { path: $model.path },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nvar ObjectProperty = {\n  assign: assign$1,\n  defineProperties,\n  defineProperty,\n  freeze,\n  seal,\n};\n\nfunction concat($model, $options) {\n  const { target, path, schema } = $model;\n  const { enableValidation, mutatorEvents, source, validationEvents } = $options;\n  const $arguments = [].concat(...arguments);\n  let valueIndex = target.length;\n  const values = [];\n  let targetConcat = [...Array.from(target)];\n  let model;\n  iterateValues: \n  for(let $value of $arguments) {\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$1(validatorTarget);\n      const validValue = schema.validateProperty(valueIndex, $subvalue, validatorSource, validatorTarget);\n      if(schema &&validationEvents) {\n        let type, propertyType;\n        if(validValue.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', valueIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', valueIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validValue, $model));\n        }\n      }\n      if(!validValue.valid) { valueIndex++; continue iterateValues }\n    }\n    const modelPath = (path)\n      ? [path, valueIndex].join('.')\n      : String(valueIndex);\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      let subschema = schema?.target[0].type.value || null;\n      const submodel = typedObjectLiteral$1($value);\n      let value = new $model.constructor(submodel, subschema, {\n        path: modelPath,\n        parent: $model,\n      });\n      value.concat($value);\n      values[valueIndex] = value;\n    }\n    else {\n      values[valueIndex] = $value;\n    }\n    targetConcat = Array.prototype.concat.call(targetConcat, values[valueIndex]);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, valueIndex].join('.')\n        : String(valueIndex);\n      if(mutatorEvents['concatElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('concatElement', {\n            path: modelEventPath,\n            value: values[valueIndex],\n            detail: {\n              valueIndex,\n              value: values[valueIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['concatElement:$index']) {\n        $model.dispatchEvent(\n          new ModelEvent('concatElement', {\n            path: modelEventPath,\n            value: values[valueIndex],\n            detail: {\n              valueIndex,\n              value: values[valueIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    valueIndex++;\n  }\n  model = new $model.constructor(targetConcat, schema, $model.options);\n  if(mutatorEvents && mutatorEvents['concat']) {\n    $model.dispatchEvent(\n      new ModelEvent('concat', {\n        path,\n        detail: {\n          values: model,\n        },\n      }, $model)\n    );\n  }\n  return model\n}\n\nfunction copyWithin($model, $options) {\n  const { target, path } = $model;\n  const { enableValidation, validationEvents, mutatorEvents } = $options;\n  const copyTarget = (\n    arguments[0] >= 0\n  ) ? arguments[0]\n    : target.length = arguments[0];\n  const start = (\n    arguments[1] >= 0\n  ) ? arguments[1]\n    : target.length + arguments[1];\n  const end = (\n    arguments[2] === undefined\n  ) ? target.length\n    : (\n    arguments[2] >= 0\n  ) ? arguments[2]\n    : target.length + arguments[2];\n  const copiedItems = [];\n  let copyIndex = start;\n  let targetIndex = copyTarget;\n  while(copyIndex < end) {\n    const copyItem = target[copyIndex];\n    copiedItems.push(copyItem);\n    Array.prototype.copyWithin.call(\n      target,\n      targetIndex,\n      copyIndex,\n      copyIndex + 1\n    );\n    $model.retroReenableEvents();\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, copyIndex].join('.')\n        : String(copyIndex);\n      if(mutatorEvents['copyWithinElement']) {\n        $model.dispatchEvent(\n          new ModelEvent(\n            'copyWithinElement',\n            {\n              path: modelEventPath,\n              value: copyItem,\n              detail: {\n                target: targetIndex,\n                start: copyIndex,\n                end: copyIndex + 1,\n                item: copyItem,\n              },\n            },\n            $model\n          )\n        );\n      }\n      if(mutatorEvents['copyWithinElement:$index']) {\n        const type  = ['copyWithinElement', copyIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(\n            type,\n            {\n              path: modelEventPath,\n              value: copyItem,\n              detail: {\n                target: targetIndex,\n                start: copyIndex,\n                end: copyIndex + 1,\n                item: copyItem,\n              },\n            },\n            $model\n          )\n        );\n      }\n    }\n    copyIndex++;\n    targetIndex++;\n  }\n  // Array Copy Within Event\n  if(mutatorEvents && mutatorEvents['copyWithin']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'copyWithin',\n        {\n          path,\n          detail: {\n            target: copyTarget,\n            start: start,\n            end: end,\n            items: copiedItems,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction fill($model, $options, ...$arguments) {\n  const options = Object.assign({}, $options);\n  const { target, path, schema } = $model;\n  const assignObject = options.assignObject;\n  const assignArray = options.assignArray || assignObject;\n  const { enableValidation, lengthen, mutatorEvents, validationEvents } = options;\n  const filled = [];\n  let $start;\n  if(typeof $arguments[1] === 'number') {\n    $start = ($arguments[1] >= 0)\n      ? $arguments[1]\n      : target.length + $arguments[1];\n  }\n  else { $start = 0; }\n  let $end;\n  if(typeof $arguments[2] === 'number') {\n    $end = ($arguments[2] >= 0)\n      ? $arguments[2]\n      : target.length + $arguments[2];\n  } else { $end = target.length; }\n  if(lengthen && target.length < $end) { target.length = $end; }\n  let fillIndex = $start;\n  iterateFillIndexes: \n  while(\n    fillIndex < target.length &&\n    fillIndex < $end\n  ) {\n    if(schema && enableValidation) {\n      let validValue = schema.validate(validValue, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        if(validValue.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', fillIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', fillIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validValue, $model));\n        }\n      }\n      if(!validValue.valid) { continue iterateFillIndexes }\n    }\n    const modelPath = (path)\n      ? [path, fillIndex].join('.')\n      : String(fillIndex);\n    let $value = $arguments[0];\n    let value;\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral$1($value);\n      const suboptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      value = new $model.constructor(subproperties, subschema, suboptions);\n    }\n    Array.prototype.fill.call(target, value, fillIndex, fillIndex + 1);\n    $model.retroReenableEvents();\n    if(value.type === 'array') {\n      if(['push', 'unshift'].includes(assignArray)) { value[assignArray](...$value); }\n      else { value[assignArray]($value); }\n    }\n    else if(value.type === 'object') { value[assignObject]($value); }\n    filled.push(value);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, fillIndex].join('.')\n        : String(fillIndex);\n      if(mutatorEvents['fillElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('fillElement', {\n            path: modelEventPath, \n            value: value,\n            detail: {\n              start: fillIndex,\n              end: fillIndex + 1,\n              value,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['fillElement:$index']) {\n        const type = ['fillElement', fillIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            detail: {\n              start: fillIndex,\n              end: fillIndex + 1,\n              value,\n            },\n          }, $model)\n        );\n      }\n    }\n    fillIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['fill']) {\n    $model.dispatchEvent(\n      new ModelEvent('fill', {\n        path,\n        detail: {\n          start: $start,\n          end: $end,\n          filled,\n        },\n      },\n      $model)\n    );\n  }\n  return $model\n}\n\nfunction pop($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  const popElement = Array.prototype.pop.call(target);\n  const popElementIndex = target.length - 1;\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['pop']) {\n    const modelEventPath = (path)\n      ? [path, popElementIndex].join('.')\n      : String(popElementIndex);\n      $model.dispatchEvent(\n      new ModelEvent(\n        'pop',\n        {\n          path: modelEventPath,\n          value: popElement,\n          detail: {\n            elementIndex: popElementIndex,\n            element: popElement,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return popElement\n}\n\nfunction push($model, $options, ...$elements) {\n  const options = Object.assign({}, $options);\n  const assignArray = 'push';\n  const assignObject = options.assignObject;\n  const { enableValidation, mutatorEvents, source, validationEvents } = options;\n  const { target, path, schema } = $model;\n  const elements = [];\n  let elementsIndex = 0;\n  for(let $element of $elements) {\n    let element;\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$1(validatorTarget);\n      const validElement = schema.validateProperty(elementsIndex, $element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validElement.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', elementsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', elementsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validElement, $model));\n        }\n      }\n      if(!validElement.valid) { return target.length }\n    }\n    const modelPath = (path)\n      ? [path, elementsIndex].join('.')\n      : String(elementsIndex);\n    if($element && typeof $element === 'object') {\n      $element = ($element instanceof $model.constructor) ? $element.valueOf() : $element;\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral$1(typeOf$1($element));\n      const submodelOptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      element = new $model.constructor(subproperties, subschema, submodelOptions);\n      Array.prototype.push.call(target, element);\n      $model.retroReenableEvents();\n      if(element.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { element[assignArray](...$element); }\n        else { element[assignArray]($element); }\n      }\n      else if(element.type === 'object') { element[assignObject]($element); }\n    }\n    else {\n      element = $element;\n      Array.prototype.push.call(target, element);\n    }\n    elements.push(element);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, elementsIndex].join('.')\n        : String(elementsIndex);\n      if(mutatorEvents['pushElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('pushElement', {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['pushElement:$index']) {\n        const type = ['pushElement', elementsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    elementsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['push']) {\n    $model.dispatchEvent(\n      new ModelEvent('push', {\n        path,\n        detail: {\n          elements,\n        },\n      }, $model)\n    );\n  }\n  return target.length\n}\n\nfunction reverse($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  Array.prototype.reverse.call(target, ...arguments);\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['reverse']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'reverse',\n        {\n          path,\n          detail: {\n            reference: target\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction shift($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  const shiftElement = Array.prototype.shift.call(target);\n  const shiftElementIndex = 0;\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['shift']) {\n    const modelEventPath = (path)\n      ? [path, shiftElementIndex].join('.')\n      : String(shiftElementIndex);\n    $model.dispatchEvent(\n      new ModelEvent(\n        'shift',\n        {\n          path: modelEventPath,\n          value: shiftElement,\n          detail: {\n            elementIndex: shiftElementIndex,\n            element: shiftElement,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return shiftElement\n}\n\nfunction splice($model, $options) {\n  const options = Object.assign({}, $options);\n  const assignObject = options.assignObject;\n  const assignArray = options.assignArray || assignObject;\n  const { mutatorEvents, source } = options;\n  const { target, path, schema } = $model;\n  const { enableValidation, validationEvents } = options;\n  const $arguments = [...arguments];\n  const $start = ($arguments[0] >= 0)\n    ? $arguments[0]\n    : target.length + $arguments[0];\n  const $deleteCount = ($arguments[1] <= 0)\n    ? 0\n    : (\n      $arguments[1] === undefined ||\n      $start + $arguments[1] >= target.length\n    ) ? target.length - $start\n      : $arguments[1];\n  const $addItems = $arguments.slice(2);\n  const addCount = $addItems.length;\n  const deleteItems = [];\n  let deleteItemsIndex = 0;\n  while(deleteItemsIndex < $deleteCount) {\n    const deleteItem = Array.prototype.splice.call(target, $start, 1)[0];\n    deleteItems.push(deleteItem);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, deleteItemsIndex].join('.')\n        : String(deleteItemsIndex);\n      if(mutatorEvents['spliceDeleteElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('spliceDeleteElement', {\n            path: modelEventPath,\n            value: deleteItem,\n            detail: {\n              index: $start + deleteItemsIndex,\n              deleteIndex: deleteItemsIndex,\n              deleteItem: deleteItem,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['spliceDeleteElement:$index']) {\n        const type = ['spliceDeleteElement', deleteItemsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: deleteItem,\n            detail: {\n              index: $start + deleteItemsIndex,\n              deleteIndex: deleteItemsIndex,\n              deleteItem: deleteItem,\n            },\n          }, $model)\n        );\n      }\n    }\n    deleteItemsIndex++;\n  }\n  let addItemsIndex = 0;\n  spliceAdd: \n  while(addItemsIndex < addCount) {\n    let addItem = $addItems[addItemsIndex];\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$1(validatorTarget);\n      const validAddItem = schema.validateProperty(elementIndex, element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validAddItem.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', addItemsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', addItemsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validAddItem, $model));\n        }\n      }\n      if(!validAddItem.valid) { addItemsIndex++; continue spliceAdd }\n    }\n    const modelPath = (path)\n      ? [path, addItemsIndex].join('.')\n      : String(addItemsIndex);\n    let startIndex = $start + addItemsIndex;\n    if(addItem && typeof addItem === 'object') {\n      if(addItem instanceof $model.constructor) { addItem = addItem.valueOf(); }\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral$1(addItem);\n      const suboptions = assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      addItem = new $model.constructor(subproperties, subschema, suboptions);\n      Array.prototype.splice.call(target, startIndex, 0, addItem);\n      $model.retroReenableEvents();\n      if(addItem.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { addItem[assignArray](...$value); }\n        else { addItem[assignArray]($value); }\n      }\n      else if(addItem.type === 'object') { addItem[assignObject]($value); }\n    }\n    else {\n      Array.prototype.splice.call(target, startIndex, 0, addItem);\n    }\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, addItemsIndex].join('.')\n        : String(addItemsIndex);\n      if(mutatorEvents['spliceAddElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('spliceAddElement', {\n            path: modelEventPath,\n            value: addItem,\n            detail: {\n              index: $start + addItemsIndex,\n              addIndex: addItemsIndex,\n              addItem: addItem,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['spliceAddElement:$index']) {\n        const type = ['spliceAddElement', addItemsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: addItem,\n            detail: {\n              index: $start + addItemsIndex,\n              addIndex: addItemsIndex,\n              addItem: addItem,\n            },\n          }, $model)\n        );\n      }\n    }\n    addItemsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['splice']) {\n    $model.dispatchEvent(\n      new ModelEvent('splice', {\n        path,\n        detail: {\n          $start,\n          deleted: deleteItems,\n          added: $addItems,\n          length: target.length,\n        },\n      },\n      $model)\n    );\n  }\n  return deleteItems\n}\n\nfunction unshift($model, $options, ...$elements) {\n  const options = Object.assign({}, $options);\n  const assignArray = 'unshift';\n  const assignObject = options.assignObject;\n  const { enableValidation, mutatorEvents, source, validationEvents } = options;\n  const { target, path, schema } = $model;\n  const elements = [];\n  let elementsIndex = 0;\n  for(let $element of $elements) {\n    let element;\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$1(validatorTarget);\n      const validElement = schema.validateProperty(elementsIndex, $element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validElement.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', elementsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', elementsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validElement, $model));\n        }\n      }\n      if(!validElement.valid) { return target.length }\n    }\n    const modelPath = (path)\n      ? [path, elementsIndex].join('.')\n      : String(elementsIndex);\n    if($element && typeof $element === 'object') {\n      $element = ($element instanceof $model.constructor) ? $element.valueOf() : $element;\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral$1(typeOf$1($element));\n      const submodelOptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      element = new $model.constructor(subproperties, subschema, submodelOptions);\n      Array.prototype.unshift.call(target, element);\n      $model.retroReenableEvents();\n      if(element.type === 'array') { element[assignArray](...$element); }\n      else if(element.type === 'object') { element[assignObject]($element); }\n    }\n    else {\n      element = $element;\n      Array.prototype.unshift.call(target, element);\n    }\n    elements.unshift(element);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, elementsIndex].join('.')\n        : String(elementsIndex);\n      if(mutatorEvents['unshiftElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('unshiftElement', {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['unshiftElement:$index']) {\n        const type = ['unshiftElement', elementsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    elementsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['unshift']) {\n    $model.dispatchEvent(\n      new ModelEvent('unshift', {\n        path,\n        detail: {\n          elements,\n        },\n      }, $model)\n    );\n  }\n  return target.length\n}\n\nvar ArrayProperty = {\n  concat: concat,\n  copyWithin: copyWithin,\n  fill: fill,\n  pop: pop,\n  push: push,\n  reverse: reverse,\n  shift: shift,\n  splice: splice,\n  unshift: unshift,\n};\n\nfunction getContent($model, $options) {\n  const { path } = $model;\n  const { mutatorEvents } = $options;\n  if(mutatorEvents && mutatorEvents['get']) {\n    $model.dispatchEvent(\n      new ModelEvent('get', {\n        path,\n        value: $model.valueOf(),\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nfunction getContentProperty($model, $options, $path) {\n  const { target, path } = $model;\n  const { mutatorEvents, pathkey, subpathError } = $options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue = target[propertyKey];\n    if(subpaths.length) {\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      return propertyValue.get(subpaths.join('.'), $options)\n    }\n    if(mutatorEvents) {\n      if(mutatorEvents['getProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('getProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['getProperty:$key']) {\n        const type = ['getProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n  else if(pathkey === false) {\n    const propertyValue = target[propertyKey];\n    return propertyValue\n  }\n}\n\nfunction getProperty($model, $options, ...$arguments) {\n  let getProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 2) { assign$3(options, $arguments[1]); }\n    getProperty = getContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 1) { assign$3(options, $arguments[0]); }\n    getProperty = getContent($model, options, ...$arguments);\n  }\n  return getProperty\n}\n\nfunction setContent($model, $options, $properties) {\n  const { path, schema } = $model;\n  let { enableValidation, mutatorEvents, required, validationEvents  } = $options;\n  for(const [$propertyKey, $propertyValue] of Object.entries($properties)) {\n    $model.set($propertyKey, $propertyValue, Object.assign($options, {\n      source: $properties,\n    }));\n  }\n  if(mutatorEvents && mutatorEvents['set']) {\n    $model.dispatchEvent(\n      new ModelEvent('set', {\n        path,\n        value: $model.valueOf(),\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nfunction setContentProperty($model, $options, $path, $value) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'set';\n  const assignArray = options.assignArray || 'set';\n  const { target, path, schema } = $model;\n  const {\n    enableValidation, mutatorEvents, pathkey, \n    recursive, subpathError, \n    validationEvents, source, \n  } = options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue;\n    const typeOfPropertyValue = typeOf$1($value);\n    const modelPath = (path)\n      ? [path, propertyKey].join('.')\n      : String(propertyKey);\n    if(subpaths.length) {\n      if(recursive && target[propertyKey] === undefined) {\n        let subschema;\n        if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema?.type === 'object') { subschema = schema.target[propertyKey].type.value; }\n        else { subschema = undefined; }\n        let submodel;\n        if(typeOfPropertyValue === 'array') { submodel = []; }\n        else if(typeOfPropertyValue === 'object') { submodel = {}; }\n        else {\n          if(isNaN(Number(propertyKey))) { submodel = {}; }\n          else { submodel = []; }\n        }\n        const submodelOptions = assign$3({}, options, {\n          path: modelPath,\n          parent: $model,\n        });\n        propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      }\n      else {\n        propertyValue = target[propertyKey];\n      }\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject](subpaths.join('.'), $value, options); }\n      return propertyValue\n    }\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$1(validatorTarget);\n      const validTargetProp = schema.validateProperty(propertyKey, $value, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validTargetProp, $model));\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const typeOfPropertyValue= typeOf$1($value);\n      let subschema;\n      let submodel;\n      if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n      else if(schema?.type === 'object') { subschema = schema.target[propertyKey].type.value; }\n      else { subschema = undefined; }\n      if(typeOfPropertyValue === 'array') { submodel = []; }\n      else if(typeOfPropertyValue === 'object') { submodel = {}; }\n      else {\n        if(isNaN(Number(propertyKey))) { submodel = {}; }\n        else { submodel = []; }\n      }\n      const submodelOptions = assign$3({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      target[propertyKey] = propertyValue;\n      $model.retroReenableEvents();\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject]($value); }\n    }\n    else {\n      propertyValue = $value;\n      target[propertyKey] = propertyValue;\n    }\n    // const _propertyValue = (propertyValue === null) ? null : propertyValue.valueOf()\n    const _propertyValue = propertyValue.valueOf();\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      if(mutatorEvents['setProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('setProperty', {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              key: propertyKey,\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['setProperty:$key']) {\n        const type = ['setProperty', propertyKey].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n  else if(pathkey === false) {\n    let propertyKey = $path;\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const typeOfPropertyValue = typeOf$1($value);\n      let subschema;\n      let submodel;\n      if(schema?.type === 'array') {\n        subschema = schema.target[0].type.value;\n      }\n      if(schema?.type === 'object') {\n        subschema = schema.target[propertyKey].type.value;\n      }\n      else { subschema = undefined; }\n      if(typeOfPropertyValue === 'array') { submodel = []; }\n      else if(typeOfPropertyValue === 'object') { submodel = {}; }\n      else {\n        if(isNaN(Number(propertyKey))) { submodel = {}; }\n        else { submodel = []; }\n      }\n      const modelPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      const submodelOptions = assign$3({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      target[propertyKey] = propertyValue;\n      $model.retroReenableEvents();\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject]($value); }\n    }\n    else {\n      propertyValue = $value;\n      target[propertyKey] = propertyValue;\n    }\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      if(mutatorEvents['setProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('setProperty', {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              key: propertyKey,\n              value: _propertyValue,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['setProperty:$key']) {\n        const type = ['setProperty', propertyKey].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n}\n\nfunction setProperty($model, $options, ...$arguments) {\n  let setProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 3) { assign$3(options, $arguments[2]); }\n    setProperty = setContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 2) { assign$3(options, $arguments[1]); }\n    setProperty = setContent($model, options, ...$arguments);\n  }\n  return setProperty\n}\n\nfunction deleteContent($model, $options) {\n  const { target } = $model;\n  for(const [$targetPropertyKey, $targetPropertyValue] of Object.entries(target)) {\n    $model.delete($targetPropertyKey, $options);\n  }\n  const { path } = $model;\n  const { mutatorEvents } = $options;\n  if(mutatorEvents && mutatorEvents['delete']) {\n    $model.dispatchEvent(\n      new ModelEvent('delete', {\n        path,\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nfunction deleteContentProperty($model, $options, $path) {\n  const { target, path, schema } = $model;\n  const { mutatorEvents, pathkey, subpathError, enableValidation, validationEvents } = $options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue = target[propertyKey];\n    if(subpaths.length) {\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      return propertyValue.delete(subpaths.join('.'), $options)\n    }\n    if(schema && enableValidation) {\n      const differedPropertyProxy = $model.valueOf();\n      delete differedPropertyProxy[propertyKey];\n      const validTargetProp = schema.validate(propertyKey, differedPropertyProxy, {}, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        const validatorEventPath = (path)\n          ? [path, propertyKey].join('.')\n          : String(propertyKey);\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(\n            new ValidatorEvent$1($eventType, Object.assign(validTargetProp, {\n              path: validatorEventPath\n            }), $model)\n          );\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n    if(propertyValue && typeof propertyValue === 'object') {\n      propertyValue.delete($options);\n    }\n    delete target[propertyKey];\n    if(mutatorEvents) {\n      if(mutatorEvents['deleteProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('deleteProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['deleteProperty:$key']) {\n        const type = ['deleteProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            value: propertyValue,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return undefined\n  }\n  else if(pathkey === false) {\n    const propertyKey = $path;\n    const propertyValue = target[propertyKey];\n\n    if(schema && enableValidation) {\n      const differedPropertyProxy = $model.valueOf();\n      delete differedPropertyProxy[propertyKey];\n      const validTargetProp = schema.validate(propertyKey, differedPropertyProxy, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(\n            new ValidatorEvent$1($eventType, validTargetProp, $model)\n          );\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n  \n    if(propertyValue instanceof $model.constructor) {\n      propertyValue.delete($options);\n    }\n    delete target[propertyKey];\n    if(mutatorEvents) {\n      if(mutatorEvents['deleteProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('deleteProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['deleteProperty:$key']) {\n        const type = ['deleteProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            value: propertyValue,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return undefined\n  }\n}\n\nfunction deleteProperty($model, $options, ...$arguments) {\n  let deleteProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 2) { assign$3(options, $arguments[1]); }\n    deleteProperty = deleteContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 1) { assign$3(options, $arguments[0]); }\n    deleteProperty = deleteContent($model, options, ...$arguments);\n  }\n  return deleteProperty\n}\n\nvar MapProperty = {\n  get: getProperty,\n  set: setProperty,\n  delete: deleteProperty,\n};\n\nconst Defaults = Object.freeze({\n  object: [{\n    keys: ['valueOf'],\n    methodDescriptor: function($methodName, $model) {\n      return { value: function valueOf() { return $model.parse({ type: 'object' }) } }\n    },\n  }, {\n    keys: ['toString'],\n    methodDescriptor: function($methodName, $model) {\n      return { value: function toString($parseSettings = {}) {\n        const replacer = ($parseSettings.replacer !== undefined)\n          ? $parseSettings.replacer : null;\n        const space = ($parseSettings.space !== undefined)\n          ? $parseSettings.space : 0;\n        return $model.parse({ type: 'string', replacer, space })\n      } }\n    }, \n  }, {\n    keys: [\n      'entries', 'fromEntries', 'getOwnPropertyDescriptors', \n      'getOwnPropertyDescriptor', 'getOwnPropertyNames', \n      /* 'getOwnPropertySymbols', */ 'groupBy', 'hasOwn', 'is', \n      'getPrototypeOf', 'isExtensible', 'isFrozen', 'isSealed', \n      'keys', 'preventExtensions', 'values',\n    ],\n    methodDescriptor: function($methodName, $model) {\n      return { value: Object[$methodName].bind(null, $model.valueOf()) }\n    },\n  }, {\n    keys: ['propertyIsEnumerable', 'hasOwnProperty'], \n    methodDescriptor: function($methodName, $model) {\n      return { value: () => $model.parse({ type: 'object' })[$methodName] }\n    },\n  }, {\n    type: 'mutators',\n    keys: Object.keys(ObjectProperty), \n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: ObjectProperty[$methodName].bind(null, $model, $options) }\n    }\n  }],\n  array: [{\n    keys: ['length'], \n    methodDescriptor: function($propertyName, $model, $options) {\n      return {\n        get() { return $model.target.length },\n        set($propertyValue) { $model.target.length = $propertyValue; },\n      }\n    }\n  }, {\n    keys: [\n      'from', 'fromAsync', 'isArray', 'of', \n    ], \n    methodDescriptor: function($methodName, $model) {\n      return { value: Array[$methodName] }\n    }, \n  }, {\n    keys: [\n      'at', 'every', 'filter', 'find', 'findIndex', 'findLast',\n      'findLastIndex', 'flat', 'flatMap', 'forEach', 'includes', \n      'indexOf', 'join', 'lastIndexOf', 'map', 'reduce', 'reduceRight', \n      'slice', 'some', 'sort', 'toReversed',  'toSorted', 'toSpliced', \n      'with', \n    ], \n    methodDescriptor: function($methodName, $model) {\n      return { value: Array.prototype[$methodName].bind(null, $model) }\n    }\n  }, {\n    type: 'mutators',\n    keys: Object.keys(ArrayProperty), \n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: ArrayProperty[$methodName].bind(null, $model, $options) }\n    }\n  }],\n  map: [{\n    type: 'mutators',\n    keys: Object.keys(MapProperty),\n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: MapProperty[$methodName].bind(null, $model, $options) }\n    }\n  }]\n});\nfunction Methods($model) {\n  // Object, Array, Map\n  for(const [$propertyClassName, $propertyClasses] of Object.entries(Defaults)) {\n    for(const $propertyClass of $propertyClasses) {\n      const { keys, methodDescriptor, type } = $propertyClass;\n      for(const $methodName of keys) {\n        if($propertyClassName === 'map' || type === 'mutators') {\n          const modelMethodOptions = structuredClone(\n            $model.options.methods[$propertyClassName][$methodName]\n          );\n          const methodOptions = Object.assign({}, $model.options, modelMethodOptions);\n          delete methodOptions.mutatorEvents;\n          methodOptions.mutatorEvents = modelMethodOptions.mutatorEvents;\n          Object.defineProperty(\n            $model, $methodName, methodDescriptor($methodName, $model, methodOptions)\n          );\n        }\n        else {\n          Object.defineProperty(\n            $model, $methodName, methodDescriptor($methodName,  $model)\n          );\n        }\n      }\n    }\n  }\n  return $model\n}\n\nconst ValidArrayAssigmentMethods = Object.freeze(\n  ['push', 'unshift']\n);\nconst ValidObjectAssigmentMethods = Object.freeze(\n  ['assign', 'defineProperties', 'set']\n);\n\nfunction Assign($model, $properties, $options) {\n  const { type } = $model;\n  const { assignObject, assignArray /*, autoload */ } = $options;\n  if(type === 'array' && ValidArrayAssigmentMethods.includes(assignArray)) {\n    $model[assignArray](...$properties);\n  }\n  else if(type === 'object' && ValidObjectAssigmentMethods.includes(assignObject)) {\n    $model[assignObject]($properties);\n  }\n  return $model\n}\n\nclass Model extends Core {\n  constructor($properties = {}, $schema = null, $options = {}) {\n    super({ propertyDirectory: { accessors: [($target, $property) => {\n      if($property === undefined) { return $target.target }\n      else { return $target.get($property) }\n    }] } });\n    if($properties instanceof Model) { $properties = $properties.valueOf(); }\n    let parent = null;\n    let path = null;\n    try {\n      Object.defineProperty(this, 'mount', { value: function($mount) {\n        const mountParent = $mount.parent;\n        const mountPath = $mount.path;\n        const property = (mountPath) ? mountPath.split('.').pop() : mountPath;\n        if(parent) { parent.unmount(property); }\n        parent = mountParent;\n        path = mountPath;\n      } });\n    }\n    catch($err) { console.error($err); }\n    try {\n      Object.defineProperty(this, 'unmount', { value: function($unmount) {\n        const unmountPath = $unmount.path;\n        delete this[$property];\n      } });\n    }\n    catch($err) { console.error($err); }\n    Object.defineProperties(this, {\n      'options': { configurable: true, get() {\n        const options = Options($options);\n        if(options.events) {\n          this.addEvents(options.events);\n          delete options.events;\n        }\n        if(options.enableEvents) {\n          const typeofEnableEvents = typeof options.enableEvents;\n          if(typeofEnableEvents === 'boolean') { this.enableEvents(); }\n          else if(typeofEnableEvents === 'object') { this.enableEvents(options.enableEvents); }\n        }\n        Object.defineProperty(this, 'options', { value: options });\n        return options\n      } },\n      'parent': { get() { return parent } },\n      'path': { get() { return path } },\n      'key': { get() { return (path) ? path.pop() : path } },\n      'target': { configurable: true, get() {\n        const target = typedObjectLiteral$1($properties);\n        Object.defineProperty(this, 'target', { value: target });\n        return target\n      } },\n      'type': { configurable: true, get() {\n        const type = typeOf$1(this.target);\n        Object.defineProperty(this, 'type', { value: type });\n        return type\n      } },\n      'schema': { configurable: true, get() {\n        const typeOfSchema = typeOf$1($schema);\n        let schema;\n        if(['undefined', 'null'].includes(typeOfSchema)) { schema = null; }\n        else if($schema instanceof Schema) { schema = $schema; }\n        else if(['array', 'object'].includes(typeOfSchema)) { schema = new Schema($schema); }\n        Object.defineProperty(this, 'schema', { value: schema });\n        return schema\n      } },\n    });\n    this.mount({\n      parent: this.options.parent,\n      path: this.options.path\n    });\n    if(localStorage && this.options.localStorage) {\n      Object.defineProperties(this,  {\n        'localStorage': { configurable: true, get() {\n          let _localStorage;\n          let path = [window.location.pathname];\n          if(this.path) { path.push(this.path); }\n          path = path.join('');\n          _localStorage = new LocalStorageRoute(path, this.options.localStorage);\n          Object.defineProperty(this, 'localStorage', { value: _localStorage });\n          return _localStorage\n        } },\n        'save': { value: function save() {\n          return this.localStorage.set(this.valueOf())\n        } },\n        'load': { value: function load() {\n          return this.localStorage.get()\n        } },\n        'unload': { value: function unload() {\n          return this.localStorage.remove()\n        } },\n      });\n    }\n    Methods(this);\n    if(this.options.autoload) {\n      Assign(this, this.load() || $properties, this.options);\n    }\n    else {\n      Assign(this, $properties, this.options);\n    }\n  }\n  retroReenableEvents() {\n    let model = this;\n    while(model) {\n      model.reenableEvents({ enable: true });\n      model = model.parent;\n    }\n    return this\n  }\n  parse($settings = { type: 'object', replacer: null, space: 0 }) {\n    let parsement = typedObjectLiteral$1(this.type);\n    for(const [\n      $propertyDescriptorName, $propertyDescriptor\n    ] of Object.entries(\n      Object.getOwnPropertyDescriptors(this.target))\n    ) {\n      let { enumerable, value, writable, configurable } = $propertyDescriptor;\n      if(value instanceof Model) {\n        Object.defineProperty(parsement, $propertyDescriptorName, {\n          enumerable, value: value.valueOf(), writable, configurable\n        });\n      }\n      else {\n        Object.defineProperty(parsement, $propertyDescriptorName, {\n          enumerable, value, writable, configurable\n        });\n      }\n    }\n    let { type, replacer, space } = $settings;\n    if(type === 'object') { return parsement }\n    else if(type === 'string') { return JSON.stringify(parsement, replacer, space) }\n    else { return undefined }\n  }\n}\n\nexport { Model, Schema, Validation, Validator, Verification };\n//# sourceMappingURL=objecture.sans.core-plex.js.map\n","const TOKENS = {\n    attribute: /\\[\\s*(?:(?<namespace>\\*|[-\\w\\P{ASCII}]*)\\|)?(?<name>[-\\w\\P{ASCII}]+)\\s*(?:(?<operator>\\W?=)\\s*(?<value>.+?)\\s*(\\s(?<caseSensitive>[iIsS]))?\\s*)?\\]/gu,\n    id: /#(?<name>[-\\w\\P{ASCII}]+)/gu,\n    class: /\\.(?<name>[-\\w\\P{ASCII}]+)/gu,\n    comma: /\\s*,\\s*/g,\n    combinator: /\\s*[\\s>+~]\\s*/g,\n    'pseudo-element': /::(?<name>[-\\w\\P{ASCII}]+)(?:\\((?<argument>¶*)\\))?/gu,\n    'pseudo-class': /:(?<name>[-\\w\\P{ASCII}]+)(?:\\((?<argument>¶*)\\))?/gu,\n    universal: /(?:(?<namespace>\\*|[-\\w\\P{ASCII}]*)\\|)?\\*/gu,\n    type: /(?:(?<namespace>\\*|[-\\w\\P{ASCII}]*)\\|)?(?<name>[-\\w\\P{ASCII}]+)/gu, // this must be last\n};\nconst TRIM_TOKENS = new Set(['combinator', 'comma']);\nconst RECURSIVE_PSEUDO_CLASSES = new Set([\n    'not',\n    'is',\n    'where',\n    'has',\n    'matches',\n    '-moz-any',\n    '-webkit-any',\n    'nth-child',\n    'nth-last-child',\n]);\nconst nthChildRegExp = /(?<index>[\\dn+-]+)\\s+of\\s+(?<subtree>.+)/;\nconst RECURSIVE_PSEUDO_CLASSES_ARGS = {\n    'nth-child': nthChildRegExp,\n    'nth-last-child': nthChildRegExp,\n};\nconst getArgumentPatternByType = (type) => {\n    switch (type) {\n        case 'pseudo-element':\n        case 'pseudo-class':\n            return new RegExp(TOKENS[type].source.replace('(?<argument>¶*)', '(?<argument>.*)'), 'gu');\n        default:\n            return TOKENS[type];\n    }\n};\nfunction gobbleParens(text, offset) {\n    let nesting = 0;\n    let result = '';\n    for (; offset < text.length; offset++) {\n        const char = text[offset];\n        switch (char) {\n            case '(':\n                ++nesting;\n                break;\n            case ')':\n                --nesting;\n                break;\n        }\n        result += char;\n        if (nesting === 0) {\n            return result;\n        }\n    }\n    return result;\n}\nfunction tokenizeBy(text, grammar = TOKENS) {\n    if (!text) {\n        return [];\n    }\n    const tokens = [text];\n    for (const [type, pattern] of Object.entries(grammar)) {\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            if (typeof token !== 'string') {\n                continue;\n            }\n            pattern.lastIndex = 0;\n            const match = pattern.exec(token);\n            if (!match) {\n                continue;\n            }\n            const from = match.index - 1;\n            const args = [];\n            const content = match[0];\n            const before = token.slice(0, from + 1);\n            if (before) {\n                args.push(before);\n            }\n            args.push({\n                ...match.groups,\n                type,\n                content,\n            });\n            const after = token.slice(from + content.length + 1);\n            if (after) {\n                args.push(after);\n            }\n            tokens.splice(i, 1, ...args);\n        }\n    }\n    let offset = 0;\n    for (const token of tokens) {\n        switch (typeof token) {\n            case 'string':\n                throw new Error(`Unexpected sequence ${token} found at index ${offset}`);\n            case 'object':\n                offset += token.content.length;\n                token.pos = [offset - token.content.length, offset];\n                if (TRIM_TOKENS.has(token.type)) {\n                    token.content = token.content.trim() || ' ';\n                }\n                break;\n        }\n    }\n    return tokens;\n}\nconst STRING_PATTERN = /(['\"])([^\\\\\\n]+?)\\1/g;\nconst ESCAPE_PATTERN = /\\\\./g;\nfunction tokenize(selector, grammar = TOKENS) {\n    // Prevent leading/trailing whitespaces from being interpreted as combinators\n    selector = selector.trim();\n    if (selector === '') {\n        return [];\n    }\n    const replacements = [];\n    // Replace escapes with placeholders.\n    selector = selector.replace(ESCAPE_PATTERN, (value, offset) => {\n        replacements.push({ value, offset });\n        return '\\uE000'.repeat(value.length);\n    });\n    // Replace strings with placeholders.\n    selector = selector.replace(STRING_PATTERN, (value, quote, content, offset) => {\n        replacements.push({ value, offset });\n        return `${quote}${'\\uE001'.repeat(content.length)}${quote}`;\n    });\n    // Replace parentheses with placeholders.\n    {\n        let pos = 0;\n        let offset;\n        while ((offset = selector.indexOf('(', pos)) > -1) {\n            const value = gobbleParens(selector, offset);\n            replacements.push({ value, offset });\n            selector = `${selector.substring(0, offset)}(${'¶'.repeat(value.length - 2)})${selector.substring(offset + value.length)}`;\n            pos = offset + value.length;\n        }\n    }\n    // Now we have no nested structures and we can parse with regexes\n    const tokens = tokenizeBy(selector, grammar);\n    // Replace placeholders in reverse order.\n    const changedTokens = new Set();\n    for (const replacement of replacements.reverse()) {\n        for (const token of tokens) {\n            const { offset, value } = replacement;\n            if (!(token.pos[0] <= offset &&\n                offset + value.length <= token.pos[1])) {\n                continue;\n            }\n            const { content } = token;\n            const tokenOffset = offset - token.pos[0];\n            token.content =\n                content.slice(0, tokenOffset) +\n                    value +\n                    content.slice(tokenOffset + value.length);\n            if (token.content !== content) {\n                changedTokens.add(token);\n            }\n        }\n    }\n    // Update changed tokens.\n    for (const token of changedTokens) {\n        const pattern = getArgumentPatternByType(token.type);\n        if (!pattern) {\n            throw new Error(`Unknown token type: ${token.type}`);\n        }\n        pattern.lastIndex = 0;\n        const match = pattern.exec(token.content);\n        if (!match) {\n            throw new Error(`Unable to parse content for ${token.type}: ${token.content}`);\n        }\n        Object.assign(token, match.groups);\n    }\n    return tokens;\n}\n/**\n *  Convert a flat list of tokens into a tree of complex & compound selectors\n */\nfunction nestTokens(tokens, { list = true } = {}) {\n    if (list && tokens.find((t) => t.type === 'comma')) {\n        const selectors = [];\n        const temp = [];\n        for (let i = 0; i < tokens.length; i++) {\n            if (tokens[i].type === 'comma') {\n                if (temp.length === 0) {\n                    throw new Error('Incorrect comma at ' + i);\n                }\n                selectors.push(nestTokens(temp, { list: false }));\n                temp.length = 0;\n            }\n            else {\n                temp.push(tokens[i]);\n            }\n        }\n        if (temp.length === 0) {\n            throw new Error('Trailing comma');\n        }\n        else {\n            selectors.push(nestTokens(temp, { list: false }));\n        }\n        return { type: 'list', list: selectors };\n    }\n    for (let i = tokens.length - 1; i >= 0; i--) {\n        let token = tokens[i];\n        if (token.type === 'combinator') {\n            let left = tokens.slice(0, i);\n            let right = tokens.slice(i + 1);\n            if (left.length === 0) {\n                return {\n                    type: 'relative',\n                    combinator: token.content,\n                    right: nestTokens(right),\n                };\n            }\n            return {\n                type: 'complex',\n                combinator: token.content,\n                left: nestTokens(left),\n                right: nestTokens(right),\n            };\n        }\n    }\n    switch (tokens.length) {\n        case 0:\n            throw new Error('Could not build AST.');\n        case 1:\n            // If we're here, there are no combinators, so it's just a list.\n            return tokens[0];\n        default:\n            return {\n                type: 'compound',\n                list: [...tokens], // clone to avoid pointers messing up the AST\n            };\n    }\n}\n/**\n * Traverse an AST in depth-first order\n */\nfunction* flatten(node, \n/**\n * @internal\n */\nparent) {\n    switch (node.type) {\n        case 'list':\n            for (let child of node.list) {\n                yield* flatten(child, node);\n            }\n            break;\n        case 'complex':\n            yield* flatten(node.left, node);\n            yield* flatten(node.right, node);\n            break;\n        case 'relative':\n            yield* flatten(node.right, node);\n            break;\n        case 'compound':\n            yield* node.list.map((token) => [token, node]);\n            break;\n        default:\n            yield [node, parent];\n    }\n}\n/**\n * Traverse an AST (or part thereof), in depth-first order\n */\nfunction walk(node, visit, \n/**\n * @internal\n */\nparent) {\n    if (!node) {\n        return;\n    }\n    for (const [token, ast] of flatten(node, parent)) {\n        visit(token, ast);\n    }\n}\n/**\n * Parse a CSS selector\n *\n * @param selector - The selector to parse\n * @param options.recursive - Whether to parse the arguments of pseudo-classes like :is(), :has() etc. Defaults to true.\n * @param options.list - Whether this can be a selector list (A, B, C etc). Defaults to true.\n */\nfunction parse(selector, { recursive = true, list = true } = {}) {\n    const tokens = tokenize(selector);\n    if (!tokens) {\n        return;\n    }\n    const ast = nestTokens(tokens, { list });\n    if (!recursive) {\n        return ast;\n    }\n    for (const [token] of flatten(ast)) {\n        if (token.type !== 'pseudo-class' || !token.argument) {\n            continue;\n        }\n        if (!RECURSIVE_PSEUDO_CLASSES.has(token.name)) {\n            continue;\n        }\n        let argument = token.argument;\n        const childArg = RECURSIVE_PSEUDO_CLASSES_ARGS[token.name];\n        if (childArg) {\n            const match = childArg.exec(argument);\n            if (!match) {\n                continue;\n            }\n            Object.assign(token, match.groups);\n            argument = match.groups['subtree'];\n        }\n        if (!argument) {\n            continue;\n        }\n        Object.assign(token, {\n            subtree: parse(argument, {\n                recursive: true,\n                list: true,\n            }),\n        });\n    }\n    return ast;\n}\n/**\n * Converts the given list or (sub)tree to a string.\n */\nfunction stringify(listOrNode) {\n    if (Array.isArray(listOrNode)) {\n        return listOrNode.map((token) => token.content).join(\"\");\n    }\n    switch (listOrNode.type) {\n        case \"list\":\n            return listOrNode.list.map(stringify).join(\",\");\n        case \"relative\":\n            return (listOrNode.combinator +\n                stringify(listOrNode.right));\n        case \"complex\":\n            return (stringify(listOrNode.left) +\n                listOrNode.combinator +\n                stringify(listOrNode.right));\n        case \"compound\":\n            return listOrNode.list.map(stringify).join(\"\");\n        default:\n            return listOrNode.content;\n    }\n}\n/**\n * To convert the specificity array to a number\n */\nfunction specificityToNumber(specificity, base) {\n    base = base || Math.max(...specificity) + 1;\n    return (specificity[0] * (base << 1) + specificity[1] * base + specificity[2]);\n}\n/**\n * Calculate specificity of a selector.\n *\n * If the selector is a list, the max specificity is returned.\n */\nfunction specificity(selector) {\n    let ast = selector;\n    if (typeof ast === 'string') {\n        ast = parse(ast, { recursive: true });\n    }\n    if (!ast) {\n        return [];\n    }\n    if (ast.type === 'list' && 'list' in ast) {\n        let base = 10;\n        const specificities = ast.list.map((ast) => {\n            const sp = specificity(ast);\n            base = Math.max(base, ...specificity(ast));\n            return sp;\n        });\n        const numbers = specificities.map((ast) => specificityToNumber(ast, base));\n        return specificities[numbers.indexOf(Math.max(...numbers))];\n    }\n    const ret = [0, 0, 0];\n    for (const [token] of flatten(ast)) {\n        switch (token.type) {\n            case 'id':\n                ret[0]++;\n                break;\n            case 'class':\n            case 'attribute':\n                ret[1]++;\n                break;\n            case 'pseudo-element':\n            case 'type':\n                ret[2]++;\n                break;\n            case 'pseudo-class':\n                if (token.name === 'where') {\n                    break;\n                }\n                if (!RECURSIVE_PSEUDO_CLASSES.has(token.name) ||\n                    !token.subtree) {\n                    ret[1]++;\n                    break;\n                }\n                const sub = specificity(token.subtree);\n                sub.forEach((s, i) => (ret[i] += s));\n                // :nth-child() & :nth-last-child() add (0, 1, 0) to the specificity of their most complex selector\n                if (token.name === 'nth-child' ||\n                    token.name === 'nth-last-child') {\n                    ret[1]++;\n                }\n        }\n    }\n    return ret;\n}\n\nexport { RECURSIVE_PSEUDO_CLASSES, RECURSIVE_PSEUDO_CLASSES_ARGS, TOKENS, TRIM_TOKENS, flatten, gobbleParens, parse, specificity, specificityToNumber, stringify, tokenize, tokenizeBy, walk };\n","export default class QuerySelector {\n  #settings\n  #enable\n  constructor($settings) {\n    this.#settings = $settings\n  }\n  get context() { return this.#settings.context }\n  get method() { return this.#settings.method }\n  get name() { return this.#settings.name }\n  get selector() { return this.#settings.selector }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    if($enable === this.#enable) return\n    if($enable === true) {\n      const { context, name, method, selector } = this\n      const $this = this\n      Object.defineProperty(context.querySelectors, name, {\n        configurable: true, enumerable: true, \n        get() { return context[method](selector) }\n      })\n    }\n    else if($enable === false) {\n      delete this.context.querySelectors[this.name]\n    }\n    this.#enable = $enable\n  }\n}","import * as parsel from '../../../node_modules/parsel-js/dist/parsel.js'\nconst Combinators = {\n  descendant: \" \",\n  child: \">\",\n  subsequentSibling: \"~\",\n  nextSibling: \"+\",\n}\nfunction Query($element, $queryMethod, $queryString) {\n  let query = []\n  let queryString = $queryString\n  let queryTokens = parsel.tokenize(queryString)\n  // Orient Query Tokens To Scope\n  if(queryTokens[0].content !== ':scope') {\n    queryString = [':scope', queryString].join(' ')\n    queryTokens = parsel.tokenize(queryString)\n  }\n  // Define Scope\n  const scope = queryTokens[0]\n  const scopeCombinator = queryTokens[1]\n  // Define Scope Query\n  const scopeQueryString = parsel.stringify(queryTokens.slice(2))\n  const scopeQueryTokens = parsel.tokenize(scopeQueryString)\n  const scopeQueryParse = parsel.parse(scopeQueryString)\n  const children = Array.from($element.children)\n  iterateChildren: \n  for(const [$childIndex, $child] of Object.entries(children)) {\n    // Scope Query Type: Complex\n    if(scopeQueryParse.type === 'complex') {\n      const { left, combinator, right } = scopeQueryParse\n      // Lexter\n      const lexter = Query($element, $queryMethod, parsel.stringify(left))\n      // Dexter\n      let dexter\n      if(lexter.length) {\n        // Combinator: Descendant \" \"\n        if(combinator === Combinators.descendant) {\n          dexter = Query($child, $queryMethod, [':scope', parsel.stringify(right)].join(Combinators.descendant))\n          query = query.concat(dexter)\n        }\n        // Combinator: Child \">\"\n        else if(combinator === Combinators.child) {\n          dexter = Query($child, $queryMethod, [':scope', parsel.stringify(right)].join(Combinators.child))\n          query = query.concat(dexter)\n        }\n        // Combinator: Subsequent Sibling \"~\"\n        else if(combinator === Combinators.subsequentSibling) {\n          dexter = Query({ children: children.slice($childIndex + 1) }, $queryMethod, parsel.stringify(right))\n          query = query.concat(dexter)\n        }\n        // Combinator: Next Sibling \"+\"\n        else if(combinator === Combinators.nextSibling) {\n          dexter = Query({ children: children.slice($childIndex + 1, $childIndex + 2) }, $queryMethod, parsel.stringify(right))\n          query = query.concat(dexter)\n        }\n      }\n    }\n    // Scope Query Type: Not Complex\n    else {\n      // Child: Matches Query String\n      if($child.matches(scopeQueryString)) query = query.concat($child)\n      // Descendant: Query Selector String\n      if(scopeCombinator.content === Combinators.descendant) {\n        const childQuery = $child[$queryMethod](scopeQueryString)\n        if(childQuery instanceof NodeList) query = query.concat(...childQuery)\n        else if(childQuery instanceof Node) query = query.concat(childQuery) \n      }\n    }\n    if($queryMethod === 'querySelector' && query.length > 0) return query.slice(0, 1)\n  }\n  return query\n}\nexport default Query","import * as parsel from '../../node_modules/parsel-js/dist/parsel.js'\nimport Core from '../core/index.js'\nimport QuerySelector from './querySelector/index.js'\nimport Query from './query/index.js'\nimport Settings from './settings/index.js'\nimport Options from './options/index.js'\nexport default class View extends Core {\n  #templates\n  #scope\n  #parentElement\n  #_template\n  #children\n  // #querySelectors = {}\n  constructor($settings = {}, $options = {}) {\n    super(Settings($settings), Options($options))\n    Object.defineProperties(this, {\n      _querySelectors: {\n        enumerable: false, writable: false, configurable: false,\n        value: {},\n      },\n      querySelectors: {\n        enumerable: true,\n        get() { return this._querySelectors },\n      },\n      qs: {\n        enumerable: true,\n        get() { return this.querySelectors },\n      },\n    })\n    this.addQuerySelectors(this.settings.querySelectors)\n    const {\n      enableQuerySelectors, enableEvents\n    } = this.options\n    if(enableQuerySelectors) this.enableQuerySelectors()\n    if(enableEvents) this.enableEvents()\n  }\n  get templates() {\n    if(this.#templates !== undefined) return this.#templates\n    this.#templates = this.settings.templates\n    return this.#templates\n  }\n  get scope() {\n    if(this.#scope !== undefined) return this.#scope\n    this.#scope = this.settings.scope\n    return this.#scope\n  }\n  get parentElement() {\n    if(this.#parentElement !== undefined) return this.#parentElement\n    this.#parentElement = this.settings.parentElement\n    return this.#parentElement\n  }\n  get #template() {\n    if(this.#_template !== undefined) { return this.#_template }\n    this.#_template = document.createElement('template')\n    return this.#_template\n  }\n  set #template($templateString) {\n    this.disableQuerySelectors()\n    this.#template.innerHTML = $templateString\n    this.children = this.#template.content.children\n    this.parentElement.append(...this.children.values())\n    this.enableQuerySelectors()\n    this.retroReenableEvents()\n  }\n  get children() {\n    if(this.#children !== undefined) return this.#children\n    this.#children = new Map()\n    return this.#children\n  }\n  set children($children) {\n    const children = this.children\n    children.forEach(($child, $childIndex) => $child?.parentElement.removeChild($child))\n    children.clear()\n    Array.from($children).forEach(($child, $childIndex) => {\n      children.set($childIndex, $child)\n    })\n  }\n  querySelector($queryString, $queryScope) {\n    const query = this.#query('querySelector', $queryString, $queryScope)\n    return query[0] || null\n  }\n  querySelectorAll($queryString, $queryScope) {\n    const query = this.#query('querySelectorAll', $queryString, $queryScope)\n    return query\n  }\n  #query($queryMethod, $queryString) {\n    const queryElement = (this.scope === 'template')\n      ? { children: Array.from(this.children.values()) }\n      : { children: Array.from(this.parentElement.children) }\n    return Query(queryElement, $queryMethod, $queryString)\n  }\n  addQuerySelectors($queryMethods) {\n    if($queryMethods === undefined) return this\n    const { querySelectors } = this.settings\n    for(const [$queryMethod, $selectors] of Object.entries($queryMethods)) {\n      for(const [$selectorName, $selector] of Object.entries($selectors)) {\n        querySelectors[$queryMethod] = querySelectors[$queryMethod] || {}\n        querySelectors[$queryMethod][$selectorName] = new QuerySelector({\n          context: this,\n          name: $selectorName,\n          method: $queryMethod,\n          selector: $selector,\n          enable: false,\n        })\n      }\n    }\n    return this\n  }\n  removeQuerySelectors($queryMethods) {\n    $queryMethods = $queryMethods || this.settings.querySelectors\n    for(const [\n      $queryMethod, $selectors\n    ] of Object.entries($queryMethods)) {\n      for(const [\n        $selectorName, $selector\n      ] of Object.entries($selectors)) {\n        if(this.settings.querySelectors[$queryMethod] !== undefined) {\n          delete this.settings.querySelectors[$queryMethod][$selectorName]\n        }\n      }\n    }\n    return this\n  }\n  enableQuerySelectors($queryMethods) {\n    $queryMethods = $queryMethods || this.settings.querySelectors\n    const $this = this \n    for(const $selectors of Object.values($queryMethods)) {\n      for(const $selector of Object.values($selectors)) {\n        $selector.enable = true\n      }\n    }\n    return this\n  }\n  disableQuerySelectors($queryMethods) {\n    $queryMethods = $queryMethods || this.settings.querySelectors\n    for(const $selectors of Object.values($queryMethods)) {\n      for(const $selector of Object.values($selectors)) {\n        $selector.enable = false\n      }\n    }\n    return this\n  }\n  render($models = {}, $template = 'default') {\n    this.#template = this.templates[$template]($models)\n    return this\n  }\n}","import { assign as recursiveAssign } from 'recourse'\nexport default ($settings) => recursiveAssign({\n  scope: 'template', // 'parent',\n  templates: {},\n  querySelectors: {},\n}, $settings)","export default ($options) => Object.assign({\n  events: false,\n  eventListeners: false,\n  enableEvents: true,\n  enableQuerySelectors: true,\n}, $options)\n","const Events = {\n  // Fetch Response Interface Events\n  // OK\n  'ok': ($response, $requestMethod) => {\n    const eventType = `${$requestMethod}:ok`\n    const event = new CustomEvent(eventType, {\n      detail: {\n        response: $response,\n      },\n    })\n    return event\n  },\n  // Status\n  'status': ($response, $requestMethod) => {\n    const eventType = `${$requestMethod}:status`\n    const event = new CustomEvent(eventType, {\n      detail: {\n        response: $response,\n      },\n    })\n    return event\n  },\n  // Status Code\n  'statusCode': ($response, $requestMethod) => {\n    const eventType = `${$requestMethod}:status:${$response.status}`\n    const event = new CustomEvent(eventType, {\n      detail: {\n        response: $response,\n      },\n    })\n    return event\n  },\n  // Status Text\n  'statusText': ($response, $requestMethod) => {\n    const eventType = `${$requestMethod}:statusText`\n    const event = new CustomEvent(eventType, {\n      detail: {\n        response: $response,\n      },\n    })\n    return event\n  },\n  // Status Text Message\n  'statusTextMessage': ($response, $requestMethod) => {\n    const eventType = `${$requestMethod}:statusText:${$response.statusText}`\n    const event = new CustomEvent(eventType, {\n      detail: {\n        response: $response,\n      },\n    })\n    return event\n  },\n  // Abort\n  'abort': ($abortController) => {\n    const eventType = 'abort'\n    const event = new CustomEvent(eventType, {\n      detail: {\n        abortController: $abortController,\n      },\n    })\n    return event\n  },\n}\n\nexport default Events","import Events from '../interfaces/response/events/index.js'\nexport default class FetchRoute extends EventTarget {\n  #settings = {}\n  #name\n  #origin\n  #path\n  constructor($settings = {}) {\n    super()\n    this.#settings = $settings\n    this.#name = this.#settings.name\n    this.#origin = this.#settings.origin\n    this.#path = this.#settings.path\n    this.addMethods(this.#settings.methods)\n  }\n  addMethods($methods) {\n    const $this = this\n    iterateMethods:\n    for(const [\n      $methodName, $methodOptions\n    ] of Object.entries($methods)) {\n      const abortKey = `${$methodName}AbortSignal`\n      Object.defineProperties($this, {\n        [abortKey]: {\n          enumerable: false,\n          writable: true,\n          value: undefined,\n        },\n        [$methodName]: {\n          enumerable: true,\n          writable: false,\n          configurable: false,\n          value: async function() {\n            const $arguments = [...arguments]\n            let $resourcePath, $resourceOptions\n            if($arguments.length === 0) {\n              $resourcePath = ''\n              $resourceOptions = {}\n            } else\n            if($arguments.length === 1) {\n              if(typeof $arguments[0] === 'string') {\n                $resourcePath = $arguments[0]\n                $resourceOptions = {}\n              } else\n              if(typeof $arguments[0] === 'object') {\n                $resourcePath = ''\n                $resourceOptions = $arguments[0]\n              }\n            } else\n            if($arguments.length === 2) {\n              if(typeof $arguments[0] === 'string') {\n                $resourcePath = $arguments[0]\n              }\n              if(typeof $arguments[1] === 'object') {\n                $resourceOptions = $arguments[1]\n              }\n            }\n            const methodName = $methodName\n            const resourceOptions = Object.assign({}, $methodOptions)\n            let { urlSearchParams, headers, body, priority } = $resourceOptions\n            let pathParameters = new URLSearchParams(urlSearchParams).toString()\n            if(pathParameters.length > 0) pathParameters = '?'.concat(pathParameters)\n            if(headers !== undefined) Object.assign(resourceOptions.headers, headers)\n            if(body !== undefined) resourceOptions.body = body\n            if(priority !== undefined) resourceOptions.priority = priority\n            const resource = String.prototype.concat(\n              $this.#origin, this.#decodePath($this.#path, $resourcePath), pathParameters\n            )\n            if($this[abortKey] !== undefined) {\n              $this[abortKey].abort()\n              $this.createEvent($this, 'abort', $this[abortKey])\n            }\n            $this[abortKey] = new AbortController()\n            resourceOptions.signal = $this[abortKey].signal\n            let fetchSource = await fetch(resource, resourceOptions)\n            .then(($fetchSource) => {\n              $this\n              .createEvent($this, 'ok', $fetchSource.clone(), $methodName)\n              .createEvent($this, 'status', $fetchSource.clone(), $methodName)\n              .createEvent($this, 'statusCode', $fetchSource.clone(), $methodName)\n              .createEvent($this, 'statusText', $fetchSource.clone(), $methodName)\n              .createEvent($this, 'statusTextMessage', $fetchSource.clone(), $methodName)\n              return $fetchSource\n            })\n            .catch(($err) => { /* console.error($err) */ })\n            return fetchSource\n          }\n        }\n      })\n    }\n  }\n  #decodePath($path, $resourcePath) {\n    if($path.includes(':') === false) return $path \n    const pathFragments = $path.split('/')\n    const resourcePathFragments = $resourcePath.split('/')\n    if(pathFragments.length !== resourcePathFragments.length) return $path\n    let decodedPathFragments = []\n    let pathFragmentsIndex = 0\n    iteratePathFragments: \n    while(pathFragmentsIndex < pathFragments.length) {\n      let pathFragment = pathFragments[pathFragmentsIndex]\n      const resourcePathFragment = resourcePathFragments[pathFragmentsIndex]\n      if(pathFragment.includes(':')) {\n        pathFragment = resourcePathFragments[pathFragmentsIndex]\n      } else if(\n        pathFragment !== resourcePathFragment\n      ) {\n        return $path\n      }\n      decodedPathFragments.push(pathFragment)\n      pathFragmentsIndex++\n    }\n    return decodedPathFragments.join('/')\n  }\n  removeMethods($methods) {\n    iterateMethods: \n    for(const $methodName of Object.values($methods)) {\n      const abortKey = `${$methodName}AbortSignal`\n      if(this[abortKey].signal.aborted === false) {\n        this[abortKey].abort()\n      }\n      delete this[abortKey]\n      delete this[$methodName]\n    }\n  }\n  createEvent($eventTarget, $eventType, $response, $requestMethod) {\n    const event = Events[$eventType]($response, $requestMethod)\n    $eventTarget.dispatchEvent(event)\n    return this\n  }\n}","import FetchRoute from './fetchRoute/index.js'\nimport Core from '../../core/index.js'\nimport Settings from './settings/index.js'\nimport Options from './options/index.js'\nexport default class FetchRouter extends Core {\n  #scheme\n  #domain\n  #port\n  #_authority\n  #_origin\n  #routes = {}\n  constructor($settings, $options) {\n    super(Settings($settings), Options($options))\n    const { scheme, domain, port, routes } = $settings\n    this.#scheme = scheme\n    this.#domain = domain\n    this.#port = port\n    this.routes = routes\n    if($options.enableEvents === true) this.enableEvents()\n  }\n  get #authority() {\n    if(this.#_authority === undefined) {\n      this.#_authority = String.prototype.concat(\n        this.#domain, ':', this.#port\n      )\n    }\n    return this.#_authority\n  }\n  get #origin() {\n    if(this.#_origin === undefined) {\n      this.#_origin = String.prototype.concat(\n        this.#scheme, '://', this.#authority\n      )\n    }\n    return this.#_origin\n  }\n  get routes() { return this.#routes }\n  set routes($routes) { this.addRoutes($routes) }\n  addRoutes($routes) {\n    const $this = this\n    const _routes = this.#routes\n    for(let [\n      $routePath, $routeSettings\n    ] of Object.entries($routes)) {\n      $routeSettings.origin = this.#origin\n      $routeSettings.path = $routePath\n      _routes[$routeSettings.name] = new FetchRoute($routeSettings)\n    }\n    return this\n  }\n  removeRoutes($routes) {\n    const _routes = this.#routes\n    for(const $path of $routes) {\n      delete _routes[$path]\n    }\n    return this\n  }\n}\n","export default ($settings) => Object.assign({}, $settings)","export default ($options) => Object.assign({\n  enableEvents: true\n}, $options)","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenData = void 0;\nexports.parse = parse;\nexports.compile = compile;\nexports.match = match;\nexports.pathToRegexp = pathToRegexp;\nexports.stringify = stringify;\nconst DEFAULT_DELIMITER = \"/\";\nconst NOOP_VALUE = (value) => value;\nconst ID_START = /^[$_\\p{ID_Start}]$/u;\nconst ID_CONTINUE = /^[$\\u200c\\u200d\\p{ID_Continue}]$/u;\nconst DEBUG_URL = \"https://git.new/pathToRegexpError\";\nconst SIMPLE_TOKENS = {\n    // Groups.\n    \"{\": \"{\",\n    \"}\": \"}\",\n    // Reserved.\n    \"(\": \"(\",\n    \")\": \")\",\n    \"[\": \"[\",\n    \"]\": \"]\",\n    \"+\": \"+\",\n    \"?\": \"?\",\n    \"!\": \"!\",\n};\n/**\n * Escape text for stringify to path.\n */\nfunction escapeText(str) {\n    return str.replace(/[{}()\\[\\]+?!:*]/g, \"\\\\$&\");\n}\n/**\n * Escape a regular expression string.\n */\nfunction escape(str) {\n    return str.replace(/[.+*?^${}()[\\]|/\\\\]/g, \"\\\\$&\");\n}\n/**\n * Tokenize input string.\n */\nfunction* lexer(str) {\n    const chars = [...str];\n    let i = 0;\n    function name() {\n        let value = \"\";\n        if (ID_START.test(chars[++i])) {\n            value += chars[i];\n            while (ID_CONTINUE.test(chars[++i])) {\n                value += chars[i];\n            }\n        }\n        else if (chars[i] === '\"') {\n            let pos = i;\n            while (i < chars.length) {\n                if (chars[++i] === '\"') {\n                    i++;\n                    pos = 0;\n                    break;\n                }\n                if (chars[i] === \"\\\\\") {\n                    value += chars[++i];\n                }\n                else {\n                    value += chars[i];\n                }\n            }\n            if (pos) {\n                throw new TypeError(`Unterminated quote at ${pos}: ${DEBUG_URL}`);\n            }\n        }\n        if (!value) {\n            throw new TypeError(`Missing parameter name at ${i}: ${DEBUG_URL}`);\n        }\n        return value;\n    }\n    while (i < chars.length) {\n        const value = chars[i];\n        const type = SIMPLE_TOKENS[value];\n        if (type) {\n            yield { type, index: i++, value };\n        }\n        else if (value === \"\\\\\") {\n            yield { type: \"ESCAPED\", index: i++, value: chars[i++] };\n        }\n        else if (value === \":\") {\n            const value = name();\n            yield { type: \"PARAM\", index: i, value };\n        }\n        else if (value === \"*\") {\n            const value = name();\n            yield { type: \"WILDCARD\", index: i, value };\n        }\n        else {\n            yield { type: \"CHAR\", index: i, value: chars[i++] };\n        }\n    }\n    return { type: \"END\", index: i, value: \"\" };\n}\nclass Iter {\n    constructor(tokens) {\n        this.tokens = tokens;\n    }\n    peek() {\n        if (!this._peek) {\n            const next = this.tokens.next();\n            this._peek = next.value;\n        }\n        return this._peek;\n    }\n    tryConsume(type) {\n        const token = this.peek();\n        if (token.type !== type)\n            return;\n        this._peek = undefined; // Reset after consumed.\n        return token.value;\n    }\n    consume(type) {\n        const value = this.tryConsume(type);\n        if (value !== undefined)\n            return value;\n        const { type: nextType, index } = this.peek();\n        throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}: ${DEBUG_URL}`);\n    }\n    text() {\n        let result = \"\";\n        let value;\n        while ((value = this.tryConsume(\"CHAR\") || this.tryConsume(\"ESCAPED\"))) {\n            result += value;\n        }\n        return result;\n    }\n}\n/**\n * Tokenized path instance.\n */\nclass TokenData {\n    constructor(tokens) {\n        this.tokens = tokens;\n    }\n}\nexports.TokenData = TokenData;\n/**\n * Parse a string for the raw tokens.\n */\nfunction parse(str, options = {}) {\n    const { encodePath = NOOP_VALUE } = options;\n    const it = new Iter(lexer(str));\n    function consume(endType) {\n        const tokens = [];\n        while (true) {\n            const path = it.text();\n            if (path)\n                tokens.push({ type: \"text\", value: encodePath(path) });\n            const param = it.tryConsume(\"PARAM\");\n            if (param) {\n                tokens.push({\n                    type: \"param\",\n                    name: param,\n                });\n                continue;\n            }\n            const wildcard = it.tryConsume(\"WILDCARD\");\n            if (wildcard) {\n                tokens.push({\n                    type: \"wildcard\",\n                    name: wildcard,\n                });\n                continue;\n            }\n            const open = it.tryConsume(\"{\");\n            if (open) {\n                tokens.push({\n                    type: \"group\",\n                    tokens: consume(\"}\"),\n                });\n                continue;\n            }\n            it.consume(endType);\n            return tokens;\n        }\n    }\n    const tokens = consume(\"END\");\n    return new TokenData(tokens);\n}\n/**\n * Compile a string to a template function for the path.\n */\nfunction compile(path, options = {}) {\n    const { encode = encodeURIComponent, delimiter = DEFAULT_DELIMITER } = options;\n    const data = path instanceof TokenData ? path : parse(path, options);\n    const fn = tokensToFunction(data.tokens, delimiter, encode);\n    return function path(data = {}) {\n        const [path, ...missing] = fn(data);\n        if (missing.length) {\n            throw new TypeError(`Missing parameters: ${missing.join(\", \")}`);\n        }\n        return path;\n    };\n}\nfunction tokensToFunction(tokens, delimiter, encode) {\n    const encoders = tokens.map((token) => tokenToFunction(token, delimiter, encode));\n    return (data) => {\n        const result = [\"\"];\n        for (const encoder of encoders) {\n            const [value, ...extras] = encoder(data);\n            result[0] += value;\n            result.push(...extras);\n        }\n        return result;\n    };\n}\n/**\n * Convert a single token into a path building function.\n */\nfunction tokenToFunction(token, delimiter, encode) {\n    if (token.type === \"text\")\n        return () => [token.value];\n    if (token.type === \"group\") {\n        const fn = tokensToFunction(token.tokens, delimiter, encode);\n        return (data) => {\n            const [value, ...missing] = fn(data);\n            if (!missing.length)\n                return [value];\n            return [\"\"];\n        };\n    }\n    const encodeValue = encode || NOOP_VALUE;\n    if (token.type === \"wildcard\" && encode !== false) {\n        return (data) => {\n            const value = data[token.name];\n            if (value == null)\n                return [\"\", token.name];\n            if (!Array.isArray(value) || value.length === 0) {\n                throw new TypeError(`Expected \"${token.name}\" to be a non-empty array`);\n            }\n            return [\n                value\n                    .map((value, index) => {\n                    if (typeof value !== \"string\") {\n                        throw new TypeError(`Expected \"${token.name}/${index}\" to be a string`);\n                    }\n                    return encodeValue(value);\n                })\n                    .join(delimiter),\n            ];\n        };\n    }\n    return (data) => {\n        const value = data[token.name];\n        if (value == null)\n            return [\"\", token.name];\n        if (typeof value !== \"string\") {\n            throw new TypeError(`Expected \"${token.name}\" to be a string`);\n        }\n        return [encodeValue(value)];\n    };\n}\n/**\n * Transform a path into a match function.\n */\nfunction match(path, options = {}) {\n    const { decode = decodeURIComponent, delimiter = DEFAULT_DELIMITER } = options;\n    const { regexp, keys } = pathToRegexp(path, options);\n    const decoders = keys.map((key) => {\n        if (decode === false)\n            return NOOP_VALUE;\n        if (key.type === \"param\")\n            return decode;\n        return (value) => value.split(delimiter).map(decode);\n    });\n    return function match(input) {\n        const m = regexp.exec(input);\n        if (!m)\n            return false;\n        const path = m[0];\n        const params = Object.create(null);\n        for (let i = 1; i < m.length; i++) {\n            if (m[i] === undefined)\n                continue;\n            const key = keys[i - 1];\n            const decoder = decoders[i - 1];\n            params[key.name] = decoder(m[i]);\n        }\n        return { path, params };\n    };\n}\nfunction pathToRegexp(path, options = {}) {\n    const { delimiter = DEFAULT_DELIMITER, end = true, sensitive = false, trailing = true, } = options;\n    const keys = [];\n    const sources = [];\n    const flags = sensitive ? \"\" : \"i\";\n    const paths = Array.isArray(path) ? path : [path];\n    const items = paths.map((path) => path instanceof TokenData ? path : parse(path, options));\n    for (const { tokens } of items) {\n        for (const seq of flatten(tokens, 0, [])) {\n            const regexp = sequenceToRegExp(seq, delimiter, keys);\n            sources.push(regexp);\n        }\n    }\n    let pattern = `^(?:${sources.join(\"|\")})`;\n    if (trailing)\n        pattern += `(?:${escape(delimiter)}$)?`;\n    pattern += end ? \"$\" : `(?=${escape(delimiter)}|$)`;\n    const regexp = new RegExp(pattern, flags);\n    return { regexp, keys };\n}\n/**\n * Generate a flat list of sequence tokens from the given tokens.\n */\nfunction* flatten(tokens, index, init) {\n    if (index === tokens.length) {\n        return yield init;\n    }\n    const token = tokens[index];\n    if (token.type === \"group\") {\n        const fork = init.slice();\n        for (const seq of flatten(token.tokens, 0, fork)) {\n            yield* flatten(tokens, index + 1, seq);\n        }\n    }\n    else {\n        init.push(token);\n    }\n    yield* flatten(tokens, index + 1, init);\n}\n/**\n * Transform a flat sequence of tokens into a regular expression.\n */\nfunction sequenceToRegExp(tokens, delimiter, keys) {\n    let result = \"\";\n    let backtrack = \"\";\n    let isSafeSegmentParam = true;\n    for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n        if (token.type === \"text\") {\n            result += escape(token.value);\n            backtrack += token.value;\n            isSafeSegmentParam || (isSafeSegmentParam = token.value.includes(delimiter));\n            continue;\n        }\n        if (token.type === \"param\" || token.type === \"wildcard\") {\n            if (!isSafeSegmentParam && !backtrack) {\n                throw new TypeError(`Missing text after \"${token.name}\": ${DEBUG_URL}`);\n            }\n            if (token.type === \"param\") {\n                result += `(${negate(delimiter, isSafeSegmentParam ? \"\" : backtrack)}+)`;\n            }\n            else {\n                result += `([\\\\s\\\\S]+)`;\n            }\n            keys.push(token);\n            backtrack = \"\";\n            isSafeSegmentParam = false;\n            continue;\n        }\n    }\n    return result;\n}\nfunction negate(delimiter, backtrack) {\n    if (backtrack.length < 2) {\n        if (delimiter.length < 2)\n            return `[^${escape(delimiter + backtrack)}]`;\n        return `(?:(?!${escape(delimiter)})[^${escape(backtrack)}])`;\n    }\n    if (delimiter.length < 2) {\n        return `(?:(?!${escape(backtrack)})[^${escape(delimiter)}])`;\n    }\n    return `(?:(?!${escape(backtrack)}|${escape(delimiter)})[\\\\s\\\\S])`;\n}\n/**\n * Stringify token data into a path string.\n */\nfunction stringify(data) {\n    return data.tokens\n        .map(function stringifyToken(token, index, tokens) {\n        if (token.type === \"text\")\n            return escapeText(token.value);\n        if (token.type === \"group\") {\n            return `{${token.tokens.map(stringifyToken).join(\"\")}}`;\n        }\n        const isSafe = isNameSafe(token.name) && isNextNameSafe(tokens[index + 1]);\n        const key = isSafe ? token.name : JSON.stringify(token.name);\n        if (token.type === \"param\")\n            return `:${key}`;\n        if (token.type === \"wildcard\")\n            return `*${key}`;\n        throw new TypeError(`Unexpected token: ${token}`);\n    })\n        .join(\"\");\n}\nfunction isNameSafe(name) {\n    const [first, ...rest] = name;\n    if (!ID_START.test(first))\n        return false;\n    return rest.every((char) => ID_CONTINUE.test(char));\n}\nfunction isNextNameSafe(token) {\n    if ((token === null || token === void 0 ? void 0 : token.type) !== \"text\")\n        return true;\n    return !ID_CONTINUE.test(token.value[0]);\n}\n//# sourceMappingURL=index.js.map","import { match } from 'path-to-regexp'\nexport default class Route extends EventTarget {\n  #_settings\n  #enable\n  #active\n  #match\n  constructor($settings = {}) {\n    super()\n    this.#settings = $settings\n  }\n  get #settings() { return this.#_settings }\n  set #settings($settings) {\n    this.#_settings = $settings\n    for(const [$settingKey, $settingVal] of Object.entries($settings)) {\n      Object.defineProperty(this, $settingKey, { value: $settingVal })\n    }\n  }\n  get pathname() { return this.#settings.pathname }\n  get enable() {\n    if(this.#enable !== undefined) return this.#enable\n    if(this.#settings.enable !== undefined) {\n      this.#enable = this.#settings.enable\n    }\n    else { this.#enable = true }\n    return this.#enable\n  }\n  set enable($enable) {\n    if(this.#enable !== $enable) this.#enable = $enable\n  }\n  get active() {\n    if(this.#active !== undefined) return this.#active\n    if(this.#settings.active === undefined) { this.#active = false }\n    return this.#active\n  }\n  set active($active) {\n    if(this.#active !== $active) this.#active = $active\n  }\n  get match() {\n    if(this.#match !== undefined) return this.#match\n    this.#match = match(this.pathname)\n    return this.#match\n  }\n}","export default class RouteEvent extends CustomEvent {\n  #options\n  constructor($type, $options) {\n    super($type, $options)\n    this.#options = $options\n  }\n  get path() { return this.#options.path }\n  get route() { return this.#options.route }\n  get location() { return this.#options.location }\n}","import Core from '../../core/index.js'\nimport { assign as recursiveAssign } from 'recourse'\nimport Route from './route/index.js'\nimport RouteEvent from './routeEvent/index.js'\nimport Settings from './settings/index.js' \nimport Options from './options/index.js' \nexport default class LocationRouter extends Core {\n  #window\n  #hashpath\n  #routes\n  #location\n  #route\n  #enable\n  #regularExpressions = {\n    windowLocationOrigin: new RegExp(`^${this.window.location.origin}`)\n  }\n  constructor($settings, $options) {\n    super(Settings($settings), Options($options))\n    if($options.enableEvents === true) this.enableEvents()\n    this.enable = true\n  }\n  get base() { return this.settings.base }\n  get window() {\n    if(this.#window !== undefined) return this.#window\n    this.#window = window\n    return this.#window\n  }\n  get hashpath() {\n    if(this.#hashpath !== undefined) return this.#hashpath\n    this.#hashpath = (\n      this.settings.hashpath === undefined\n    ) ? false\n      : this.settings.hashpath\n    return this.#hashpath\n  }\n  get routes() {\n    if(this.#routes !== undefined) return this.#routes\n    this.#routes = {}\n    const routeEntries = Object.entries(this.settings.routes)\n    for(const [$routePath, $routeSettings] of routeEntries) {\n      this.setRoute($routePath, $routeSettings)\n    }\n    return this.#routes\n  }\n  get location() { return this.#location }\n  get route() { return this.#route }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    if(this.#enable === $enable) return\n    const boundPopstate = this.#popstate.bind(this)\n    if($enable === true) {\n      this.#window.addEventListener('popstate', boundPopstate)\n    }\n    else if($enable === false) {\n      this.#window.removeEventListener('popstate', boundPopstate)\n    }\n    this.#enable = $enable\n  }\n  #popstate() { this.navigate() }\n  navigate($path, $method) {\n    if(\n      typeof $path === 'string' && \n      ['assign', 'replace'].includes($method)\n    ) {\n      this.window?.location[$method]($path)\n      return this\n    }\n    const base = [this.window.origin, this.base].join('')\n    let matchPath, matchRoute\n    if(this.hashpath) {\n      matchPath = this.window.location.hash.slice(1)\n      matchRoute = this.#matchRoute(matchPath)\n    }\n    else {\n      matchPath = this.window.location.href\n      .replace(new RegExp(`^${this.window.origin}`), '')\n      .replace(new RegExp(`^${this.base}`), '')\n      matchRoute = this.#matchRoute(matchPath)\n    }\n    const { route, location } = matchRoute\n    const routeEventOptions = {\n      route: route,\n      location: location,\n      path: matchPath,\n    }\n    const preterRoute = this.route\n    if(preterRoute) { preterRoute.active = false }\n    if(route && route?.enable) {\n      route.active = true\n      location.state = this.window.history.state\n      location.base = this.base\n      location.pathname = this.window.location.pathname\n      .replace(new RegExp(`^${this.base}`), '')\n      location.hash = this.window.location.hash\n      location.search = this.window.location.search\n      delete location.path\n      this.#route = route\n      this.#location = location\n      this.dispatchEvent(\n        new RouteEvent(\"route\", routeEventOptions)\n      )\n      this.dispatchEvent(\n        new RouteEvent(`route:${route.name}`, routeEventOptions)\n      )\n    }\n    else {\n      this.#route = null\n      this.#location = null\n      this.dispatchEvent(\n        new RouteEvent(\"nonroute\", routeEventOptions)\n      )\n    }\n    return this\n  }\n  // Route Ability\n  enableRoute($path) {\n    const route = this.getRoute($path)\n    route.enable = true\n    return route\n  }\n  disableRoute($path) {\n    const route = this.getRoute($path)\n    route.enable = false\n    return route\n  }\n  // Route Ministration \n  setRoute($routePath, $routeSettings) {\n    const routeSettings = recursiveAssign({\n      pathname: $routeSettings.pathname || $routePath,\n    }, $routeSettings)\n    this.#routes[$routePath] = new Route(routeSettings)\n    return this.#routes[$routePath]\n  }\n  getRoute($routePath) {\n    return this.#routes[$routePath]\n  }\n  deleteRoute($routePath) {\n    delete this.#routes[$routePath]\n    return this.#routes[$routePath]\n  }\n  #matchRoute($path) {\n    const routeEntries = Object.entries(this.routes)\n    let routeEntryIndex = 0\n    let route = null\n    let location = null\n    iterateMatchEntries: \n    while(routeEntryIndex < routeEntries.length) {\n      const [$routePath, $route] = routeEntries[routeEntryIndex]\n      location = $route.match($path) || null\n      if(location) {\n        route = $route\n        break iterateMatchEntries\n      }\n      routeEntryIndex++\n    }\n    return { route, location }\n  }\n}","export default ($settings) => Object.assign({\n  routes: {}\n}, $settings)","export default ($options) => Object.assign({\n  enableEvents: true\n}, $options)","export default class SocketEvent extends CustomEvent {\n  #settings\n  #socket\n  constructor($type, $settings, $socket) {\n    super($type, $settings)\n    this.#settings = $settings\n    this.#socket = $socket\n  }\n  get isBinary() { return this.#settings.isBinary }\n  get message() { return this.#settings.message }\n  get detail() { return this.#settings.detail }\n}","import Settings from './settings/index.js'\nexport default class MessageAdapter extends EventTarget {\n  #settings\n  #messages\n  #message\n  constructor($settings) {\n    super()\n    this.#settings = $settings\n  }\n  get name() { return this.#settings.name }\n  get messages() {\n    if(this.#messages !== undefined) {\n      return this.#messages\n    }\n    if(this.#settings.messages !== undefined) {\n      this.#messages = this.#settings.messages\n    }\n    else {\n      this.#messages = {}\n    }\n    return this.#messages\n  }\n  get message() {\n    if(this.#message !== undefined) {\n      return this.#message\n    }\n    this.#message = this.#settings.message\n    return this.#message\n  }\n}","import SocketEvent from './event/index.js'\nimport Core from '../../core/index.js'\nimport MessageAdapter from './messageAdapter/index.js'\nimport Settings from './settings/index.js'\nimport Options from './options/index.js'\nexport default class SocketRouter extends Core {\n  #webSocket\n  #active = false\n  #messageAdapters\n  #url\n  #boundMessage\n  constructor($settings = {}, $options = {}) {\n    super(Settings($settings), Options($options))\n    this.#boundMessage = this.#message.bind(this)\n    Object.defineProperties(this, {\n      webSocket: {\n        enumerable: true,\n        get() {\n          if(this.#webSocket !== undefined) return this.#webSocket\n          this.#webSocket = new WebSocket(this.url)\n          this.#webSocket.addEventListener('message', this.#boundMessage)\n          return this.#webSocket\n        },\n      }\n    })\n    this.active = this.settings.active\n    if(this.options.enableEvents === true) { this.enableEvents() }\n  }\n  get active() { return this.#active }\n  set active($active) {\n    if(this.#active === $active) { return }\n    if($active === true) {\n      this.webSocket\n    }\n    else if($active === false) {\n      this.#webSocket = undefined\n    }\n    this.#active = $active\n  }\n  get path() { return this.settings.path }\n  get url() {\n    if(this.#url !== undefined) { return this.#url }\n    let { protocol, host, port } = this.settings\n    let base\n    if(protocol && host && port) {\n        base = [protocol, '//', host, ':', port].join('')\n      }\n    else {\n      base = window.location.url.origin\n    }\n    this.#url = new URL(this.path, base)\n    return this.#url\n  }\n  #message($data, $isBinary) {\n    iterateAdapters: \n    for(const $messageAdapter of this.messageAdapters) {\n      try {\n        const message = $messageAdapter.message($data, $isBinary)\n        const { type, detail } = message\n        const messageEvent = new SocketEvent(type, {\n          detail, message: $data, isBinary: $isBinary\n        }, this)\n        this.webSocket.dispatchEvent(messageEvent)\n      }\n      catch($err) {  console.error($err)  }\n    }\n  }\n  get messageAdapters() {\n    if(this.#messageAdapters !== undefined) { return this.#messageAdapters }\n    const messageAdapters = []\n    for(const $adapter of this.settings.messageAdapters) {\n      let adapter\n      if($adapter instanceof MessageAdapter) { adapter = adapter }\n      else { adapter = new MessageAdapter($adapter, this) }\n      messageAdapters.push(adapter)\n    }\n    this.#messageAdapters = messageAdapters\n    return this.#messageAdapters\n  }\n  send() { this.webSocket.send(...arguments) }\n}","export default ($settings) => Object.assign({\n  active: false, // Boolean\n  /*\n  name: String, // \"$name\",\n  protocol: String, // [\"wss:\", \"ws:\"],\n  port: Number, // 3338\n  host: String, // \"demonstrament.mvc-framework\",\n  path: String, // '/',\n  open: function() {},\n  close: function() {},\n  error: function() {},\n  messageAdapters: [\n    // ['MessageAdapter', $MessageAdapter]\n  ],\n  */\n}, $settings)","export default ($options) => Object.assign({\n  events: false,\n  enableEvents: true, // Boolean\n}, $options)","import Core from '../core/index.js'\nimport Settings from './settings/index.js'\nimport Options from './options/index.js'\nimport Model from '../model/index.js'\nimport View from '../view/index.js'\nimport { LocationRouter, FetchRouter, SocketRouter } from '../routers/index.js'\nfunction Instate($target, $property, $value, $definition) {\n  const definition = $definition\n  const parent = $target\n  const path = ($target?.path) ? [\n    $target.path, $definition.name, $property\n  ].join('.') : [$definition.name, $property].join('.')\n  if($value && ValidClasses.includes($value.constructor)) {\n    $value.mount({ path, parent })\n  }\n  else if(Array.isArray($value)) {\n    const { Class } = definition\n    if(Class === Model) {\n      let [properties, schema, options] = $value\n      schema = schema || null\n      options = options || {}\n      Object.assign(options, {\n        definition, parent, path\n      })\n      $value = new Class(properties, schema, options)\n    }\n    else if(ValidClasses.includes(Class)) {\n      if($value.length === 2) {\n        const [settings, options] = $value\n        Object.assign(options, {\n          definition, parent, path\n        })\n        $value = new Class(settings, options)\n      }\n      if($value.length === 1) {\n        const [settings] = $value\n        $value = new Class(settings)\n      }\n    }\n  }\n  return $value\n}\nfunction Deinstate($target, $property, $definition) { return }\nclass Control extends Core {\n  static propertyClasses = [{\n    name: \"models\", targetType: 'Object',\n    administer: \"addModels\", deadminister: \"removeModels\",\n    instate: Instate, deinstate: Deinstate, Class: Model,\n  }, {\n    name: \"views\", targetType: 'Object',\n    administer: \"addViews\", deadminister: \"removeViews\",\n    instate: Instate, deinstate: Deinstate, Class: View,\n  }, {\n    name: \"locationRouters\", targetType: 'Object',\n    administer: \"addLocationRouters\", deadminister: \"removeLocationRouters\",\n    instate: Instate, deinstate: Deinstate, Class: LocationRouter,\n  }, {\n    name: \"fetchRouters\", targetType: 'Object',\n    administer: \"addFetchRouters\", deadminister: \"removeFetchRouters\",\n    instate: Instate, deinstate: Deinstate, Class: FetchRouter,\n  }, {\n    name: \"socketRouters\", targetType: 'Object',\n    administer: \"addSocketRouters\", deadminister: \"removeSocketRouters\",\n    instate: Instate, deinstate: Deinstate, Class: SocketRouter,\n  }, {\n    name: \"controls\", targetType: 'Object',\n    administer: \"addControls\", deadminister: \"removeControls\",\n    instate: Instate, deinstate: Deinstate, Class: Control,\n  }]\n  constructor($settings = {}, $options = {}) {\n    super(\n      Settings(Object.assign({}, $settings)),\n      Options(Object.assign({\n        propertyClasses: Control.propertyClasses,\n      }, $options)),\n    )\n  }\n}\nconst ValidClasses = [Model, View, Control, LocationRouter, FetchRouter, SocketRouter]\nexport default Control","export default ($settings) => {\n  const settings = Object.assign({\n    models: {},\n    views: {},\n    controls: {},\n    fetchRouters: {},\n    locationRouters: {},\n  }, $settings)\n  return settings\n}\n","export default ($options) => {\n  const options = Object.assign({\n    events: false,\n    enableEvents: true,\n  }, $options)\n  return options\n}","const Primitives$2 = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n};\nObject.values(Primitives$2);\nconst Objects$2 = {\n  'object': Object,\n  'array': Array,\n};\nObject.values(Objects$2);\nconst Types$2 = Object.assign({}, Primitives$2, Objects$2);\nObject.values(Types$2);\n[\n Primitives$2.String, Primitives$2.Number, Primitives$2.Boolean, \n Objects$2.Object, Objects$2.Array\n];\n\nvar typeOf$2 = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nconst defaultAccessor$1 = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n};\nvar Accessors = {\n  default: defaultAccessor$1};\n\nconst Options$2$1 = {\n  depth: 0,\n  maxDepth: 10,\n  accessors: [Accessors.default],\n  ancestors: [],\n};\nfunction propertyDirectory($object, $options) {\n  const _propertyDirectory = [];\n  const options = Object.assign({}, Options$2$1, $options, {\n    ancestors: [].concat($options.ancestors)\n  });\n  options.depth++;\n  if(options.depth > options.maxDepth) { return _propertyDirectory }\n  iterateAccessors: \n  for(const $accessor of options.accessors) {\n    const accessor = $accessor.bind($object);\n    const object = accessor($object);\n    if(!object) { continue iterateAccessors }\n    if(!options.ancestors.includes(object)) { options.ancestors.unshift(object); }\n    for(const [$key, $value] of Object.entries(object)) {\n      if(!options.values) { _propertyDirectory.push($key); }\n      else if(options.values) { _propertyDirectory.push([$key, $value]); }\n      if(\n        typeof $value === 'object' &&\n        $value !== null &&\n        !Object.is($value, object) && \n        !options.ancestors.includes($value)\n      ) {\n        const subtargets = propertyDirectory($value, options);\n        if(!options.values) {\n          for(const $subtarget of subtargets) {\n            const path = [$key, $subtarget].join('.');\n            _propertyDirectory.push(path);\n          }\n        }\n        else if(options.values) {\n          for(const [$subtargetKey, $subtarget] of subtargets) {\n            const path = [$key, $subtargetKey].join('.');\n            _propertyDirectory.push([path, $subtarget]);\n          }\n        }\n      }\n    }\n  }\n  return _propertyDirectory\n}\n\nfunction assign$4($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf$2($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf$2($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = assign$4($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nfunction expandEvents($propEvents, $scopeKey = ':scope') {\n  if(\n    Array.isArray($propEvents) ||\n    $propEvents === undefined\n  ) { return $propEvents }\n  const propEvents = [];\n  for(const [\n    $propEventSettings, $propEventListener\n  ] of Object.entries($propEvents)) {\n    const propEventSettings = $propEventSettings.trim().split(' ');\n    let path, type, listener;\n    if(propEventSettings.length === 1) {\n      path = $scopeKey;\n      type = propEventSettings[0];\n    }\n    else if(propEventSettings.length > 1) {\n      path = propEventSettings[0];\n      type = propEventSettings[1];\n    }\n    if(Array.isArray($propEventListener)) {\n      listener = $propEventListener[0];\n      $propEventListener[1];\n    }\n    else {\n      listener = $propEventListener;\n    }\n    const propEvent = {\n      type,\n      path,\n      listener,\n      enable: false,\n    };\n    propEvents.push(propEvent);\n  }\n  return propEvents\n}\n\nconst defaultAccessor = ($target, $property) => {\n  if($property === undefined) { return $target }\n  else { return $target[$property] }\n};\nvar accessors = {\n  default: defaultAccessor};\n\nvar Settings$1 = ($settings = {}) => {\n  const Settings = {\n    events: {},\n    enableEvents: false,\n    propertyDirectory: {\n      accessors: [accessors.default],\n      scopeKey: ':scope', \n      maxDepth: 10,\n    },\n    propertyDefinitions: {\n      getEvents: 'getEvents',\n      addEvents: 'addEvents',\n      removeEvents: 'removeEvents',\n      enableEvents: 'enableEvents',\n      disableEvents: 'disableEvents',\n      reenableEvents: 'reenableEvents',\n      emitEvents: 'emitEvents',\n    },\n  };\n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'propertyDefinitions':\n      case 'propertyDirectory':\n        Settings[$settingKey] = Object.assign(Settings[$settingKey], $settingValue);\n        break\n      default: \n        Settings[$settingKey] = $settingValue;\n        break\n    }\n  }\n  return Settings\n};\n\nfunction handleNoCommaBraces(span) {\n    if (span.length < 3) {\n        return \"{\" + span + \"}\";\n    }\n    var separatorI = -1;\n    for (var i = 2; i < span.length; i++) {\n        if (span[i] === '.' && span[i - 1] === '.' && (i < 2 || span[i - 2] !== '\\\\')) {\n            if (separatorI > -1) {\n                return \"{\" + span + \"}\";\n            }\n            separatorI = i - 1;\n        }\n    }\n    if (separatorI > -1) {\n        var rangeStart = span.substr(0, separatorI);\n        var rangeEnd = span.substr(separatorI + 2);\n        if (rangeStart.length > 0 && rangeEnd.length > 0) {\n            return \"[\" + span.substr(0, separatorI) + \"-\" + span.substr(separatorI + 2) + \"]\";\n        }\n    }\n    return \"{\" + span + \"}\";\n}\nfunction expand(pattern) {\n    if (typeof pattern !== 'string') {\n        throw new TypeError(\"A pattern must be a string, but \" + typeof pattern + \" given\");\n    }\n    var scanning = false;\n    var openingBraces = 0;\n    var closingBraces = 0;\n    var handledUntil = -1;\n    var results = [''];\n    var alternatives = [];\n    var span;\n    for (var i = 0; i < pattern.length; i++) {\n        var char = pattern[i];\n        if (char === '\\\\') {\n            i++;\n            continue;\n        }\n        if (char === '{') {\n            if (scanning) {\n                openingBraces++;\n            }\n            else if (i > handledUntil && !openingBraces) {\n                span = pattern.substring(handledUntil + 1, i);\n                for (var j = 0; j < results.length; j++) {\n                    results[j] += span;\n                }\n                alternatives = [];\n                handledUntil = i;\n                scanning = true;\n                openingBraces++;\n            }\n            else {\n                openingBraces--;\n            }\n        }\n        else if (char === '}') {\n            if (scanning) {\n                closingBraces++;\n            }\n            else if (closingBraces === 1) {\n                span = pattern.substring(handledUntil + 1, i);\n                if (alternatives.length > 0) {\n                    var newResults = [];\n                    alternatives.push(expand(span));\n                    for (var j = 0; j < results.length; j++) {\n                        for (var k = 0; k < alternatives.length; k++) {\n                            for (var l = 0; l < alternatives[k].length; l++) {\n                                newResults.push(results[j] + alternatives[k][l]);\n                            }\n                        }\n                    }\n                    results = newResults;\n                }\n                else {\n                    span = handleNoCommaBraces(span);\n                    for (var j = 0; j < results.length; j++) {\n                        results[j] += span;\n                    }\n                }\n                handledUntil = i;\n                closingBraces--;\n            }\n            else {\n                closingBraces--;\n            }\n        }\n        else if (!scanning && char === ',' && closingBraces - openingBraces === 1) {\n            span = pattern.substring(handledUntil + 1, i);\n            alternatives.push(expand(span));\n            handledUntil = i;\n        }\n        if (scanning && (closingBraces === openingBraces || i === pattern.length - 1)) {\n            scanning = false;\n            i = handledUntil - 1;\n        }\n    }\n    if (handledUntil === -1) {\n        return [pattern];\n    }\n    var unhandledFrom = pattern[handledUntil] === '{' ? handledUntil : handledUntil + 1;\n    if (unhandledFrom < pattern.length) {\n        span = pattern.substr(unhandledFrom);\n        for (var j = 0; j < results.length; j++) {\n            results[j] += span;\n        }\n    }\n    return results;\n}\n\nfunction negate(pattern, options) {\n    var supportNegation = options['!'] !== false;\n    var supportParens = options['()'] !== false;\n    var isNegated = false;\n    var i;\n    if (supportNegation) {\n        for (i = 0; i < pattern.length && pattern[i] === '!'; i++) {\n            if (supportParens && pattern[i + 1] === '(') {\n                i--;\n                break;\n            }\n            isNegated = !isNegated;\n        }\n        if (i > 0) {\n            pattern = pattern.substr(i);\n        }\n    }\n    return { pattern: pattern, isNegated: isNegated };\n}\n\nfunction escapeRegExpChar(char) { if (char === '-' ||\n    char === '^' ||\n    char === '$' ||\n    char === '+' ||\n    char === '.' ||\n    char === '(' ||\n    char === ')' ||\n    char === '|' ||\n    char === '[' ||\n    char === ']' ||\n    char === '{' ||\n    char === '}' ||\n    char === '*' ||\n    char === '?' ||\n    char === '\\\\') {\n    return \"\\\\\" + char;\n}\nelse {\n    return char;\n} }\nfunction escapeRegExpString(str) {\n    var result = '';\n    for (var i = 0; i < str.length; i++) {\n        result += escapeRegExpChar(str[i]);\n    }\n    return result;\n}\n\nfunction Pattern(source, options, excludeDot) {\n    var separator = typeof options.separator === 'undefined' ? true : options.separator;\n    var separatorSplitter = '';\n    var separatorMatcher = '';\n    var wildcard = '.';\n    if (separator === true) {\n        separatorSplitter = '/';\n        separatorMatcher = '[/\\\\\\\\]';\n        wildcard = '[^/\\\\\\\\]';\n    }\n    else if (separator) {\n        separatorSplitter = separator;\n        separatorMatcher = escapeRegExpString(separatorSplitter);\n        if (separatorMatcher.length > 1) {\n            separatorMatcher = \"(?:\" + separatorMatcher + \")\";\n            wildcard = \"((?!\" + separatorMatcher + \").)\";\n        }\n        else {\n            wildcard = \"[^\" + separatorMatcher + \"]\";\n        }\n    }\n    else {\n        wildcard = '.';\n    }\n    var requiredSeparator = separator ? separatorMatcher + \"+?\" : '';\n    var optionalSeparator = separator ? separatorMatcher + \"*?\" : '';\n    var segments = separator ? source.split(separatorSplitter) : [source];\n    var support = {\n        qMark: options['?'] !== false,\n        star: options['*'] !== false,\n        globstar: separator && options['**'] !== false,\n        brackets: options['[]'] !== false,\n        extglobs: options['()'] !== false,\n        excludeDot: excludeDot && options.excludeDot !== false,\n    };\n    return {\n        source: source,\n        segments: segments,\n        options: options,\n        separator: separator,\n        separatorSplitter: separatorSplitter,\n        separatorMatcher: separatorMatcher,\n        optionalSeparator: optionalSeparator,\n        requiredSeparator: requiredSeparator,\n        wildcard: wildcard,\n        support: support,\n    };\n}\nfunction Segment(source, pattern, isFirst, isLast) { return {\n    source: source,\n    isFirst: isFirst,\n    isLast: isLast,\n    end: source.length - 1,\n}; }\nfunction Result() {\nreturn {\n    match: '',\n    unmatch: '',\n    useUnmatch: false,\n}; }\nfunction State(pattern, segment, result) { return {\n    pattern: pattern,\n    segment: segment,\n    result: result,\n    openingBracket: segment.end + 1,\n    closingBracket: -1,\n    openingParens: 0,\n    closingParens: 0,\n    parensHandledUntil: -1,\n    extglobModifiers: [],\n    scanningForParens: false,\n    escapeChar: false,\n    addToMatch: true,\n    addToUnmatch: pattern.support.extglobs,\n    dotHandled: false,\n    i: -1,\n    char: '',\n    nextChar: '',\n}; }\n\nvar EXCLUDE_DOT_PATTERN = '(?!\\\\.)';\nfunction add(state, addition, excludeDot) {\n    if (state.addToUnmatch) {\n        state.result.unmatch += addition;\n    }\n    if (state.addToMatch) {\n        if (excludeDot && !state.dotHandled) {\n            addition = EXCLUDE_DOT_PATTERN + addition;\n        }\n        state.dotHandled = true;\n        state.result.match += addition;\n    }\n    return state.result;\n}\nfunction convertSegment(pattern, segment, result) {\n    var support = pattern.support;\n    var state = State(pattern, segment, result);\n    var separatorMatcher = segment.isLast\n        ? pattern.optionalSeparator\n        : pattern.requiredSeparator;\n    if (!support.excludeDot) {\n        state.dotHandled = true;\n    }\n    if (segment.end === -1) {\n        return segment.isLast && !segment.isFirst ? result : add(state, separatorMatcher);\n    }\n    if (support.globstar && segment.source === '**') {\n        var prefix = !state.dotHandled ? EXCLUDE_DOT_PATTERN : '';\n        var globstarSegment = prefix + pattern.wildcard + \"*?\" + separatorMatcher;\n        return add(state, \"(?:\" + globstarSegment + \")*?\");\n    }\n    while (++state.i <= segment.end) {\n        state.char = state.segment.source[state.i];\n        state.nextChar = state.i < segment.end ? segment.source[state.i + 1] : '';\n        if (state.char === '\\\\') {\n            if (state.i < state.segment.end) {\n                state.escapeChar = true;\n                continue;\n            }\n            else {\n                state.char = '';\n            }\n        }\n        var pattern = state.pattern, segment = state.segment, char = state.char, i = state.i;\n        if (pattern.support.brackets && !state.scanningForParens) {\n            if (i > state.openingBracket && i <= state.closingBracket) {\n                if (state.escapeChar) {\n                    add(state, escapeRegExpChar(char));\n                }\n                else if (i === state.closingBracket) {\n                    add(state, ']');\n                    state.openingBracket = segment.source.length;\n                }\n                else if (char === '-' && i === state.closingBracket - 1) {\n                    add(state, '\\\\-');\n                }\n                else if (char === '!' && i === state.openingBracket + 1) {\n                    add(state, '^');\n                }\n                else if (char === ']') {\n                    add(state, '\\\\]');\n                }\n                else {\n                    add(state, char);\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (i > state.openingBracket) {\n                if (char === ']' &&\n                    !state.escapeChar &&\n                    i > state.openingBracket + 1 &&\n                    i > state.closingBracket) {\n                    state.closingBracket = i;\n                    state.i = state.openingBracket;\n                    if (pattern.separator) {\n                        add(state, \"(?!\" + pattern.separatorMatcher + \")[\", true);\n                    }\n                    else {\n                        add(state, '[', true);\n                    }\n                }\n                else if (i === segment.end) {\n                    add(state, '\\\\[');\n                    state.i = state.openingBracket;\n                    state.openingBracket = segment.source.length;\n                    state.closingBracket = segment.source.length;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n            if (char === '[' &&\n                !state.escapeChar &&\n                i > state.closingBracket &&\n                i < segment.end) {\n                state.openingBracket = i;\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        if (state.pattern.support.extglobs) {\n            var extglobModifiers = state.extglobModifiers, char = state.char, nextChar = state.nextChar, i = state.i;\n            if (nextChar === '(' &&\n                !state.escapeChar &&\n                (char === '@' || char === '?' || char === '*' || char === '+' || char === '!')) {\n                if (state.scanningForParens) {\n                    state.openingParens++;\n                }\n                else if (i > state.parensHandledUntil && !state.closingParens) {\n                    state.parensHandledUntil = i;\n                    state.scanningForParens = true;\n                    state.openingParens++;\n                }\n                else if (state.closingParens >= state.openingParens) {\n                    if (char === '!') {\n                        state.addToMatch = true;\n                        state.addToUnmatch = false;\n                        add(state, state.pattern.wildcard + \"*?\", true);\n                        state.addToMatch = false;\n                        state.addToUnmatch = true;\n                        state.result.useUnmatch = true;\n                    }\n                    extglobModifiers.push(char);\n                    add(state, '(?:', true);\n                    state.openingParens--;\n                    state.i++;\n                    continue;\n                }\n                else {\n                    state.openingParens--;\n                }\n            }\n            else if (char === ')' && !state.escapeChar) {\n                if (state.scanningForParens) {\n                    state.closingParens++;\n                }\n                else if (extglobModifiers.length) {\n                    var modifier_1 = extglobModifiers.pop();\n                    if (modifier_1 === '!' && extglobModifiers.indexOf('!') !== -1) {\n                        throw new Error(\"Nested negated extglobs aren't supported\");\n                    }\n                    modifier_1 = modifier_1 === '!' || modifier_1 === '@' ? '' : modifier_1;\n                    add(state, \")\" + modifier_1);\n                    state.addToMatch = true;\n                    state.addToUnmatch = true;\n                    state.closingParens--;\n                    continue;\n                }\n            }\n            else if (char === '|' && state.closingParens &&\n                !state.scanningForParens &&\n                !state.escapeChar) {\n                add(state, '|');\n                continue;\n            }\n            if (state.scanningForParens) {\n                if (state.closingParens === state.openingParens || i === state.segment.end) {\n                    state.scanningForParens = false;\n                    state.i = state.parensHandledUntil - 1;\n                }\n                state.escapeChar = false;\n                continue;\n            }\n        }\n        var pattern = state.pattern;\n        var support = pattern.support;\n        if (!state.escapeChar && support.star && state.char === '*') {\n            if (state.i === state.segment.end || state.nextChar !== '*') {\n                add(state, pattern.wildcard + \"*?\", true);\n            }\n        }\n        else if (!state.escapeChar && support.qMark && state.char === '?') {\n            add(state, pattern.wildcard, true);\n        }\n        else {\n            add(state, escapeRegExpChar(state.char));\n        }\n        state.escapeChar = false;\n    }\n    return add(state, separatorMatcher);\n}\nfunction convert(source, options, excludeDot) {\n    var pattern = Pattern(source, options, excludeDot);\n    var result = Result();\n    var segments = pattern.segments;\n    for (var i = 0; i < segments.length; i++) {\n        var segment = Segment(segments[i], pattern, i === 0, i === segments.length - 1);\n        convertSegment(pattern, segment, result);\n    }\n    if (result.useUnmatch) {\n        return \"(?!^\" + result.unmatch + \"$)\" + result.match;\n    }\n    else {\n        return result.match;\n    }\n}\n\nfunction flatMap(array, predicate) {\n    var results = [];\n    for (var i = 0; i < array.length; i++) {\n        var mappedValue = predicate(array[i]);\n        for (var j = 0; j < mappedValue.length; j++) {\n            results.push(mappedValue[j]);\n        }\n    }\n    return results;\n}\nfunction compile(patterns, options) {\n    patterns = Array.isArray(patterns) ? patterns : [patterns];\n    if (options['{}'] !== false) {\n        patterns = flatMap(patterns, expand);\n    }\n    var positiveResults = [];\n    var negativeResults = [];\n    var result = '';\n    for (var i = 0; i < patterns.length; i++) {\n        var negatedPattern = negate(patterns[i], options);\n        var convertedPattern = convert(negatedPattern.pattern, options, !negatedPattern.isNegated);\n        if (negatedPattern.isNegated) {\n            negativeResults.push(convertedPattern);\n        }\n        else {\n            positiveResults.push(convertedPattern);\n        }\n    }\n    if (negativeResults.length) {\n        result = \"(?!(?:\" + negativeResults.join('|') + \")$)\";\n    }\n    if (positiveResults.length > 1) {\n        result += \"(?:\" + positiveResults.join('|') + \")\";\n    }\n    else if (positiveResults.length === 1) {\n        result += positiveResults[0];\n    }\n    else if (result.length) {\n        result += convert('**', options, true);\n    }\n    return \"^\" + result + \"$\";\n}\nfunction isMatch(regexp, sample) { if (typeof sample !== 'string') {\n    throw new TypeError(\"Sample must be a string, but \" + typeof sample + \" given\");\n} return regexp.test(sample); }\n/**\n * Compiles one or more glob patterns into a RegExp and returns an isMatch function.\n * The isMatch function takes a sample string as its only argument and returns true\n * if the string matches the pattern(s).\n *\n * ```js\n * outmatch('src/*.js')('src/index.js') //=> true\n * ```\n *\n * ```js\n * const isMatch = outmatch('*.example.com', '.')\n * isMatch('foo.example.com') //=> true\n * isMatch('foo.bar.com') //=> false\n * ```\n */\nfunction outmatch(pattern, options) {\n    if (typeof pattern !== 'string' && !Array.isArray(pattern)) {\n        throw new TypeError(\"The first argument must be a single pattern string or an array of patterns, but \" + typeof pattern + \" given\");\n    }\n    if (typeof options === 'string' || typeof options === 'boolean') {\n        options = { separator: options };\n    }\n    if (arguments.length === 2 &&\n        !(typeof options === 'undefined' ||\n            (typeof options === 'object' && options !== null && !Array.isArray(options)))) {\n        throw new TypeError(\"The second argument must be an options object or a string/boolean separator, but \" + typeof options + \" given\");\n    }\n    options = options || {};\n    if (options.separator === '\\\\') {\n        throw new Error('\\\\ is not a valid separator');\n    }\n    var regexpPattern = compile(pattern, options);\n    var regexp = new RegExp(regexpPattern, options.flags);\n    var fn = isMatch.bind(null, regexp);\n    fn.options = options;\n    fn.pattern = pattern;\n    fn.regexp = regexp;\n    return fn;\n}\n\nvar Settings = ($settings = {}) => {\n  const Settings = {\n    enable: false,\n    assign: 'addEventListener', deassign: 'removeEventListener', transsign: 'dispatchEvent',\n    bindListener: true,\n    errorLog: false,\n    methods: {\n      assign: {\n        addEventListener: function addEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition;\n          const { options, useCapture } = settings;\n          return $target['addEventListener'](type, listener, options || useCapture)\n        },\n        on: function on($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['on'](type, listener)\n        },\n        once: function once($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['once'](type, listener)\n        },\n      }, \n      deassign: {\n        removeEventListener: function removeEventListener($eventDefinition, $target) {\n          const { type, listener, settings } = $eventDefinition;\n          const { options, useCapture } = settings;\n          return $target['removeEventListener'](type, listener, options || useCapture)\n        },\n        off: function off($eventDefinition, $target) {\n          const { type, listener } = $eventDefinition;\n          return $target['off'](type, listener)\n        },\n      },\n      transsign: {\n        dispatchEvent: function dispatchEvent($eventDefinition, $target, $event) {\n          return $target['dispatchEvent']($event)\n        },\n        emit: function emit($eventDefinition, $target, $type, ...$arguments) {\n          return $target['emit']($type, ...$arguments)\n        },\n      },\n    },\n  };\n  for(const [$settingKey, $settingValue] of Object.entries($settings)) {\n    switch($settingKey) {\n      case 'methods': \n        Settings[$settingKey] = assign$4(Settings[$settingKey], $settingValue);\n        break\n      case 'enableEvents': break\n      default: \n        Settings[$settingKey] = $settingValue;\n        break\n    }\n  }\n  return Settings\n};\n\nclass EventDefinition {\n  #context\n  #enable = false\n  #nontranssigned = []\n  #_targets = []\n  #_assign\n  #_deassign\n  #_transsign\n  constructor($settings, $context) { \n    if(!$settings || !$context) { return this }\n    const settings = Settings($settings);\n    const assigned = [];\n    const deassigned = [];\n    const transsigned = [];\n    Object.defineProperties(this, {\n      'settings': { value: settings },\n      'path': { value: settings.path },\n      'type': { value: settings.type },\n      'assigned': { value: assigned },\n      'deassigned': { value: deassigned },\n      'transsigned': { value: transsigned },\n      'listener':  { configurable: true, get() {\n        const typeOfListener = typeOf$2(settings.listener);\n        let listener; \n        if(typeOfListener === 'string') {\n          let listenerTarget = $context;\n          iterateListenerPathKeys: \n          for(const $pathKey of settings.listener.split('.')) {\n            const value = listenerTarget[$pathKey];\n            if(value !== undefined) { listenerTarget = listenerTarget[$pathKey]; }\n            else { break iterateListenerPathKeys }\n          }\n          if(typeOf$2(listenerTarget) === 'function') {\n            listener = listenerTarget;\n          }\n        }\n        else { listener = settings.listener; }\n        if(settings.bindListener === true) {\n          listener = listener.bind(this.#context);\n        }\n        Object.defineProperty(this, 'listener', { value: listener });\n        return listener\n      } }\n    });\n    this.#context = $context;\n    this.enable = this.settings.enable;\n  }\n  get enable() { return this.#enable }\n  set enable($enable) {\n    const targets = this.#targets;\n    const assigned = this.assigned;\n    const deassigned = this.deassigned;\n    assigned.length = 0;\n    deassigned.length = 0;\n    iterateTargetElements: \n    for(const $targetElement of targets) {\n      const { path, target, enable } = $targetElement;\n      this.settings;\n      if(enable === $enable) { continue iterateTargetElements }\n      if($enable === true) {\n        try {\n          this.#assign(target);\n          $targetElement.enable = $enable;\n          assigned.push($targetElement);\n          \n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err); } }\n      }\n      else if($enable === false) {\n        try {\n          this.#deassign(target);\n          $targetElement.enable = $enable;\n          deassigned.push($targetElement);\n        }\n        catch($err) { if(this.settings.errorLog) { console.error($err); } }\n      }\n    }\n    this.#enable = $enable;\n  }\n  get #target() { return this.settings.target }\n  get #targets() {\n    const pretargets = this.#_targets;\n    const targets = [];\n    if(this.#target) {\n      for(const $target of [].concat(this.#target)) {\n        const pretargetElement = pretargets.find(\n          ($pretarget) => $pretarget?.path === this.path\n        );\n        if(pretargetElement !== undefined) {\n          targets.push(pretargetElement);\n        }\n        else if(pretargetElement === undefined) {ptargets.push({\n            path: this.path,\n            target: $target,\n            enable: false,\n          });\n        }\n      }\n    }\n    else if(typeOf$2(this.path) === 'string') {\n      const targetPaths = [];\n      if(this.path === this.#scopeKey) {\n        const targetElement = {\n          path: this.path,\n          target: this.#context,\n          enable: false,\n        };\n        targets.push(targetElement);\n      }\n      else {\n        if(this.settings.propertyDirectory) {\n          const propertyDirectory = this.#propertyDirectory;\n          const propertyPathMatcher = outmatch(this.path, {\n            separator: '.',\n          });\n          for(const [$propertyPath, $propertyValue] of propertyDirectory) {\n            const propertyPathMatch = propertyPathMatcher($propertyPath);\n            if(propertyPathMatch === true) { targetPaths.push([$propertyPath, $propertyValue]); }\n          }\n          if(this.path.charAt(0) === '*') {\n            targetPaths.unshift([this.#scopeKey, this.#context]);\n          }\n        }\n        else {\n          targetPaths.push(this.path);\n        }\n        for(const [$targetPath, $targetValue] of targetPaths) {\n          const pretargetElement = pretargets.find(\n            ($pretarget) => $pretarget.path === $targetPath\n          );\n          let target = $targetValue;\n          let targetElement;\n          if(target !== undefined) {\n            if(target === pretargetElement?.target) {\n              targetElement = pretargetElement;\n            }\n            else if(typeof target === 'object') {\n              targetElement = {\n                path: $targetPath,\n                target: target,\n                enable: false,\n              };\n            }\n          }\n          if(targetElement !== undefined) { targets.push(targetElement); }\n        }\n      }\n    }\n    this.#_targets = targets;\n    return this.#_targets\n  }\n  get #scopeKey() { return this.settings.propertyDirectory.scopeKey }\n  get #assign() {\n    if(this.#_assign !== undefined) { return this.#_assign }\n    this.#_assign = this.settings.methods.assign[this.settings.assign].bind(null, this);\n    return this.#_assign\n  }\n  get #deassign() {\n    if(this.#_deassign !== undefined) { return this.#_deassign }\n    this.#_deassign = this.settings.methods.deassign[this.settings.deassign].bind(null, this);\n    return this.#_deassign\n  }\n  get #transsign() {\n    if(this.#_transsign !== undefined) { return this.#_transsign }\n    this.#_transsign = this.settings.methods.transsign[this.settings.transsign].bind(null, this);\n    return this.#_transsign\n  }\n  get #propertyDirectory() {\n    if(!this.settings.propertyDirectory) { return null }\n    const propertyDirectorySettings = Object.assign(this.settings.propertyDirectory, { values: true });\n    return propertyDirectory(this.#context, propertyDirectorySettings)\n  }\n  emit() {\n    const targets = this.#targets;\n    const transsigned = this.transsigned;\n    const nontranssigned = this.#nontranssigned;\n    transsigned.length = 0;\n    nontranssigned.length = 0;\n    for(const $targetElement of targets) {\n      const { target } = $targetElement;\n      try {\n        this.#transsign(target, ...arguments);\n        transsigned.push($targetElement);\n      }\n      catch($err) { nontranssigned.push($targetElement); }\n    }\n    return this\n  }\n}\n\nclass Core extends EventTarget {\n  static implement = function ($target, $settings) {\n    if(!$target || !$settings) { return undefined }\n    const settings = Settings$1($settings);\n    const events = [];\n    Object.defineProperties($target, {\n      [settings.propertyDefinitions.getEvents]: {\n        enumerable: false, writable: false, \n        value: function getEvents() {\n          if(!arguments[0]) { return events }\n          const getEvents = [];\n          const $filterEvents = [].concat(arguments[0]);\n          for(const $filterEvent of $filterEvents) {\n            for(const $event of events) {\n              let match;\n              iterateEventFilterProperties: \n              for(const [\n                $filterEventPropertyKey, $filterEventPropertyValue\n              ] of Object.entries($filterEvent)) {\n                let eventFilterMatch;\n                if($filterEventPropertyKey === 'listener') {\n                  eventFilterMatch = (\n                    $event.settings[$filterEventPropertyKey] === $filterEventPropertyValue\n                  );\n                }\n                else {\n                  eventFilterMatch = (\n                    $event[$filterEventPropertyKey] === $filterEventPropertyValue\n                  );\n                }\n                if(match !== false) { match = eventFilterMatch; }\n                else { break iterateEventFilterProperties }\n              }\n              if(match === true) { getEvents.push($event); }\n            }\n          }\n          return getEvents\n        }\n      },\n      [settings.propertyDefinitions.addEvents]: {\n        enumerable: false, writable: false, \n        value: function addEvents() {\n          if(!arguments.length) { return $target }\n          let $addEvents = expandEvents(arguments[0], settings.propertyDirectory.scopeKey);\n          let $enableEvents = arguments[1] || false;\n          for(let $addEvent of $addEvents) {\n            const event = {};\n            for(const $settingKey of [\n              'assign', 'deassign', 'transsign', 'propertyDirectory', 'bindListener'\n            ]) {\n              const settingValue = settings[$settingKey];\n              if(settingValue !== undefined) { event[$settingKey] = settingValue; }\n            }\n            assign$4(event, $addEvent);\n            const eventDefinition = new EventDefinition(event, $target);\n            if($enableEvents) { eventDefinition.enable = true; }\n            events.push(eventDefinition);\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.removeEvents]: {\n        enumerable: false, writable: false, \n        value: function removeEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          let eventsIndex = events.length - 1;\n          while(eventsIndex > -1) {\n            const event = events[eventsIndex];\n            if($events.includes(event)) {\n              event.enable = false;\n              events.splice(eventsIndex, 1);\n            }\n            eventsIndex--;\n          }\n          return $target\n        }\n      },\n      [settings.propertyDefinitions.enableEvents]: {\n        enumerable: false, writable: false, \n        value: function enableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          for(const $event of $events) { $event.enable = true; }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.disableEvents]: {\n        enumerable: false, writable: false, \n        value: function disableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          if($events.length === 0) return $target\n          for(const $event of $events) { $event.enable = false; }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.reenableEvents]: {\n        enumerable: false, writable: false, \n        value: function reenableEvents() {\n          const $events = $target[settings.propertyDefinitions.getEvents](arguments[0]);\n          for(const $event of $events) {\n            $event.enable = false;\n            $event.enable = true;\n          }\n          return $target\n        },\n      },\n      [settings.propertyDefinitions.emitEvents]: {\n        enumerable: false, writable: false, \n        value: function emitEvents($filterEvents, ...$eventParameters) {\n          const $events = $target[settings.propertyDefinitions.getEvents]($filterEvents);\n          for(const $event of $events) {\n            $event.emit(...$eventParameters);\n          }\n          return $target\n        },\n      },\n    });\n    if(settings.events) { $target[settings.propertyDefinitions.addEvents](settings.events); }\n    if(settings.enableEvents === true) { $target[settings.propertyDefinitions.enableEvents](); }\n    return $target\n  }\n  constructor($settings = {}) {\n    super();\n    return Core.implement(this, $settings)\n  }\n}\n\nconst Primitives$1 = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n};\nconst PrimitiveKeys = Object.keys(Primitives$1);\nconst PrimitiveValues = Object.values(Primitives$1);\nconst Objects$1 = {\n  'object': Object,\n  'array': Array,\n};\nconst ObjectKeys$1 = Object.keys(Objects$1);\nconst ObjectValues = Object.values(Objects$1);\nconst Types$1 = Object.assign({}, Primitives$1, Objects$1);\nconst TypeKeys$1 = Object.keys(Types$1);\nconst TypeValues = Object.values(Types$1);\nconst TypeMethods = [\n Primitives$1.String, Primitives$1.Number, Primitives$1.Boolean, \n Objects$1.Object, Objects$1.Array\n];\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ObjectKeys: ObjectKeys$1,\n  ObjectValues: ObjectValues,\n  Objects: Objects$1,\n  PrimitiveKeys: PrimitiveKeys,\n  PrimitiveValues: PrimitiveValues,\n  Primitives: Primitives$1,\n  TypeKeys: TypeKeys$1,\n  TypeMethods: TypeMethods,\n  TypeValues: TypeValues,\n  Types: Types$1\n});\n\nvar typeOf$1 = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nfunction typedObjectLiteral$1($value) {\n  let _typedObjectLiteral;\n  const typeOfValue = typeOf$1($value);\n  if(typeOfValue === 'string') {\n    const value = $value.toLowerCase();\n    if(value === 'object') { _typedObjectLiteral = {}; }\n    else if(value === 'array') { _typedObjectLiteral = []; }\n  }\n  else  {\n    if(typeOfValue === 'object') { _typedObjectLiteral = {}; }\n    else if(typeOfValue === 'array') { _typedObjectLiteral = []; }\n  }\n  return _typedObjectLiteral\n}\n\nvar regularExpressions = {\n  quotationEscape: /\\.(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,\n};\n\nfunction get($path, $source) {\n  const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n  const key = subpaths.pop();\n  let subtarget = $source;\n  for(const $subpath of subpaths) { subtarget = subtarget[$subpath]; }\n  return subtarget[key]\n}\n\nfunction impandTree($source, $property) {\n  const typeOfProperty = typeOf$1($property);\n  const typeOfSource = typeOf$1($source);\n  if(\n    !['string', 'function'].includes(typeOfProperty) ||\n    !['array', 'object'].includes(typeOfSource)\n  ) { return $source }\n  let target = typedObjectLiteral$1($source);\n  for(const [$sourceKey, $sourceValue] of Object.entries($source)) {\n    if(typeOfProperty === 'string') { target[$sourceKey] = get($property, $sourceValue); }\n    else if(typeOfProperty === 'function') { target[$sourceKey] = $property($sourceValue); }\n    if(target[$sourceKey] && typeof target[$sourceKey] === 'object') {\n      target[$sourceKey] = impandTree(target[$sourceKey], $property);\n    }\n  }\n  return target\n}\n\nfunction assign$3($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf$1($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf$1($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = assign$3($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nconst Primitives = {\n  'string': String, \n  'number': Number, \n  'boolean': Boolean, \n  'bigint': BigInt,\n  'undefined': undefined,\n  'null': null,\n};\nObject.values(Primitives);\nconst Objects = {\n  'object': Object,\n  'array': Array,\n};\nObject.values(Objects);\nconst Types = Object.assign({}, Primitives, Objects);\nObject.values(Types);\n[\n Primitives.String, Primitives.Number, Primitives.Boolean, \n Objects.Object, Objects.Array\n];\n\nvar typeOf = ($data) => Object\n  .prototype\n  .toString\n  .call($data).slice(8, -1).toLowerCase();\n\nfunction typedObjectLiteral($value) {\n  let _typedObjectLiteral;\n  const typeOfValue = typeOf($value);\n  if(typeOfValue === 'string') {\n    const value = $value.toLowerCase();\n    if(value === 'object') { _typedObjectLiteral = {}; }\n    else if(value === 'array') { _typedObjectLiteral = []; }\n  }\n  else  {\n    if(typeOfValue === 'object') { _typedObjectLiteral = {}; }\n    else if(typeOfValue === 'array') { _typedObjectLiteral = []; }\n  }\n  return _typedObjectLiteral\n}\n\nvar isArrayLike = ($source) => {\n  let isArrayLike;\n  const typeOfSource = typeOf($source);\n  if(typeOfSource === 'array') { isArrayLike = true; }\n  else if(\n    typeOfSource === 'object' &&\n    Number.isInteger($source.length) && $source.length >= 0\n  ) {\n    iterateSourceKeys: \n    for(const $sourceKey of Object.keys(\n      Object.getOwnPropertyDescriptors($source)\n    )) {\n      if($sourceKey === 'length') { continue iterateSourceKeys }\n      isArrayLike = !isNaN($sourceKey);\n      if(!isArrayLike) { break iterateSourceKeys }\n    }\n  }\n  else { isArrayLike = false; }\n  return isArrayLike\n};\n\nfunction assign$2($target, ...$sources) {\n  if(!$target) { return $target}\n  iterateSources: \n  for(const $source of $sources) {\n    if(!$source) continue iterateSources\n    for(const [\n      $sourcePropertyKey, $sourcePropertyValue\n    ] of Object.entries($source)) {\n      const typeOfTargetPropertyValue = typeOf($target[$sourcePropertyKey]);\n      const typeOfSourcePropertyValue = typeOf($sourcePropertyValue);\n      if(\n        typeOfTargetPropertyValue === 'object' &&\n        typeOfSourcePropertyValue === 'object'\n      ) {\n        $target[$sourcePropertyKey] = assign$2($target[$sourcePropertyKey], $sourcePropertyValue);\n      }\n      else {\n        $target[$sourcePropertyKey] = $sourcePropertyValue;\n      }\n    }\n  }\n  return $target\n}\n\nvar Options$1$1 = {\n  ancestors: [],\n  delimiter: '.',\n  depth: 0,\n  frozen: false,\n  maxDepth: 10,\n  nonenumerable: true,\n  path: false,\n  sealed: false,\n  type: false,\n};\n\nfunction getOwnPropertyDescriptor($properties, $propertyKey, $options) {\n  const options = Object.assign({}, Options$1$1, $options, {\n    ancestors: Object.assign([], $options.ancestors)\n  });\n  const propertyDescriptor = Object.getOwnPropertyDescriptor($properties, $propertyKey);\n  if(!options.nonenumerable && !propertyDescriptor.enumerable) { return }\n  if(!options.ancestors.includes($properties)) { options.ancestors.unshift($properties); }\n  if(options.ancestors.includes(propertyDescriptor.value)) { return }\n  if(options.path) {\n    options.path = (typeOf(options.path) === 'string') ? [options.path, $propertyKey].join(options.delimiter) : $propertyKey;\n    propertyDescriptor.path = options.path;\n  }\n  if(options.type) { propertyDescriptor.type = typeOf(propertyDescriptor.value); }\n  if(options.frozen) { propertyDescriptor.frozen = Object.isFrozen(propertyDescriptor.value); }\n  if(options.sealed) { propertyDescriptor.sealed = Object.isSealed(propertyDescriptor.value); }\n  if(['array', 'object'].includes(typeOf(propertyDescriptor.value))) {\n    propertyDescriptor.value = getOwnPropertyDescriptors(propertyDescriptor.value, options);\n  }\n  return propertyDescriptor\n}\n\nfunction getOwnPropertyDescriptors($properties, $options) {\n  const propertyDescriptors = {};\n  const options = Object.assign({}, Options$1$1, $options);\n  if(options.depth >= options.maxDepth) { return propertyDescriptors }\n  else { options.depth++; }\n  for(const [$propertyKey, $propertyDescriptor] of Object.entries(Object.getOwnPropertyDescriptors($properties))) {\n    const propertyDescriptor = getOwnPropertyDescriptor($properties, $propertyKey, options);\n    if(propertyDescriptor !== undefined) { propertyDescriptors[$propertyKey] = propertyDescriptor; }\n  }\n  return propertyDescriptors\n}\n\nvar Options$2 = {\n  typeCoercion: false,\n};\n\nfunction defineProperty$1($target, $propertyKey, $propertyDescriptor, $options) {\n  const propertyDescriptor = Object.assign({}, $propertyDescriptor);\n  const options = Object.assign({}, Options$2, $options);\n  const typeOfPropertyValue = typeOf(propertyDescriptor.value);\n  if(['array', 'object'].includes(typeOfPropertyValue)) {\n    const propertyValue = isArrayLike(Object.defineProperties(\n      typedObjectLiteral(typeOfPropertyValue), propertyDescriptor.value\n    )) ? [] : {};\n    propertyDescriptor.value = defineProperties$1(propertyValue, propertyDescriptor.value, options);\n  }\n  else if(\n    options.typeCoercion && \n    Object.getOwnPropertyDescriptor(propertyDescriptor, 'type') !== undefined &&\n    !['undefined', 'null'].includes(typeOfPropertyValue)\n  ) {\n    propertyDescriptor.value = Primitives[propertyDescriptor.type](propertyDescriptor.value);\n  }\n  Object.defineProperty($target, $propertyKey, propertyDescriptor);\n  if($propertyDescriptor.sealed) { Object.seal($target[$propertyKey]); }\n  if($propertyDescriptor.frozen) { Object.freeze($target[$propertyKey]); }\n  return $target\n}\n\nfunction defineProperties$1($target, $propertyDescriptors, $options) {\n  const options = Object.assign({}, Options$2, $options);\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of Object.entries($propertyDescriptors)) {\n    defineProperty$1($target, $propertyKey, $propertyDescriptor, options);\n  }\n  return $target\n}\n\nvar Options$1$2 = ($options) => assign$2({\n  basename: '',\n  propertyDescriptors: false,\n  defineProperties: {\n    typeCoercion: true,\n  },\n  replacers: [function replacer($key, $value) {\n    if(typeOf($value) === 'bigint') { return String($value) }\n    else { return $value }\n  }],\n  revivers: [function reviver($key, $value) { return $value }],\n}, $options);\n\nfunction JSONMiddlewares($middlewares, $key, $value) {\n  let value = $value;\n  for(const $middleware of $middlewares) {\n    value = $middleware($key, $value);\n  }\n  return value\n}\nclass LocalStorageRoute extends EventTarget {\n  constructor($path, $options) {\n    super();\n    if(!$path) return null\n    const options = Options$1$2($options);\n    const db = localStorage;\n    Object.defineProperties(this, {\n      'path': { value: $path },\n      'raw': { value: function raw() { return db.getItem(this.path) } },\n      'get': { value: function get() {\n        let model = db.getItem(this.path);\n        if(['undefined', undefined].includes(model)) { return }\n        const modelParsement = JSON.parse(model, JSONMiddlewares.bind(null, options.revivers));\n        if(model) {\n          const modelTypedObjectLiteral = typedObjectLiteral(modelParsement);\n          if(options.propertyDescriptors) {\n            model = defineProperties$1(modelTypedObjectLiteral, modelParsement, options.defineProperties);\n          }\n          else {\n            model = modelParsement;\n          }\n        }\n        return model\n      } },\n      'set': { value: function set($data) {\n        if(options.propertyDescriptors) {\n          return db.setItem(this.path, JSON.stringify(\n            getOwnPropertyDescriptors($data, options.propertyDescriptors), JSONMiddlewares.bind(null, options.replacers)\n          ))\n        }\n        else {\n          return db.setItem(this.path, JSON.stringify($data, JSONMiddlewares.bind(null, options.replacers)))\n        }\n      } },\n      'remove': { value: function remove() { return db.removeItem(this.path) } },\n    });\n  }\n}\n\nclass Verification extends EventTarget {\n  constructor($settings) {\n    super();\n    const settings = Object.assign({}, $settings);\n    Object.defineProperties(this, {\n      'type': { value: settings.type },\n      'key': { value: settings.key },\n      'value': { value: settings.value },\n      'message': { configurable: true, get() {\n        let message;\n        if(this.pass !== undefined) {\n          message = settings.messages[String(this.pass)](this);\n          Object.defineProperty(this, 'message', { value: message });\n        }\n        return message\n      } },\n      'pass': { writable: true, \n        set pass($pass) {\n          Object.defineProperty(this, 'pass', { value: $pass });\n        },\n      },\n    });\n  }\n}\n\nconst Messages$1 = {\n  'true': ($validation) => `${$validation.valid}`,\n  'false': ($validation) => `${$validation.valid}`,\n};\nfunction report($format = \"expand\", $prevalidation) {\n  const prevalidation = $prevalidation || this;\n  const schema = prevalidation.schema;\n  const validations = [].concat(\n    prevalidation.advance, prevalidation.deadvance, prevalidation.unadvance\n  );\n  if($format === \"expand\") {\n    const _report = typedObjectLiteral$1(schema.type);\n    for(const $validation of validations) {\n      const verifications = [].concat(\n        $validation.advance, $validation.deadvance, $validation.unadvance\n      );\n      _report[$validation.key] = {};\n      for(const $verification of verifications) {\n        _report[$validation.key][$verification.type] = {};\n        if($verification.validation) {\n          _report[$validation.key][$verification.type] = this.report($format, $verification.validation);\n        }\n        else {\n          _report[$validation.key][$verification.type] = $verification;\n        }\n      }\n    }\n    return _report\n  }\n  if($format === \"impand\") {\n    if(prevalidation.valid === false) { return false }\n    const _report = typedObjectLiteral$1(schema.type);\n    for(const $validation of validations) {\n      const verifications = [].concat(\n        $validation.advance, $validation.deadvance, $validation.unadvance\n      );\n      let reportValue;\n      iterateVerifications: \n      for(const $verification of verifications) {\n        if($verification.type === 'type') {\n          if($verification.validation && $validation.valid) {\n            reportValue = this.report($format, $verification.validation);\n          }\n          break iterateVerifications\n        }\n      }\n      if(!reportValue) { reportValue = $validation.valid; }\n      _report[$validation.key] = reportValue;\n    }\n    return _report\n  }\n}\nclass Validation extends EventTarget {\n  constructor($settings = {}, $schema) {\n    super();\n    const settings = Object.assign({ messages: Messages$1 }, $settings);\n    let valid;\n    const advance = [];\n    const deadvance = [];\n    const unadvance = [];\n    Object.defineProperties(this, {\n      'schema': { value: $schema },\n      'verificationType': { value: settings.verificationType },\n      'required': { value: settings.required },\n      'definition': { value: settings.definition },\n      'key': { value: settings.key },\n      'value': { value: settings.value },\n      'advance': { value: advance },\n      'deadvance': { value: deadvance },\n      'unadvance': { value: unadvance },\n      'valid': {\n        writable: true,\n        get valid() { return valid },\n        set valid($valid) { Object.defineProperty(this, 'valid', { value: $valid }); }\n      },\n      'report': { configurable: true, get() {\n        const _report = report.bind(this);\n        Object.defineProperty(this, 'report', { value: _report });\n        return _report\n      } },\n    });\n  }\n}\n\nconst Messages = {\n  'true': ($verification) => `${$verification.pass}`,\n  'false': ($verification) => `${$verification.pass}`,\n};\nclass Validator extends EventTarget {\n  constructor($definition = {}, $schema) {\n    super();\n    const definition = Object.freeze(\n      Object.assign({ messages: Messages }, $definition)\n    );\n    Object.defineProperties(this, {\n      'definition': { value: definition },\n      'schema': { value: $schema },\n      'type': { value: definition.type },\n      'messages': { value: definition.messages },\n      'validate': { configurable: true, get() {\n        function validate($key, $value, $source, $target) {\n          const { definition, messages, type } = this;\n          let verification = new Verification({\n            type: type,\n            key: $key,\n            value: definition.value,\n            messages: assign$3({}, messages, definition.messages),\n          });\n          const validation = definition.validate(...arguments);\n          if(typeof validation === 'object') {\n            verification.validation = validation;\n            verification.pass = validation.valid;\n          }\n          else { verification.pass = validation; }\n          return verification\n        }\n        const boundValidate = validate.bind(this);\n        Object.defineProperty(this, 'validate', {\n          value: boundValidate\n        });\n        return boundValidate\n      } },\n    });\n  }\n}\n\nclass RequiredValidator extends Validator {\n  constructor($definition, $schema) {\n    super(Object.assign({}, $definition, {\n      type: 'required',\n      validate: ($key, $value, $source, $target) => {\n        const { requiredProperties, requiredPropertiesSize, type } = $schema;\n        const corequiredProperties = Object.assign({}, requiredProperties);\n        let corequiredPropertiesSize = requiredPropertiesSize;\n        Object.assign(typedObjectLiteral$1(type), $source, $target);\n        this.definition;\n        let pass;\n        if(!requiredPropertiesSize) { pass = true; }\n        else {\n          if(Object.hasOwn(corequiredProperties, $key)) {\n            delete corequiredProperties[$key];\n            corequiredPropertiesSize--;\n          }\n          if(corequiredPropertiesSize) {\n            const coschema = new Schema(corequiredProperties, {\n              path: $schema.path,\n              parent: $schema.parent,\n            });\n            const comodel = Object.assign({}, $target, $source);\n            const covalidation = coschema.validate(comodel);\n            pass = covalidation.valid;\n          }\n        }\n        return pass\n      }\n    }), $schema);\n  }\n}\n\nconst { ObjectKeys, TypeKeys } = index;\nclass TypeValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign({}, $definition, {\n      type: 'type',\n      validate: ($key, $value, $source, $target) => {\n        let pass;\n        const definition = this.definition;\n        let typeOfDefinitionValue = typeOf$1(definition.value);\n        if(typeOfDefinitionValue === 'function') {\n          typeOfDefinitionValue = typeOf$1(definition.value());\n        }\n        else if(definition.value instanceof Schema) {\n          typeOfDefinitionValue = definition.value.type;\n        }\n        else {\n          typeOfDefinitionValue = typeOf$1(definition.value);\n        }\n        if(TypeKeys.includes(typeOfDefinitionValue)) {\n          const typeOfValue = typeOf$1($value);\n          if(typeOfValue === 'undefined') { pass = false; }\n          else if(typeOfDefinitionValue === 'undefined') { pass = true; }\n          else if(definition.value instanceof Schema) {\n            const validation = definition.value.validate($value, $source);\n            pass = validation;\n          }\n          else { pass = (typeOfDefinitionValue === typeOfValue); }\n        }\n        else { pass = false; }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass RangeValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'range',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(typeof $value !== 'number') { pass = false; }\n        else {\n          const { min, max } = definition;\n          let validMin, validMax;\n          if(min !== undefined) { validMin = ($value >= min.value); }\n          else { validMin = true; }\n          if(max !== undefined) { validMax = ($value <= max.value); }\n          else { validMax = true; }\n          if(validMin && validMax) { pass = true; }\n          else { pass = false;}\n        }\n        return pass\n      }\n    }), $schema);\n  }\n}\n\nclass LengthValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'length',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(typeof $value !== 'string') { pass = false; }\n        else {\n          const { min, max } = definition;\n          let validMin, validMax;\n          if(min !== undefined) {\n            validMin = ($value.length >= min.value);\n          }\n          else { validMin = true; }\n          if(max !== undefined) {\n            validMax = ($value.length <= max.value);\n          }\n          else { validMax = true; }\n          if(validMin && validMax) { pass = true; }          \n          else { pass = false;}\n        }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass EnumValidator extends Validator {\n  constructor($definition = {}, $schema) {\n    super(Object.assign($definition, {\n      type: 'enum',\n      validate: ($key, $value) => {\n        const definition = this.definition;\n        let pass;\n        if(![\n          'string', 'number', 'boolean'\n        ].includes(typeof $value)) { pass = false;}\n        else {\n          const enumeration = definition.value;\n          pass = enumeration.includes($value);\n        }\n        return pass\n      },\n    }), $schema);\n  }\n}\n\nclass MatchValidator extends Validator {\n  constructor($settings = {}, $schema) {\n    super(Object.assign($settings, {\n      type: 'match',\n      validate: ($key, $value) => {\n        const definition = this.settings;\n        let pass;\n        if(![\n          'string', 'number', 'boolean'\n        ].includes(typeof $value)) { pass = false;}\n        else {\n          const match = definition;\n          (match.value.exec($value) !== null);\n        }\n        return pass ? true : false\n      },\n    }), $schema);\n  }\n}\n\nvar Options$1 = (...$options) => Object.assign({\n  required: false,\n  verificationType: 'all', \n  // verificationType: 'one',\n  strict: false,\n  properties: {\n    type: 'type',\n    value: 'value',\n  },\n}, ...$options);\n\nclass Schema extends EventTarget {\n  constructor($properties = {}, $options = {}) {\n    super();\n    Object.defineProperties(this, {\n      'options': { value: Options$1($options) },\n      'type': { value: typeOf$1($properties) },\n      'parent': { configurable: true, get() {\n        const { options } = this;\n        const parent = (options.parent) ? options.parent : null;\n        Object.defineProperty(this, 'parent', { value: parent });\n        return parent\n      } },\n      'root': { configurable: true, get() {\n        let root = this;\n        iterateParents: \n        while(root) {\n          if([undefined, null].includes(root.parent)) { break iterateParents }\n          root = root.parent;\n        }\n        return root\n      } },\n      'key': { configurable: true, get() {\n        const { path } = this;\n        const key = (path) ? path.split('.').pop() : null;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'path': { configurable: true, get() {\n        const { options } = this;\n        const path = (options.path)\n          ? String(options.path)\n          : null;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'required': { configurable: true, get() {\n        const required = this.options.required;\n        Object.defineProperty(this, 'required', { value: required });\n        return required\n      } },\n      'requiredProperties': { configurable: true, get() {\n        const requiredProperties = typedObjectLiteral$1(this.type);\n        for(const [$propertyKey, $propertyDefinition] of Object.entries(this.target)) {\n          if($propertyDefinition.required?.value === true) {\n            requiredProperties[$propertyKey] = $propertyDefinition;\n          }\n        }\n        Object.defineProperty(this, 'requiredProperties', { value: Object.freeze(requiredProperties) });\n        return requiredProperties\n      } },\n      'requiredPropertiesSize': { configurable: true, get() {\n        const requiredPropertiesSize = Object.keys(this.requiredProperties).length;\n        Object.defineProperty(this, 'requiredPropertiesSize', { value: requiredPropertiesSize });\n        return requiredPropertiesSize\n      } },\n      'verificationType': { configurable: true, get() {\n        const verificationType = this.options.verificationType;\n        Object.defineProperty(this, 'verificationType', { value: verificationType });\n        return verificationType\n      } },\n      'target': { configurable: true, get() {\n        let properties;\n        const type = this.type;\n        if(type === 'array') { properties = $properties.slice(0, 1); }\n        else if(type === 'object') { properties = $properties; }\n        const target = parseProperties(properties, this);\n        Object.defineProperty(this, 'target', { value: target });\n        return target\n      } },\n      'validate': { value: function(...$arguments) {\n        let { $sourceName, $source, $target } = parseValidateArguments(...$arguments);\n        $target = $target || typedObjectLiteral$1($source);\n        const { target, path, required, type, verificationType } = this;\n        let validation = new Validation({\n          required, verificationType,\n          definition: target,\n          key: $sourceName, \n          value: $source,\n        }, this);\n        const sourceProperties = Object.entries($source);\n        let sourcePropertyIndex = 0;\n        while(sourcePropertyIndex < sourceProperties.length) {\n          const [$sourceKey, $sourceValue] = sourceProperties[sourcePropertyIndex];\n          const propertyValidation = this.validateProperty($sourceKey, $sourceValue, $source, $target);\n          if(propertyValidation.valid === true) { validation.advance.push(propertyValidation); } \n          else if(propertyValidation.valid === false) { validation.deadvance.push(propertyValidation); } \n          else if(propertyValidation.valid === undefined) { validation.unadvance.push(propertyValidation );}\n          sourcePropertyIndex++;\n        }\n        if(validation.advance.length) { validation.valid = true; }\n        else if(validation.deadvance.length) { validation.valid = false; }\n        else if(validation.unadvance.length) { validation.valid = undefined; }\n        else { validation.valid = true; }\n        return validation\n      } },\n      'validateProperty': { value: function() {\n        const { $key, $value, $source, $target } = parseValidatePropertyArguments(...arguments);\n        const { target, path, required, schema, type, verificationType } = this;\n        let propertyDefinition;\n        if(type === 'array') { propertyDefinition = target[0]; }\n        else if(type === 'object') { propertyDefinition = target[$key]; }\n        const propertyValidation = new Validation({\n          required,\n          verificationType,\n          definition: propertyDefinition,\n          key: $key,\n          value: $value,\n        }, this);\n        if(propertyDefinition === undefined) {\n          const verification = new Verification({\n            type: null,\n            definition: null,\n            key: $key,\n            value: $value,\n          }, this);\n          verification.pass = false;\n          propertyValidation.unadvance.push(verification);\n        }\n        else {\n          iteratePropertyDefinitionValidators:\n          for(const [$validatorIndex, $validator] of Object.entries(propertyDefinition.validators)) {\n            const verification = $validator.validate($key, $value, $source, $target);\n            if(verification.pass === true) { propertyValidation.advance.push(verification); }\n            else if(verification.pass === false) { propertyValidation.deadvance.push(verification); }\n            else if(verification.pass === undefined) { propertyValidation.unadvance.push(verification); }\n            if(this.verificationType === 'one' && propertyValidation.deadvance.length) {\n              break iteratePropertyDefinitionValidators\n            }\n          }\n        }\n        if(propertyValidation.deadvance.length) { propertyValidation.valid = false; }\n        else if(propertyValidation.advance.length) { propertyValidation.valid = true; }\n        else if(propertyValidation.unadvance.length) { propertyValidation.valid = false; }\n        return propertyValidation\n      } },\n    });\n  }\n}\nfunction parseValidateArguments(...$arguments) {\n  let $sourceName, $source, $target;\n  if($arguments.length === 1) {\n    $sourceName = null; $source = $arguments.shift(); $target = null;\n  }\n  else if($arguments.length === 2) {\n    if(['number', 'string'].includes(typeof $arguments[0])) {\n      $sourceName = $arguments.shift(); $source = $arguments.shift(); $target = null;\n    }\n    else if($arguments[0] && typeof $arguments[0] === 'object') {\n      $sourceName = null; $source = $arguments.shift(); $target = $arguments.shift();\n    }\n  }\n  else if($arguments.length === 3) {\n    if(['number', 'string'].includes(typeof $arguments[0])) {\n      $sourceName = $arguments.shift(); $source = $arguments.shift(); $target = $arguments.shift();\n    }\n  }\n  return { $sourceName, $source, $target }\n}\nfunction parseValidatePropertyArguments(...$arguments) {\n  let [$key, $value, $source, $target] = $arguments;\n  return { $key, $value, $source, $target }\n}\nfunction parseProperties($properties, $schema) {\n  const properties = typedObjectLiteral$1($properties);\n  if(_isPropertyDefinition($properties, $schema)) { return $properties }\n  for(const [\n    $propertyKey, $propertyValue\n  ] of Object.entries($properties)) {\n    let propertyDefinition = {};\n    typeOf$1($propertyValue);\n    const isPropertyDefinition = _isPropertyDefinition($propertyValue, $schema);\n    if(index.TypeValues.includes($propertyValue)) {\n      Object.assign(propertyDefinition, { type: { value: $propertyValue } });\n    }\n    else if(index.TypeKeys.includes($propertyValue)) {\n      Object.assign(propertyDefinition, { type: { value: index.Types[$propertyValue] } });\n    }\n    else if(!isPropertyDefinition) {\n      const subpropertyPath = ($schema.path) ? [$schema.path, $propertyKey].join('.') : $propertyKey;\n      Object.assign(propertyDefinition, {\n        type: { type: 'type', value: new Schema($propertyValue, Object.assign({}, $schema.options, {\n          parent: $schema,\n          path: subpropertyPath\n        })) }\n      });\n    }\n    else if(isPropertyDefinition) {\n      for(const [$propertyValidatorName, $propertyValidator] of Object.entries($propertyValue)) {\n        const isValidatorDefinition = _isValidatorDefinition($propertyValidator, $schema);\n        if(!isValidatorDefinition) {\n          let propertyValidator;\n          if($propertyValidatorName === 'type') {\n            if($propertyValidator && typeof $propertyValidator === 'object') {\n              const subpropertyPath = ($schema.path) ? [$schema.path, $propertyKey].join('.') : $propertyKey;\n              propertyValidator = new Schema($propertyValidator, Object.assign({}, $schema.options, {\n                parent: $schema, \n                path: subpropertyPath,\n              }));\n            }\n            else {\n              propertyValidator = $propertyValidator;\n            }\n          }\n          else {\n            propertyValidator = $propertyValidator;\n          }\n          propertyDefinition[$propertyValidatorName] = {\n            type: $propertyValidatorName, value: propertyValidator\n          };\n        }\n        else if(isValidatorDefinition) {\n          propertyDefinition[$propertyValidatorName] = $propertyValidator;\n        }\n      }\n    }\n    propertyDefinition.validators = [];\n    properties[$propertyKey] = propertyDefinition;\n    const validators = new Map();\n    validators.set('type', Object.assign({}, {\n      type: 'type', validator: TypeValidator, value: propertyDefinition.type.value\n    }));\n    validators.set('required', Object.assign({}, {\n      type: 'required', validator: RequiredValidator, value: propertyDefinition.required?.value || false\n    }));\n    if(propertyDefinition.range) { validators.set('range', Object.assign({}, propertyDefinition.range, {\n      type: 'range', validator: RangeValidator\n    })); }\n    else if(propertyDefinition.min || propertyDefinition.max) { validators.set('range', Object.assign({}, {\n      type: 'range', min: propertyDefinition.min, max: propertyDefinition.max, validator: RangeValidator\n    })); }\n    if(propertyDefinition.length) { validators.set('length', Object.assign({}, propertyDefinition.length, {\n      type: 'length', validator: LengthValidator\n    })); }\n    else if(propertyDefinition.minLength || propertyDefinition.maxLength) { validators.set('length', Object.assign({}, {\n      type: 'length', min: propertyDefinition.minLength, max: maxLength, validator: LengthValidator\n    })); }\n    if(propertyDefinition.enum) { validators.set('enum', Object.assign({}, propertyDefinition.enum, {\n      type: 'enum', validator: EnumValidator\n    })); }\n    if(propertyDefinition.match) { validators.set('match', Object.assign({}, propertyDefinition.match, {\n      type: 'match', validator: MatchValidator\n    })); }\n    delete propertyDefinition.min;\n    delete propertyDefinition.max;\n    delete propertyDefinition.minLength;\n    delete propertyDefinition.maxLength;\n    for(const [\n      $validatorName, $validatorSettings\n    ] of validators.entries()) {\n      const ValidatorClass = $validatorSettings.validator;\n      propertyDefinition[$validatorName] = $validatorSettings;\n      propertyDefinition.validators.push(new ValidatorClass($validatorSettings, $schema));\n    }\n  }\n  return properties\n}\nfunction _isPropertyDefinition($object, $schema) {\n  if(!$object || $object instanceof Schema) { return false }\n  const typeKey = $schema.options.properties.type;\n  return Object.hasOwn($object, typeKey)\n}\nfunction _isValidatorDefinition($object, $schema) {\n  if(!$object) { return false }\n  const valueKey = $schema.options.properties.value;\n  return Object.hasOwn($object, valueKey)\n}\n\nvar Options = ($options) => {\n  const Options = assign$3({\n    autoload: false, \n    autosave: false, \n    localStorage: false, \n    path: null, \n    parent: null, \n    enableEvents: false,\n    enableValidation: true, \n    validationEvents: {\n      'validProperty:$key': true,\n      'validProperty': true,\n      'nonvalidProperty:$key': true,\n      'nonvalidProperty': true,\n    },\n    pathkey: true,\n    subpathError: false,\n    assignObject: 'set', \n    assignArray: 'set', \n    methods: {\n      map: {\n        get: {\n          mutatorEvents: {\n            'get': true,\n            'getProperty': true,\n            'getProperty:$key': true,\n          },\n        },\n        set: {\n          recursive: true,\n          mutatorEvents: {\n            'set': true,\n            'setProperty': true,\n            'setProperty:$key': true,\n          },\n        },\n        delete: {\n          mutatorEvents: {\n            'delete': true,\n            'deleteProperty': true,\n            'deleteProperty:$key': true,\n          },\n        },\n      },\n      array: {\n        concat: {\n          mutatorEvents: {\n            'concatElement:$index': true,\n            'concatElement': true,\n            'concat': true,\n          }\n        },\n        copyWithin: {\n          mutatorEvents: {\n            'copyWithinElement:$index': true,\n            'copyWithinElement': true,\n            'copyWithin': true,\n          }\n        },\n        fill: {\n          lengthen: true,\n          mutatorEvents: {\n            'fillElement:$index': true,\n            'fillElement': true,\n            'fill': true,\n          }\n        },\n        pop: {\n          mutatorEvents: { 'pop': true  },\n        },\n        push: {\n          mutatorEvents: {\n            'pushElement:$index': true,\n            'pushElement': true,\n            'push': true,\n          }\n        },\n        reverse: {\n          mutatorEvents: { 'reverse': true  },\n        },\n        shift: {\n          mutatorEvents: { 'shift': true  },\n        },\n        splice: {\n          mutatorEvents: {\n            'spliceDeleteElement:$index': true,\n            'spliceDeleteElement': true,\n            'spliceAddElement:$index': true,\n            'spliceAddElement': true,\n            'splice': true,\n          }\n        },\n        unshift: {\n          mutatorEvents: {\n            'unshiftElement:$index': true,\n            'unshiftElement': true,\n            'unshift': true,\n          }\n        },\n      },\n      object: {\n        assign: {\n          sourceTree: true,\n          mutatorEvents: {\n            'assignSourceProperty:$key': true,\n            'assignSourceProperty': true,\n            'assignSource': true,\n            'assign': true,\n          },\n        },\n        defineProperties: {\n          descriptorTree: true,\n          mutatorEvents: { 'defineProperties': true },\n        },\n        defineProperty: {\n          descriptorTree: true,\n          mutatorEvents: {\n            'defineProperty': true,\n            'defineProperty:$key': true,\n          },\n        },\n        freeze: {\n          recursive: true,\n          mutatorEvents: {\n            'freezeProperty': true,\n            'freeze': true,\n          },\n        },\n        seal: {\n          recursive: true,\n          mutatorEvents: {\n            'sealProperty': true,\n            'seal': true,\n          },\n        },\n      },\n    },\n  }, $options);\n  return Options\n};\n\nclass ModelEvent extends CustomEvent {\n  constructor($type, $settings, $model) {\n    super($type, $settings);\n    Object.defineProperties(this, {\n      'model': { get () { return $model } },\n      'key': { configurable: true, get () {\n        const key = (this.path) ? this.path.split('.').pop() : null;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'change': { configurable: true, get () {\n        const change = $settings.change;\n        Object.defineProperty(this, 'change', { value: change });\n        return change\n      } },\n      'value': { configurable: true, get () {\n        const value = $settings.value;\n        Object.defineProperty(this, 'value', { value: value });\n        return value\n      } },\n      'path': { configurable: true, get () {\n        const path = $settings.path;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'detail': { configurable: true, get () {\n        const detail = $settings.detail;\n        Object.defineProperty(this, 'detail', { value: detail });\n        return detail\n      } },\n    });\n  }\n}\n\nclass Change {\n  #_keyter = false \n  #_preter = false \n  #_anter = false \n  #_conter = false\n  #keyter\n  #preter\n  #anter\n  #conter\n  constructor($settings = {}) {\n    for(const [$key, $value] of Object.entries($settings)) { this[$key] = $value; }\n  }\n  get preter() { return this.#preter }\n  set preter($preter) {\n    if(this.#_preter === true) { return this.#preter }\n    this.#preter = $preter?.valueOf();\n    this.#_preter = true;\n  }\n  get anter() { return this.#anter }\n  set anter($anter) {\n    if(this.#_anter === true) { return this.#anter }\n    this.#anter = $anter?.valueOf();\n    this.#_anter = true;\n  }\n  get conter() {\n    if(\n      this.#_conter === true ||\n      [this.#_preter, this.#_anter].includes(false)\n    ) { return this.#conter }\n    const preter = JSON.stringify(this.preter);\n    const anter = JSON.stringify(this.anter);\n    let conter;\n    if(anter !== preter) { conter = true; }\n    else { conter = false; }\n    this.#conter = conter;\n    this.#_conter = true;\n    return this.#conter\n  }\n}\n\nlet ValidatorEvent$1 = class ValidatorEvent extends CustomEvent {\n  constructor($type, $settings, $model) {\n    super($type);\n    Object.defineProperties(this, {\n      'key': { configurable: true, get () {\n        const key = $settings.key;\n        Object.defineProperty(this, 'key', { value: key });\n        return key\n      } },\n      'path': { configurable: true, get () {\n        const path = ($model.path)\n          ? [$model.path, $settings.key].join('.')\n          : $settings.key;\n        Object.defineProperty(this, 'path', { value: path });\n        return path\n      } },\n      'value': { configurable: true, get () {\n        const value = $settings.value;\n        Object.defineProperty(this, 'value', { value: value, });\n        return value\n      } },\n      'valid': { configurable: true, get () {\n        const valid = $settings.valid;\n        Object.defineProperty(this, 'valid', { value: valid });\n        return valid\n      } },\n    });\n  }\n};\n\nfunction assign$1($model, $options, ...$sources) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'assign';\n  const assignArray = options.assignArray || 'assign';\n  const { path, schema, source, target } = $model;\n  const { enableValidation, mutatorEvents, required, sourceTree, validationEvents } = options;\n  const assignedSources = [];\n  const assignChange = new Change({ preter: $model });\n  for(let $source of $sources) {\n    let assignedSource;\n    const assignSourceChange = new Change({ preter: $model });\n    if(Array.isArray($source)) { assignedSource = []; }\n    else if($source && typeof $source === 'object') { assignedSource = {}; }\n    let validObject;\n    if(enableValidation && schema) {\n      validObject = schema.validate($source, $model.valueOf());\n      validObject.report();\n    }\n    iterateSourceProperties:\n    for(let [$sourceKey, $sourceValue] of Object.entries($source)) {\n      const assignSourcePropertyChange = new Change({ preter: target[$sourceKey] });\n      const assignSourcePropertyKeyChange = new Change({ preter: target[$sourceKey] });\n      if(schema && enableValidation) {\n        const validatorTarget = $model.valueOf();\n        const validatorSource = $source;\n        const validSourceProperty = schema.validateProperty($sourceKey, $sourceValue, validatorSource, validatorTarget);\n        if(validationEvents) {\n          let type, propertyType;\n          if(validSourceProperty.valid) {\n            type = 'validProperty';\n            propertyType = ['validProperty', $sourceKey].join(':');\n          }\n          else {\n            type = 'nonvalidProperty';\n            propertyType = ['nonvalidProperty', $sourceKey].join(':');\n          }\n          for(const $eventType of [type, propertyType]) {\n            $model.dispatchEvent(new ValidatorEvent$1($eventType, validSourceProperty, $model));\n          }\n        }\n        if(!validSourceProperty.valid) { continue iterateSourceProperties }\n      }\n      let sourceValue;\n      if($sourceValue && typeof $sourceValue === 'object') {\n        if($sourceValue instanceof $model.constructor) {\n          sourceValue = $sourceValue.valueOf();\n        }\n        let subschema;\n        if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema?.type === 'object') { subschema = schema.target[$sourceKey].type.value; }\n        else { subschema = null; }\n        const modelPath = (path)\n          ? [path, $sourceKey].join('.')\n          : String($sourceKey);\n        if(sourceTree === false) {\n          const suboptions = assign$3({}, options, {\n            path: modelPath,\n            parent: $model,\n          });\n          sourceValue = new $model.constructor($sourceValue, subschema, suboptions);\n          const assignment = { [$sourceKey]: sourceValue };\n          Object.assign(target, assignment);\n          Object.assign(assignedSource, assignment);\n        }\n        else {\n          if(target[$sourceKey] instanceof $model.constructor) {\n            sourceValue = target[$sourceKey];\n          }\n          else {\n            const subproperties = typedObjectLiteral$1($sourceValue);\n            const suboptions = assign$3({}, options, {\n              path: modelPath,\n              parent: $model,\n            });\n            sourceValue = new $model.constructor(subproperties, subschema, suboptions);\n          }\n          const assignment = { [$sourceKey]: sourceValue };\n          Object.assign(target, assignment);\n          Object.assign(assignedSource, assignment);\n          $model.retroReenableEvents();\n          if(sourceValue.type === 'array') {\n            if(['push', 'unshift'].includes(assignArray)) { sourceValue[assignArray](...$sourceValue); }\n            else { sourceValue[assignArray]($sourceValue); }\n          }\n          else if(sourceValue.type === 'object') { sourceValue[assignObject]($sourceValue); }\n        }\n      }\n      else {\n        sourceValue = $sourceValue;\n        const assignment = { [$sourceKey]: sourceValue };\n        Object.assign(target, assignment);\n        Object.assign(assignedSource, assignment);\n      }\n      if(mutatorEvents) {\n        const modelEventPath = (path) ? [path, $sourceKey].join('.') : String($sourceKey);\n        if(mutatorEvents['assignSourceProperty:$key']) {\n          const type = ['assignSourceProperty', $sourceKey].join(':');\n          assignSourcePropertyKeyChange.anter = target[$sourceKey];\n          $model.dispatchEvent(\n            new ModelEvent(type, {\n              path: modelEventPath,\n              value: sourceValue,\n              change: assignSourcePropertyKeyChange,\n              detail: {\n                source: assignedSource,\n              }\n            }, $model)\n          );\n        }\n        if(mutatorEvents['assignSourceProperty']) {\n          assignSourcePropertyChange.anter = target[$sourceKey];\n          $model.dispatchEvent(\n            new ModelEvent('assignSourceProperty', {\n              path: modelEventPath,\n              value: sourceValue,\n              change: assignSourcePropertyChange,\n              detail: {\n                source: assignedSource,\n              }\n            }, $model)\n          );\n        }\n      }\n    }\n    assignedSources.push(assignedSource);\n    if(mutatorEvents && mutatorEvents['assignSource']) {\n      assignSourceChange.anter = $model;\n      $model.dispatchEvent(\n        new ModelEvent('assignSource', {\n          path,\n          change: assignSourceChange,\n          detail: {\n            source: assignedSource,\n          },\n        }, $model)\n      );\n    }\n  }\n  if(mutatorEvents && mutatorEvents['assign']) {\n    assignChange.anter = $model;\n    $model.dispatchEvent(\n      new ModelEvent('assign', { \n        path,\n        change: assignChange,\n        detail: {\n          sources: assignedSources,\n        },\n      }, $model)\n    );\n  }\n  return $model\n}\n\nfunction defineProperties($model, $options, $propertyDescriptors) {\n  const { path, schema } = $model;\n  let {\n    enableValidation, mutatorEvents, required, \n    validation, validationEvents, validationReport\n  } = $options;\n  const propertyDescriptorEntries = Object.entries($propertyDescriptors);\n  const definePropertiesChange = new Change({ preter: $model });\n  for(const [\n    $propertyKey, $propertyDescriptor\n  ] of propertyDescriptorEntries) {\n    $model.defineProperty($propertyKey, $propertyDescriptor, Object.assign({}, $options, {\n      validation, validationReport\n    }));\n  }\n  if(mutatorEvents && mutatorEvents['defineProperties']) {\n    definePropertiesChange.anter = $model;\n    $model.dispatchEvent(\n      new ModelEvent(\n        'defineProperties',\n        {\n          path,\n          value: $model.valueOf(),\n          detail: {\n            descriptors: $propertyDescriptors,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction defineProperty($model, $options, $propertyKey, $propertyDescriptor) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'defineProperties';\n  const assignArray = options.assignArray || 'defineProperties';\n  const {\n    descriptorTree, enableValidation, mutatorEvents, \n    validation, validationEvents, validationReport\n  } = options;\n  const { target, path, schema } = $model;\n  const propertyValue = $propertyDescriptor.value;\n  const targetPropertyDescriptor = Object.getOwnPropertyDescriptor(target, $propertyKey) || {};\n  const targetPropertyValue = targetPropertyDescriptor.value;\n  const definePropertyChange = new Change({ preter: targetPropertyValue });\n  const definePropertyKeyChange = new Change({ preter: targetPropertyValue });\n  const targetPropertyValueIsModelInstance = targetPropertyValue instanceof $model.constructor;\n  if(schema && enableValidation) {\n    const validProperty = schema.validateProperty(\n      $propertyKey, \n      impandTree(propertyValue, 'value') || propertyValue,\n      {},\n      $model.valueOf()\n    );\n    if(validationEvents) {\n      let type, propertyType;\n      if(validProperty.valid) {\n        type = 'validProperty';\n        propertyType = ['validProperty', $propertyKey].join(':');\n      }\n      else {\n        type = 'nonvalidProperty';\n        propertyType = ['nonvalidProperty', $propertyKey].join(':');\n      }\n      for(const $eventType of [type, propertyType]) {\n        $model.dispatchEvent(new ValidatorEvent$1($eventType, validProperty, $model));\n      }\n    }\n    if(!validProperty.valid) { return $model }\n  }\n  if(propertyValue && typeof propertyValue === 'object') {\n    const modelPath = (path)\n      ? [path, $propertyKey].join('.')\n      : String($propertyKey);\n    if(targetPropertyValueIsModelInstance) {\n      if(descriptorTree === true) {\n        targetPropertyValue.defineProperties($propertyDescriptor);\n      }\n      else {\n        Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n      }\n    }\n    else {\n      let subschema;\n      if(schema) {\n        if(schema.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema.type === 'object') { subschema = schema.target[$propertyKey].type.value; }\n        else { subschema = undefined; }\n      }\n      let subtarget = typedObjectLiteral$1(propertyValue);\n      const suboptions = assign$3({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      const submodel = new $model.constructor(\n        subtarget, subschema, suboptions\n      );\n      if(descriptorTree === true) {\n        target[$propertyKey] = submodel;\n        $model.retroReenableEvents();\n        if(submodel.type === 'array') {\n          if(['push', 'unshift'].includes(assignArray)) { submodel[assignArray](...propertyValue); }\n          else { submodel[assignArray](propertyValue); }\n        }\n        else if(submodel.type === 'object') { submodel[assignObject](propertyValue); }\n      }\n      else if(descriptorTree === false) {\n        Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n      }\n    }\n  }\n  else {\n    Object.defineProperty(target, $propertyKey, $propertyDescriptor);\n  }\n  if(mutatorEvents) {\n    const modelEventPath = (path)\n      ? [path, $propertyKey].join('.')\n      : String($propertyKey);\n    if(mutatorEvents['defineProperty:$key']) {\n      definePropertyKeyChange.anter = target[$propertyKey];\n      const type = ['defineProperty', $propertyKey].join(':');\n      $model.dispatchEvent(\n        new ModelEvent(type, {\n          path: modelEventPath,\n          value: propertyValue,\n          change: definePropertyKeyChange,\n          detail: {\n            prop: $propertyKey,\n            descriptor: $propertyDescriptor,\n          },\n        }, $model\n      ));\n    }\n    if(mutatorEvents['defineProperty']) {\n      definePropertyChange.anter = target[$propertyKey];\n      $model.dispatchEvent(\n        new ModelEvent('defineProperty', {\n          path: modelEventPath,\n          value: propertyValue,\n          change: definePropertyChange,\n          detail: {\n            prop: $propertyKey,\n            descriptor: $propertyDescriptor,\n          },\n        }, $model\n      ));\n    }\n  }\n  return $model\n}\n\nfunction freeze($model, $options) {\n  const { recursive, mutatorEvents } = $options;\n  const { target } = $model;\n  if(recursive === true) {\n    for(const [\n      $propertyKey, $propertyValue\n    ] of Object.entries(target)) {\n      if($propertyValue instanceof $model.constructor) {\n        $propertyValue.freeze();\n        if(mutatorEvents && mutatorEvents['freezeProperty']) {\n          $model.dispatchEvent(\n            new ModelEvent(\n              'freezeProperty',\n              { path: $propertyValue.path },\n              $model\n            )\n          );\n        }\n      }\n    }\n  }\n  Object.freeze(target);\n  if(mutatorEvents && mutatorEvents['freeze']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'freeze',\n        { path: $model.path },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction seal($model, $options) {\n  const { recursive, mutatorEvents } = $options;\n  const { target } = $model;\n  if(recursive === true) {\n    for(const [\n      $propertyKey, $propertyValue\n    ] of Object.entries(target)) {\n      if($propertyValue instanceof $model.constructor) {\n        $propertyValue.seal();\n        if(mutatorEvents && mutatorEvents['sealProperty']) {\n          $model.dispatchEvent(\n            new ModelEvent(\n              'sealProperty',\n              { path: $propertyValue.path },\n              $model\n            )\n          );\n        }\n      }\n    }\n  }\n  Object.seal(target);\n  if(mutatorEvents && mutatorEvents['seal']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'seal',\n        { path: $model.path },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nvar ObjectProperty = {\n  assign: assign$1,\n  defineProperties,\n  defineProperty,\n  freeze,\n  seal,\n};\n\nfunction concat($model, $options) {\n  const { target, path, schema } = $model;\n  const { enableValidation, mutatorEvents, source, validationEvents } = $options;\n  const $arguments = [].concat(...arguments);\n  let valueIndex = target.length;\n  const values = [];\n  let targetConcat = [...Array.from(target)];\n  let model;\n  iterateValues: \n  for(let $value of $arguments) {\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$1(validatorTarget);\n      const validValue = schema.validateProperty(valueIndex, $subvalue, validatorSource, validatorTarget);\n      if(schema &&validationEvents) {\n        let type, propertyType;\n        if(validValue.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', valueIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', valueIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validValue, $model));\n        }\n      }\n      if(!validValue.valid) { valueIndex++; continue iterateValues }\n    }\n    const modelPath = (path)\n      ? [path, valueIndex].join('.')\n      : String(valueIndex);\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      let subschema = schema?.target[0].type.value || null;\n      const submodel = typedObjectLiteral$1($value);\n      let value = new $model.constructor(submodel, subschema, {\n        path: modelPath,\n        parent: $model,\n      });\n      value.concat($value);\n      values[valueIndex] = value;\n    }\n    else {\n      values[valueIndex] = $value;\n    }\n    targetConcat = Array.prototype.concat.call(targetConcat, values[valueIndex]);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, valueIndex].join('.')\n        : String(valueIndex);\n      if(mutatorEvents['concatElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('concatElement', {\n            path: modelEventPath,\n            value: values[valueIndex],\n            detail: {\n              valueIndex,\n              value: values[valueIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['concatElement:$index']) {\n        $model.dispatchEvent(\n          new ModelEvent('concatElement', {\n            path: modelEventPath,\n            value: values[valueIndex],\n            detail: {\n              valueIndex,\n              value: values[valueIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    valueIndex++;\n  }\n  model = new $model.constructor(targetConcat, schema, $model.options);\n  if(mutatorEvents && mutatorEvents['concat']) {\n    $model.dispatchEvent(\n      new ModelEvent('concat', {\n        path,\n        detail: {\n          values: model,\n        },\n      }, $model)\n    );\n  }\n  return model\n}\n\nfunction copyWithin($model, $options) {\n  const { target, path } = $model;\n  const { enableValidation, validationEvents, mutatorEvents } = $options;\n  const copyTarget = (\n    arguments[0] >= 0\n  ) ? arguments[0]\n    : target.length = arguments[0];\n  const start = (\n    arguments[1] >= 0\n  ) ? arguments[1]\n    : target.length + arguments[1];\n  const end = (\n    arguments[2] === undefined\n  ) ? target.length\n    : (\n    arguments[2] >= 0\n  ) ? arguments[2]\n    : target.length + arguments[2];\n  const copiedItems = [];\n  let copyIndex = start;\n  let targetIndex = copyTarget;\n  while(copyIndex < end) {\n    const copyItem = target[copyIndex];\n    copiedItems.push(copyItem);\n    Array.prototype.copyWithin.call(\n      target,\n      targetIndex,\n      copyIndex,\n      copyIndex + 1\n    );\n    $model.retroReenableEvents();\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, copyIndex].join('.')\n        : String(copyIndex);\n      if(mutatorEvents['copyWithinElement']) {\n        $model.dispatchEvent(\n          new ModelEvent(\n            'copyWithinElement',\n            {\n              path: modelEventPath,\n              value: copyItem,\n              detail: {\n                target: targetIndex,\n                start: copyIndex,\n                end: copyIndex + 1,\n                item: copyItem,\n              },\n            },\n            $model\n          )\n        );\n      }\n      if(mutatorEvents['copyWithinElement:$index']) {\n        const type  = ['copyWithinElement', copyIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(\n            type,\n            {\n              path: modelEventPath,\n              value: copyItem,\n              detail: {\n                target: targetIndex,\n                start: copyIndex,\n                end: copyIndex + 1,\n                item: copyItem,\n              },\n            },\n            $model\n          )\n        );\n      }\n    }\n    copyIndex++;\n    targetIndex++;\n  }\n  // Array Copy Within Event\n  if(mutatorEvents && mutatorEvents['copyWithin']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'copyWithin',\n        {\n          path,\n          detail: {\n            target: copyTarget,\n            start: start,\n            end: end,\n            items: copiedItems,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction fill($model, $options, ...$arguments) {\n  const options = Object.assign({}, $options);\n  const { target, path, schema } = $model;\n  const assignObject = options.assignObject;\n  const assignArray = options.assignArray || assignObject;\n  const { enableValidation, lengthen, mutatorEvents, validationEvents } = options;\n  const filled = [];\n  let $start;\n  if(typeof $arguments[1] === 'number') {\n    $start = ($arguments[1] >= 0)\n      ? $arguments[1]\n      : target.length + $arguments[1];\n  }\n  else { $start = 0; }\n  let $end;\n  if(typeof $arguments[2] === 'number') {\n    $end = ($arguments[2] >= 0)\n      ? $arguments[2]\n      : target.length + $arguments[2];\n  } else { $end = target.length; }\n  if(lengthen && target.length < $end) { target.length = $end; }\n  let fillIndex = $start;\n  iterateFillIndexes: \n  while(\n    fillIndex < target.length &&\n    fillIndex < $end\n  ) {\n    if(schema && enableValidation) {\n      let validValue = schema.validate(validValue, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        if(validValue.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', fillIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', fillIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validValue, $model));\n        }\n      }\n      if(!validValue.valid) { continue iterateFillIndexes }\n    }\n    const modelPath = (path)\n      ? [path, fillIndex].join('.')\n      : String(fillIndex);\n    let $value = $arguments[0];\n    let value;\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral$1($value);\n      const suboptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      value = new $model.constructor(subproperties, subschema, suboptions);\n    }\n    Array.prototype.fill.call(target, value, fillIndex, fillIndex + 1);\n    $model.retroReenableEvents();\n    if(value.type === 'array') {\n      if(['push', 'unshift'].includes(assignArray)) { value[assignArray](...$value); }\n      else { value[assignArray]($value); }\n    }\n    else if(value.type === 'object') { value[assignObject]($value); }\n    filled.push(value);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, fillIndex].join('.')\n        : String(fillIndex);\n      if(mutatorEvents['fillElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('fillElement', {\n            path: modelEventPath, \n            value: value,\n            detail: {\n              start: fillIndex,\n              end: fillIndex + 1,\n              value,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['fillElement:$index']) {\n        const type = ['fillElement', fillIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            detail: {\n              start: fillIndex,\n              end: fillIndex + 1,\n              value,\n            },\n          }, $model)\n        );\n      }\n    }\n    fillIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['fill']) {\n    $model.dispatchEvent(\n      new ModelEvent('fill', {\n        path,\n        detail: {\n          start: $start,\n          end: $end,\n          filled,\n        },\n      },\n      $model)\n    );\n  }\n  return $model\n}\n\nfunction pop($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  const popElement = Array.prototype.pop.call(target);\n  const popElementIndex = target.length - 1;\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['pop']) {\n    const modelEventPath = (path)\n      ? [path, popElementIndex].join('.')\n      : String(popElementIndex);\n      $model.dispatchEvent(\n      new ModelEvent(\n        'pop',\n        {\n          path: modelEventPath,\n          value: popElement,\n          detail: {\n            elementIndex: popElementIndex,\n            element: popElement,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return popElement\n}\n\nfunction push($model, $options, ...$elements) {\n  const options = Object.assign({}, $options);\n  const assignArray = 'push';\n  const assignObject = options.assignObject;\n  const { enableValidation, mutatorEvents, source, validationEvents } = options;\n  const { target, path, schema } = $model;\n  const elements = [];\n  let elementsIndex = 0;\n  for(let $element of $elements) {\n    let element;\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$1(validatorTarget);\n      const validElement = schema.validateProperty(elementsIndex, $element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validElement.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', elementsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', elementsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validElement, $model));\n        }\n      }\n      if(!validElement.valid) { return target.length }\n    }\n    const modelPath = (path)\n      ? [path, elementsIndex].join('.')\n      : String(elementsIndex);\n    if($element && typeof $element === 'object') {\n      $element = ($element instanceof $model.constructor) ? $element.valueOf() : $element;\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral$1(typeOf$1($element));\n      const submodelOptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      element = new $model.constructor(subproperties, subschema, submodelOptions);\n      Array.prototype.push.call(target, element);\n      $model.retroReenableEvents();\n      if(element.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { element[assignArray](...$element); }\n        else { element[assignArray]($element); }\n      }\n      else if(element.type === 'object') { element[assignObject]($element); }\n    }\n    else {\n      element = $element;\n      Array.prototype.push.call(target, element);\n    }\n    elements.push(element);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, elementsIndex].join('.')\n        : String(elementsIndex);\n      if(mutatorEvents['pushElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('pushElement', {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['pushElement:$index']) {\n        const type = ['pushElement', elementsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    elementsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['push']) {\n    $model.dispatchEvent(\n      new ModelEvent('push', {\n        path,\n        detail: {\n          elements,\n        },\n      }, $model)\n    );\n  }\n  return target.length\n}\n\nfunction reverse($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  Array.prototype.reverse.call(target, ...arguments);\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['reverse']) {\n    $model.dispatchEvent(\n      new ModelEvent(\n        'reverse',\n        {\n          path,\n          detail: {\n            reference: target\n          },\n        },\n        $model\n      )\n    );\n  }\n  return $model\n}\n\nfunction shift($model, $options) {\n  const { mutatorEvents } = $options;\n  const { target, path } = $model;\n  const shiftElement = Array.prototype.shift.call(target);\n  const shiftElementIndex = 0;\n  $model.retroReenableEvents();\n  if(mutatorEvents && mutatorEvents['shift']) {\n    const modelEventPath = (path)\n      ? [path, shiftElementIndex].join('.')\n      : String(shiftElementIndex);\n    $model.dispatchEvent(\n      new ModelEvent(\n        'shift',\n        {\n          path: modelEventPath,\n          value: shiftElement,\n          detail: {\n            elementIndex: shiftElementIndex,\n            element: shiftElement,\n          },\n        },\n        $model\n      )\n    );\n  }\n  return shiftElement\n}\n\nfunction splice($model, $options) {\n  const options = Object.assign({}, $options);\n  const assignObject = options.assignObject;\n  const assignArray = options.assignArray || assignObject;\n  const { mutatorEvents, source } = options;\n  const { target, path, schema } = $model;\n  const { enableValidation, validationEvents } = options;\n  const $arguments = [...arguments];\n  const $start = ($arguments[0] >= 0)\n    ? $arguments[0]\n    : target.length + $arguments[0];\n  const $deleteCount = ($arguments[1] <= 0)\n    ? 0\n    : (\n      $arguments[1] === undefined ||\n      $start + $arguments[1] >= target.length\n    ) ? target.length - $start\n      : $arguments[1];\n  const $addItems = $arguments.slice(2);\n  const addCount = $addItems.length;\n  const deleteItems = [];\n  let deleteItemsIndex = 0;\n  while(deleteItemsIndex < $deleteCount) {\n    const deleteItem = Array.prototype.splice.call(target, $start, 1)[0];\n    deleteItems.push(deleteItem);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, deleteItemsIndex].join('.')\n        : String(deleteItemsIndex);\n      if(mutatorEvents['spliceDeleteElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('spliceDeleteElement', {\n            path: modelEventPath,\n            value: deleteItem,\n            detail: {\n              index: $start + deleteItemsIndex,\n              deleteIndex: deleteItemsIndex,\n              deleteItem: deleteItem,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['spliceDeleteElement:$index']) {\n        const type = ['spliceDeleteElement', deleteItemsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: deleteItem,\n            detail: {\n              index: $start + deleteItemsIndex,\n              deleteIndex: deleteItemsIndex,\n              deleteItem: deleteItem,\n            },\n          }, $model)\n        );\n      }\n    }\n    deleteItemsIndex++;\n  }\n  let addItemsIndex = 0;\n  spliceAdd: \n  while(addItemsIndex < addCount) {\n    let addItem = $addItems[addItemsIndex];\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$1(validatorTarget);\n      const validAddItem = schema.validateProperty(elementIndex, element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validAddItem.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', addItemsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', addItemsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validAddItem, $model));\n        }\n      }\n      if(!validAddItem.valid) { addItemsIndex++; continue spliceAdd }\n    }\n    const modelPath = (path)\n      ? [path, addItemsIndex].join('.')\n      : String(addItemsIndex);\n    let startIndex = $start + addItemsIndex;\n    if(addItem && typeof addItem === 'object') {\n      if(addItem instanceof $model.constructor) { addItem = addItem.valueOf(); }\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral$1(addItem);\n      const suboptions = assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      addItem = new $model.constructor(subproperties, subschema, suboptions);\n      Array.prototype.splice.call(target, startIndex, 0, addItem);\n      $model.retroReenableEvents();\n      if(addItem.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { addItem[assignArray](...$value); }\n        else { addItem[assignArray]($value); }\n      }\n      else if(addItem.type === 'object') { addItem[assignObject]($value); }\n    }\n    else {\n      Array.prototype.splice.call(target, startIndex, 0, addItem);\n    }\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, addItemsIndex].join('.')\n        : String(addItemsIndex);\n      if(mutatorEvents['spliceAddElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('spliceAddElement', {\n            path: modelEventPath,\n            value: addItem,\n            detail: {\n              index: $start + addItemsIndex,\n              addIndex: addItemsIndex,\n              addItem: addItem,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['spliceAddElement:$index']) {\n        const type = ['spliceAddElement', addItemsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: addItem,\n            detail: {\n              index: $start + addItemsIndex,\n              addIndex: addItemsIndex,\n              addItem: addItem,\n            },\n          }, $model)\n        );\n      }\n    }\n    addItemsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['splice']) {\n    $model.dispatchEvent(\n      new ModelEvent('splice', {\n        path,\n        detail: {\n          $start,\n          deleted: deleteItems,\n          added: $addItems,\n          length: target.length,\n        },\n      },\n      $model)\n    );\n  }\n  return deleteItems\n}\n\nfunction unshift($model, $options, ...$elements) {\n  const options = Object.assign({}, $options);\n  const assignArray = 'unshift';\n  const assignObject = options.assignObject;\n  const { enableValidation, mutatorEvents, source, validationEvents } = options;\n  const { target, path, schema } = $model;\n  const elements = [];\n  let elementsIndex = 0;\n  for(let $element of $elements) {\n    let element;\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$1(validatorTarget);\n      const validElement = schema.validateProperty(elementsIndex, $element, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validElement.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', elementsIndex].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', elementsIndex].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent($eventType, validElement, $model));\n        }\n      }\n      if(!validElement.valid) { return target.length }\n    }\n    const modelPath = (path)\n      ? [path, elementsIndex].join('.')\n      : String(elementsIndex);\n    if($element && typeof $element === 'object') {\n      $element = ($element instanceof $model.constructor) ? $element.valueOf() : $element;\n      const subschema = schema?.target[0].type.value || null;\n      const subproperties = typedObjectLiteral$1(typeOf$1($element));\n      const submodelOptions = Object.assign({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      element = new $model.constructor(subproperties, subschema, submodelOptions);\n      Array.prototype.unshift.call(target, element);\n      $model.retroReenableEvents();\n      if(element.type === 'array') { element[assignArray](...$element); }\n      else if(element.type === 'object') { element[assignObject]($element); }\n    }\n    else {\n      element = $element;\n      Array.prototype.unshift.call(target, element);\n    }\n    elements.unshift(element);\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, elementsIndex].join('.')\n        : String(elementsIndex);\n      if(mutatorEvents['unshiftElement']) {\n        $model.dispatchEvent(\n          new ModelEvent('unshiftElement', {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['unshiftElement:$index']) {\n        const type = ['unshiftElement', elementsIndex].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath,\n            value: elements[elementsIndex],\n            detail: {\n              elementsIndex,\n              element: elements[elementsIndex],\n            },\n          }, $model)\n        );\n      }\n    }\n    elementsIndex++;\n  }\n  if(mutatorEvents && mutatorEvents['unshift']) {\n    $model.dispatchEvent(\n      new ModelEvent('unshift', {\n        path,\n        detail: {\n          elements,\n        },\n      }, $model)\n    );\n  }\n  return target.length\n}\n\nvar ArrayProperty = {\n  concat: concat,\n  copyWithin: copyWithin,\n  fill: fill,\n  pop: pop,\n  push: push,\n  reverse: reverse,\n  shift: shift,\n  splice: splice,\n  unshift: unshift,\n};\n\nfunction getContent($model, $options) {\n  const { path } = $model;\n  const { mutatorEvents } = $options;\n  if(mutatorEvents && mutatorEvents['get']) {\n    $model.dispatchEvent(\n      new ModelEvent('get', {\n        path,\n        value: $model.valueOf(),\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nfunction getContentProperty($model, $options, $path) {\n  const { target, path } = $model;\n  const { mutatorEvents, pathkey, subpathError } = $options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue = target[propertyKey];\n    if(subpaths.length) {\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      return propertyValue.get(subpaths.join('.'), $options)\n    }\n    if(mutatorEvents) {\n      if(mutatorEvents['getProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('getProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['getProperty:$key']) {\n        const type = ['getProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n  else if(pathkey === false) {\n    const propertyValue = target[propertyKey];\n    return propertyValue\n  }\n}\n\nfunction getProperty($model, $options, ...$arguments) {\n  let getProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 2) { assign$3(options, $arguments[1]); }\n    getProperty = getContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 1) { assign$3(options, $arguments[0]); }\n    getProperty = getContent($model, options, ...$arguments);\n  }\n  return getProperty\n}\n\nfunction setContent($model, $options, $properties) {\n  const { path, schema } = $model;\n  let { enableValidation, mutatorEvents, required, validationEvents  } = $options;\n  for(const [$propertyKey, $propertyValue] of Object.entries($properties)) {\n    $model.set($propertyKey, $propertyValue, Object.assign($options, {\n      source: $properties,\n    }));\n  }\n  if(mutatorEvents && mutatorEvents['set']) {\n    $model.dispatchEvent(\n      new ModelEvent('set', {\n        path,\n        value: $model.valueOf(),\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nfunction setContentProperty($model, $options, $path, $value) {\n  const options = Object.assign({}, $options);\n  const assignObject = 'set';\n  const assignArray = options.assignArray || 'set';\n  const { target, path, schema } = $model;\n  const {\n    enableValidation, mutatorEvents, pathkey, \n    recursive, subpathError, \n    validationEvents, source, \n  } = options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue;\n    const typeOfPropertyValue = typeOf$1($value);\n    const modelPath = (path)\n      ? [path, propertyKey].join('.')\n      : String(propertyKey);\n    if(subpaths.length) {\n      if(recursive && target[propertyKey] === undefined) {\n        let subschema;\n        if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n        else if(schema?.type === 'object') { subschema = schema.target[propertyKey].type.value; }\n        else { subschema = undefined; }\n        let submodel;\n        if(typeOfPropertyValue === 'array') { submodel = []; }\n        else if(typeOfPropertyValue === 'object') { submodel = {}; }\n        else {\n          if(isNaN(Number(propertyKey))) { submodel = {}; }\n          else { submodel = []; }\n        }\n        const submodelOptions = assign$3({}, options, {\n          path: modelPath,\n          parent: $model,\n        });\n        propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      }\n      else {\n        propertyValue = target[propertyKey];\n      }\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject](subpaths.join('.'), $value, options); }\n      return propertyValue\n    }\n    if(schema && enableValidation) {\n      const validatorTarget = $model.valueOf();\n      const validatorSource = source || typedObjectLiteral$1(validatorTarget);\n      const validTargetProp = schema.validateProperty(propertyKey, $value, validatorSource, validatorTarget);\n      if(validationEvents) {\n        let type, propertyType;\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(new ValidatorEvent$1($eventType, validTargetProp, $model));\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const typeOfPropertyValue= typeOf$1($value);\n      let subschema;\n      let submodel;\n      if(schema?.type === 'array') { subschema = schema.target[0].type.value; }\n      else if(schema?.type === 'object') { subschema = schema.target[propertyKey].type.value; }\n      else { subschema = undefined; }\n      if(typeOfPropertyValue === 'array') { submodel = []; }\n      else if(typeOfPropertyValue === 'object') { submodel = {}; }\n      else {\n        if(isNaN(Number(propertyKey))) { submodel = {}; }\n        else { submodel = []; }\n      }\n      const submodelOptions = assign$3({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      target[propertyKey] = propertyValue;\n      $model.retroReenableEvents();\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject]($value); }\n    }\n    else {\n      propertyValue = $value;\n      target[propertyKey] = propertyValue;\n    }\n    // const _propertyValue = (propertyValue === null) ? null : propertyValue.valueOf()\n    const _propertyValue = propertyValue.valueOf();\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      if(mutatorEvents['setProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('setProperty', {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              key: propertyKey,\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['setProperty:$key']) {\n        const type = ['setProperty', propertyKey].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n  else if(pathkey === false) {\n    let propertyKey = $path;\n    if($value && typeof $value === 'object') {\n      if($value instanceof $model.constructor) { $value = $value.valueOf(); }\n      const typeOfPropertyValue = typeOf$1($value);\n      let subschema;\n      let submodel;\n      if(schema?.type === 'array') {\n        subschema = schema.target[0].type.value;\n      }\n      if(schema?.type === 'object') {\n        subschema = schema.target[propertyKey].type.value;\n      }\n      else { subschema = undefined; }\n      if(typeOfPropertyValue === 'array') { submodel = []; }\n      else if(typeOfPropertyValue === 'object') { submodel = {}; }\n      else {\n        if(isNaN(Number(propertyKey))) { submodel = {}; }\n        else { submodel = []; }\n      }\n      const modelPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      const submodelOptions = assign$3({}, options, {\n        path: modelPath,\n        parent: $model,\n      });\n      propertyValue = new $model.constructor(submodel, subschema, submodelOptions);\n      target[propertyKey] = propertyValue;\n      $model.retroReenableEvents();\n      if(propertyValue.type === 'array') {\n        if(['push', 'unshift'].includes(assignArray)) { propertyValue[assignArray](...$value); }\n        else { propertyValue[assignArray]($value); }\n      }\n      else if(propertyValue.type === 'object') { propertyValue[assignObject]($value); }\n    }\n    else {\n      propertyValue = $value;\n      target[propertyKey] = propertyValue;\n    }\n    if(mutatorEvents) {\n      const modelEventPath = (path)\n        ? [path, propertyKey].join('.')\n        : String(propertyKey);\n      if(mutatorEvents['setProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('setProperty', {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              key: propertyKey,\n              value: _propertyValue,\n            },\n          }, $model)\n        );\n      }\n      if(mutatorEvents['setProperty:$key']) {\n        const type = ['setProperty', propertyKey].join(':');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: modelEventPath, \n            value: _propertyValue,\n            detail: {\n              value: _propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return propertyValue\n  }\n}\n\nfunction setProperty($model, $options, ...$arguments) {\n  let setProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 3) { assign$3(options, $arguments[2]); }\n    setProperty = setContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 2) { assign$3(options, $arguments[1]); }\n    setProperty = setContent($model, options, ...$arguments);\n  }\n  return setProperty\n}\n\nfunction deleteContent($model, $options) {\n  const { target } = $model;\n  for(const [$targetPropertyKey, $targetPropertyValue] of Object.entries(target)) {\n    $model.delete($targetPropertyKey, $options);\n  }\n  const { path } = $model;\n  const { mutatorEvents } = $options;\n  if(mutatorEvents && mutatorEvents['delete']) {\n    $model.dispatchEvent(\n      new ModelEvent('delete', {\n        path,\n        detail: {\n          value: $model.valueOf()\n        }\n      }, $model)\n    );\n  }\n  return $model\n}\n\nfunction deleteContentProperty($model, $options, $path) {\n  const { target, path, schema } = $model;\n  const { mutatorEvents, pathkey, subpathError, enableValidation, validationEvents } = $options;\n  if(pathkey === true) {\n    const subpaths = $path.split(new RegExp(regularExpressions.quotationEscape));\n    const propertyKey = subpaths.shift();\n    let propertyValue = target[propertyKey];\n    if(subpaths.length) {\n      if(subpathError === false && propertyValue === undefined) { return undefined }\n      return propertyValue.delete(subpaths.join('.'), $options)\n    }\n    if(schema && enableValidation) {\n      const differedPropertyProxy = $model.valueOf();\n      delete differedPropertyProxy[propertyKey];\n      const validTargetProp = schema.validate(propertyKey, differedPropertyProxy, {}, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        const validatorEventPath = (path)\n          ? [path, propertyKey].join('.')\n          : String(propertyKey);\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(\n            new ValidatorEvent$1($eventType, Object.assign(validTargetProp, {\n              path: validatorEventPath\n            }), $model)\n          );\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n    if(propertyValue && typeof propertyValue === 'object') {\n      propertyValue.delete($options);\n    }\n    delete target[propertyKey];\n    if(mutatorEvents) {\n      if(mutatorEvents['deleteProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('deleteProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['deleteProperty:$key']) {\n        const type = ['deleteProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            value: propertyValue,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return undefined\n  }\n  else if(pathkey === false) {\n    const propertyKey = $path;\n    const propertyValue = target[propertyKey];\n\n    if(schema && enableValidation) {\n      const differedPropertyProxy = $model.valueOf();\n      delete differedPropertyProxy[propertyKey];\n      const validTargetProp = schema.validate(propertyKey, differedPropertyProxy, $model.valueOf());\n      if(validationEvents) {\n        let type, propertyType;\n        if(validTargetProp.valid) {\n          type = 'validProperty';\n          propertyType = ['validProperty', propertyKey].join(':');\n        }\n        else {\n          type = 'nonvalidProperty';\n          propertyType = ['nonvalidProperty', propertyKey].join(':');\n        }\n        for(const $eventType of [type, propertyType]) {\n          $model.dispatchEvent(\n            new ValidatorEvent$1($eventType, validTargetProp, $model)\n          );\n        }\n      }\n      if(!validTargetProp.valid) { return }\n    }\n  \n    if(propertyValue instanceof $model.constructor) {\n      propertyValue.delete($options);\n    }\n    delete target[propertyKey];\n    if(mutatorEvents) {\n      if(mutatorEvents['deleteProperty']) {\n        $model.dispatchEvent(\n          new ModelEvent('deleteProperty', {\n            path,\n            value: propertyValue,\n            detail: {\n              key: propertyKey,\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n      if(mutatorEvents['deleteProperty:$key']) {\n        const type = ['deleteProperty', propertyKey].join(':');\n        const _path = [path, propertyKey].join('.');\n        $model.dispatchEvent(\n          new ModelEvent(type, {\n            path: _path,\n            value: propertyValue,\n            detail: {\n              value: propertyValue,\n            }\n          }, $model)\n        );\n      }\n    }\n    return undefined\n  }\n}\n\nfunction deleteProperty($model, $options, ...$arguments) {\n  let deleteProperty;\n  const options = $options;\n  if(typeof $arguments[0] === 'string') {\n    if($arguments.length === 2) { assign$3(options, $arguments[1]); }\n    deleteProperty = deleteContentProperty($model, options, ...$arguments);\n  }\n  else {\n    if($arguments.length === 1) { assign$3(options, $arguments[0]); }\n    deleteProperty = deleteContent($model, options, ...$arguments);\n  }\n  return deleteProperty\n}\n\nvar MapProperty = {\n  get: getProperty,\n  set: setProperty,\n  delete: deleteProperty,\n};\n\nconst Defaults = Object.freeze({\n  object: [{\n    keys: ['valueOf'],\n    methodDescriptor: function($methodName, $model) {\n      return { value: function valueOf() { return $model.parse({ type: 'object' }) } }\n    },\n  }, {\n    keys: ['toString'],\n    methodDescriptor: function($methodName, $model) {\n      return { value: function toString($parseSettings = {}) {\n        const replacer = ($parseSettings.replacer !== undefined)\n          ? $parseSettings.replacer : null;\n        const space = ($parseSettings.space !== undefined)\n          ? $parseSettings.space : 0;\n        return $model.parse({ type: 'string', replacer, space })\n      } }\n    }, \n  }, {\n    keys: [\n      'entries', 'fromEntries', 'getOwnPropertyDescriptors', \n      'getOwnPropertyDescriptor', 'getOwnPropertyNames', \n      /* 'getOwnPropertySymbols', */ 'groupBy', 'hasOwn', 'is', \n      'getPrototypeOf', 'isExtensible', 'isFrozen', 'isSealed', \n      'keys', 'preventExtensions', 'values',\n    ],\n    methodDescriptor: function($methodName, $model) {\n      return { value: Object[$methodName].bind(null, $model.valueOf()) }\n    },\n  }, {\n    keys: ['propertyIsEnumerable', 'hasOwnProperty'], \n    methodDescriptor: function($methodName, $model) {\n      return { value: () => $model.parse({ type: 'object' })[$methodName] }\n    },\n  }, {\n    type: 'mutators',\n    keys: Object.keys(ObjectProperty), \n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: ObjectProperty[$methodName].bind(null, $model, $options) }\n    }\n  }],\n  array: [{\n    keys: ['length'], \n    methodDescriptor: function($propertyName, $model, $options) {\n      return {\n        get() { return $model.target.length },\n        set($propertyValue) { $model.target.length = $propertyValue; },\n      }\n    }\n  }, {\n    keys: [\n      'from', 'fromAsync', 'isArray', 'of', \n    ], \n    methodDescriptor: function($methodName, $model) {\n      return { value: Array[$methodName] }\n    }, \n  }, {\n    keys: [\n      'at', 'every', 'filter', 'find', 'findIndex', 'findLast',\n      'findLastIndex', 'flat', 'flatMap', 'forEach', 'includes', \n      'indexOf', 'join', 'lastIndexOf', 'map', 'reduce', 'reduceRight', \n      'slice', 'some', 'sort', 'toReversed',  'toSorted', 'toSpliced', \n      'with', \n    ], \n    methodDescriptor: function($methodName, $model) {\n      return { value: Array.prototype[$methodName].bind(null, $model) }\n    }\n  }, {\n    type: 'mutators',\n    keys: Object.keys(ArrayProperty), \n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: ArrayProperty[$methodName].bind(null, $model, $options) }\n    }\n  }],\n  map: [{\n    type: 'mutators',\n    keys: Object.keys(MapProperty),\n    methodDescriptor: function($methodName, $model, $options) {\n      return { value: MapProperty[$methodName].bind(null, $model, $options) }\n    }\n  }]\n});\nfunction Methods($model) {\n  // Object, Array, Map\n  for(const [$propertyClassName, $propertyClasses] of Object.entries(Defaults)) {\n    for(const $propertyClass of $propertyClasses) {\n      const { keys, methodDescriptor, type } = $propertyClass;\n      for(const $methodName of keys) {\n        if($propertyClassName === 'map' || type === 'mutators') {\n          const modelMethodOptions = structuredClone(\n            $model.options.methods[$propertyClassName][$methodName]\n          );\n          const methodOptions = Object.assign({}, $model.options, modelMethodOptions);\n          delete methodOptions.mutatorEvents;\n          methodOptions.mutatorEvents = modelMethodOptions.mutatorEvents;\n          Object.defineProperty(\n            $model, $methodName, methodDescriptor($methodName, $model, methodOptions)\n          );\n        }\n        else {\n          Object.defineProperty(\n            $model, $methodName, methodDescriptor($methodName,  $model)\n          );\n        }\n      }\n    }\n  }\n  return $model\n}\n\nconst ValidArrayAssigmentMethods = Object.freeze(\n  ['push', 'unshift']\n);\nconst ValidObjectAssigmentMethods = Object.freeze(\n  ['assign', 'defineProperties', 'set']\n);\n\nfunction Assign($model, $properties, $options) {\n  const { type } = $model;\n  const { assignObject, assignArray /*, autoload */ } = $options;\n  if(type === 'array' && ValidArrayAssigmentMethods.includes(assignArray)) {\n    $model[assignArray](...$properties);\n  }\n  else if(type === 'object' && ValidObjectAssigmentMethods.includes(assignObject)) {\n    $model[assignObject]($properties);\n  }\n  return $model\n}\n\nclass Model extends Core {\n  constructor($properties = {}, $schema = null, $options = {}) {\n    super({ propertyDirectory: { accessors: [($target, $property) => {\n      if($property === undefined) { return $target.target }\n      else { return $target.get($property) }\n    }] } });\n    if($properties instanceof Model) { $properties = $properties.valueOf(); }\n    let parent = null;\n    let path = null;\n    try {\n      Object.defineProperty(this, 'mount', { value: function($mount) {\n        const mountParent = $mount.parent;\n        const mountPath = $mount.path;\n        const property = (mountPath) ? mountPath.split('.').pop() : mountPath;\n        if(parent) { parent.unmount(property); }\n        parent = mountParent;\n        path = mountPath;\n      } });\n    }\n    catch($err) { console.error($err); }\n    try {\n      Object.defineProperty(this, 'unmount', { value: function($unmount) {\n        const unmountPath = $unmount.path;\n        delete this[$property];\n      } });\n    }\n    catch($err) { console.error($err); }\n    Object.defineProperties(this, {\n      'options': { configurable: true, get() {\n        const options = Options($options);\n        if(options.events) {\n          this.addEvents(options.events);\n          delete options.events;\n        }\n        if(options.enableEvents) {\n          const typeofEnableEvents = typeof options.enableEvents;\n          if(typeofEnableEvents === 'boolean') { this.enableEvents(); }\n          else if(typeofEnableEvents === 'object') { this.enableEvents(options.enableEvents); }\n        }\n        Object.defineProperty(this, 'options', { value: options });\n        return options\n      } },\n      'parent': { get() { return parent } },\n      'path': { get() { return path } },\n      'key': { get() { return (path) ? path.pop() : path } },\n      'target': { configurable: true, get() {\n        const target = typedObjectLiteral$1($properties);\n        Object.defineProperty(this, 'target', { value: target });\n        return target\n      } },\n      'type': { configurable: true, get() {\n        const type = typeOf$1(this.target);\n        Object.defineProperty(this, 'type', { value: type });\n        return type\n      } },\n      'schema': { configurable: true, get() {\n        const typeOfSchema = typeOf$1($schema);\n        let schema;\n        if(['undefined', 'null'].includes(typeOfSchema)) { schema = null; }\n        else if($schema instanceof Schema) { schema = $schema; }\n        else if(['array', 'object'].includes(typeOfSchema)) { schema = new Schema($schema); }\n        Object.defineProperty(this, 'schema', { value: schema });\n        return schema\n      } },\n    });\n    this.mount({\n      parent: this.options.parent,\n      path: this.options.path\n    });\n    if(localStorage && this.options.localStorage) {\n      Object.defineProperties(this,  {\n        'localStorage': { configurable: true, get() {\n          let _localStorage;\n          let path = [window.location.pathname];\n          if(this.path) { path.push(this.path); }\n          path = path.join('');\n          _localStorage = new LocalStorageRoute(path, this.options.localStorage);\n          Object.defineProperty(this, 'localStorage', { value: _localStorage });\n          return _localStorage\n        } },\n        'save': { value: function save() {\n          return this.localStorage.set(this.valueOf())\n        } },\n        'load': { value: function load() {\n          return this.localStorage.get()\n        } },\n        'unload': { value: function unload() {\n          return this.localStorage.remove()\n        } },\n      });\n    }\n    Methods(this);\n    if(this.options.autoload) {\n      Assign(this, this.load() || $properties, this.options);\n    }\n    else {\n      Assign(this, $properties, this.options);\n    }\n  }\n  retroReenableEvents() {\n    let model = this;\n    while(model) {\n      model.reenableEvents({ enable: true });\n      model = model.parent;\n    }\n    return this\n  }\n  parse($settings = { type: 'object', replacer: null, space: 0 }) {\n    let parsement = typedObjectLiteral$1(this.type);\n    for(const [\n      $propertyDescriptorName, $propertyDescriptor\n    ] of Object.entries(\n      Object.getOwnPropertyDescriptors(this.target))\n    ) {\n      let { enumerable, value, writable, configurable } = $propertyDescriptor;\n      if(value instanceof Model) {\n        Object.defineProperty(parsement, $propertyDescriptorName, {\n          enumerable, value: value.valueOf(), writable, configurable\n        });\n      }\n      else {\n        Object.defineProperty(parsement, $propertyDescriptorName, {\n          enumerable, value, writable, configurable\n        });\n      }\n    }\n    let { type, replacer, space } = $settings;\n    if(type === 'object') { return parsement }\n    else if(type === 'string') { return JSON.stringify(parsement, replacer, space) }\n    else { return undefined }\n  }\n}\n\nexport { Model, Schema, Validation, Validator, Verification };\n//# sourceMappingURL=objecture.js.map\n"],"names":["Primitives","string","String","number","Number","boolean","Boolean","bigint","BigInt","undefined","null","Object","values","Objects","object","array","Array","Types","assign","typeOf","$data","prototype","toString","call","slice","toLowerCase","Options$2","depth","maxDepth","accessors","default","$target","$property","ancestors","propertyDirectory","$object","$options","_propertyDirectory","options","concat","$accessor","bind","accessor","includes","unshift","$key","$value","entries","push","is","subtargets","$subtargetKey","$subtarget","path","join","$sources","$source","$sourcePropertyKey","$sourcePropertyValue","typeOfTargetPropertyValue","typeOfSourcePropertyValue","handleNoCommaBraces","span","length","separatorI","i","rangeStart","substr","rangeEnd","expand","pattern","TypeError","scanning","openingBraces","closingBraces","handledUntil","results","alternatives","char","substring","j","newResults","k","l","unhandledFrom","negate","supportNegation","supportParens","isNegated","escapeRegExpChar","Pattern","source","excludeDot","separator","separatorSplitter","separatorMatcher","wildcard","str","result","escapeRegExpString","requiredSeparator","optionalSeparator","segments","split","support","qMark","star","globstar","brackets","extglobs","Segment","isFirst","isLast","end","EXCLUDE_DOT_PATTERN","add","state","addition","addToUnmatch","unmatch","addToMatch","dotHandled","match","convertSegment","segment","openingBracket","closingBracket","openingParens","closingParens","parensHandledUntil","extglobModifiers","scanningForParens","escapeChar","nextChar","State","modifier_1","pop","indexOf","Error","useUnmatch","convert","isMatch","regexp","sample","test","outmatch","isArray","arguments","regexpPattern","patterns","predicate","mappedValue","flatMap","positiveResults","negativeResults","negatedPattern","convertedPattern","compile","RegExp","flags","fn","EventDefinition","context","enable","nontranssigned","_targets","_assign","_deassign","_transsign","constructor","$settings","$context","this","settings","Settings","deassign","transsign","bindListener","errorLog","methods","addEventListener","$eventDefinition","type","listener","useCapture","on","once","removeEventListener","off","dispatchEvent","$event","emit","$type","$arguments","$settingKey","$settingValue","defineProperties","value","assigned","deassigned","transsigned","configurable","get","listenerTarget","iterateListenerPathKeys","$pathKey","defineProperty","$enable","targets","$targetElement","target","$err","console","error","pretargets","pretargetElement","find","$pretarget","ptargets","targetPaths","scopeKey","targetElement","propertyPathMatcher","$propertyPath","$propertyValue","charAt","$targetPath","$targetValue","propertyDirectorySettings","Core","EventTarget","static","events","enableEvents","propertyDefinitions","getEvents","addEvents","removeEvents","disableEvents","reenableEvents","emitEvents","Settings$1","enumerable","writable","$filterEvents","$filterEvent","iterateEventFilterProperties","$filterEventPropertyKey","$filterEventPropertyValue","eventFilterMatch","$addEvents","$propEvents","$scopeKey","propEvents","$propEventSettings","$propEventListener","propEventSettings","trim","propEvent","expandEvents","$enableEvents","$addEvent","event","settingValue","eventDefinition","$events","eventsIndex","splice","$eventParameters","super","implement","typedObjectLiteral","_typedObjectLiteral","typeOfValue","Settings$5","Options$6","parent","definition","propertyClasses","MVCFrameworkCore","Map","fromEntries","$mount","mountParent","mountPath","property","unmount","$unmount","Options","key","root","iterateParents","retroReenableEvents","core","addPropertyClasses","$this","$addPropertyClasses","iteratePropertyClasses","$addPropertyClass","targetType","name","administer","deadminister","instate","deinstate","$properties","$propertyKey","properties","keys","reverse","removePropertyClasses","$removePropertyClasses","reduce","$propertyClasses","propertyClass","$propertyClass","$removePropertyClass","propertyClassIndex","findIndex","mount","map","addProperties","Primitives$1","PrimitiveKeys","PrimitiveValues","Objects$1","ObjectKeys$1","ObjectValues","Types$1","TypeKeys$1","TypeValues","TypeMethods","index","freeze","__proto__","ObjectKeys","TypeKeys","typeOf$1","typedObjectLiteral$1","regularExpressions","$path","subpaths","subtarget","$subpath","impandTree","typeOfProperty","typeOfSource","$sourceKey","$sourceValue","assign$3","assign$2","Options$1$1","delimiter","frozen","nonenumerable","sealed","getOwnPropertyDescriptor","propertyDescriptor","isFrozen","isSealed","getOwnPropertyDescriptors","propertyDescriptors","$propertyDescriptor","typeCoercion","defineProperty$1","typeOfPropertyValue","propertyValue","isArrayLike","isInteger","iterateSourceKeys","isNaN","defineProperties$1","seal","$propertyDescriptors","Options$1$2","basename","replacers","revivers","JSONMiddlewares","$middlewares","$middleware","LocalStorageRoute","db","localStorage","raw","getItem","model","modelParsement","JSON","parse","modelTypedObjectLiteral","set","setItem","stringify","remove","removeItem","message","pass","messages","$pass","Messages$1","true","$validation","valid","false","report","$format","$prevalidation","prevalidation","schema","validations","advance","deadvance","unadvance","_report","verifications","$verification","validation","reportValue","iterateVerifications","$schema","verificationType","required","$valid","Messages","$definition","validate","boundValidate","verification","Verification","RequiredValidator","Validator","requiredProperties","requiredPropertiesSize","corequiredProperties","corequiredPropertiesSize","hasOwn","coschema","Schema","comodel","TypeValidator","typeOfDefinitionValue","RangeValidator","min","max","validMin","validMax","LengthValidator","EnumValidator","MatchValidator","exec","Options$1","strict","$propertyDefinition","_isPropertyDefinition","propertyDefinition","isPropertyDefinition","$propertyValidatorName","$propertyValidator","isValidatorDefinition","_isValidatorDefinition","propertyValidator","subpropertyPath","validators","validator","range","minLength","maxLength","enum","$validatorName","$validatorSettings","ValidatorClass","parseProperties","$sourceName","shift","parseValidateArguments","Validation","sourceProperties","sourcePropertyIndex","propertyValidation","validateProperty","parseValidatePropertyArguments","iteratePropertyDefinitionValidators","$validatorIndex","$validator","typeKey","valueKey","ModelEvent","CustomEvent","$model","change","detail","Change","_keyter","_preter","_anter","_conter","keyter","preter","anter","conter","$preter","valueOf","$anter","ValidatorEvent$1","ObjectProperty","assignArray","enableValidation","mutatorEvents","sourceTree","validationEvents","assignedSources","assignChange","assignedSource","assignSourceChange","validObject","iterateSourceProperties","assignSourcePropertyChange","assignSourcePropertyKeyChange","validatorTarget","validatorSource","validSourceProperty","propertyType","$eventType","sourceValue","subschema","modelPath","suboptions","assignment","subproperties","modelEventPath","sources","validationReport","propertyDescriptorEntries","definePropertiesChange","descriptors","descriptorTree","targetPropertyValue","definePropertyChange","definePropertyKeyChange","targetPropertyValueIsModelInstance","validProperty","submodel","prop","descriptor","recursive","ArrayProperty","valueIndex","targetConcat","from","iterateValues","validValue","$subvalue","copyWithin","copyTarget","start","copiedItems","copyIndex","targetIndex","copyItem","item","items","fill","assignObject","lengthen","filled","$start","$end","fillIndex","iterateFillIndexes","popElement","popElementIndex","elementIndex","element","$elements","elements","elementsIndex","$element","validElement","submodelOptions","reference","shiftElement","shiftElementIndex","$deleteCount","$addItems","addCount","deleteItems","deleteItemsIndex","deleteItem","deleteIndex","addItemsIndex","spliceAdd","addItem","validAddItem","ValidatorEvent","startIndex","addIndex","deleted","added","MapProperty","getProperty","pathkey","subpathError","propertyKey","_path","getContentProperty","getContent","setProperty","validTargetProp","_propertyValue","setContentProperty","setContent","delete","deleteProperty","differedPropertyProxy","validatorEventPath","deleteContentProperty","$targetPropertyKey","$targetPropertyValue","deleteContent","Defaults","methodDescriptor","$methodName","$parseSettings","replacer","space","$propertyName","ValidArrayAssigmentMethods","ValidObjectAssigmentMethods","Assign","Model","autoload","autosave","nonvalidProperty","concatElement","copyWithinElement","fillElement","pushElement","spliceDeleteElement","spliceAddElement","unshiftElement","assignSourceProperty","assignSource","freezeProperty","sealProperty","typeofEnableEvents","typeOfSchema","_localStorage","window","location","pathname","save","load","unload","$propertyClassName","modelMethodOptions","structuredClone","methodOptions","Methods","parsement","$propertyDescriptorName","TOKENS","attribute","id","class","comma","combinator","universal","TRIM_TOKENS","Set","RECURSIVE_PSEUDO_CLASSES","nthChildRegExp","RECURSIVE_PSEUDO_CLASSES_ARGS","getArgumentPatternByType","replace","gobbleParens","text","offset","nesting","STRING_PATTERN","ESCAPE_PATTERN","tokenize","selector","grammar","replacements","repeat","quote","content","pos","tokens","token","lastIndex","args","before","groups","after","has","tokenizeBy","changedTokens","replacement","tokenOffset","nestTokens","list","t","selectors","temp","left","right","flatten","node","child","ast","argument","childArg","subtree","listOrNode","QuerySelector","method","querySelectors","Combinators","Query","$queryMethod","$queryString","query","queryString","queryTokens","parsel.tokenize","scopeCombinator","scopeQueryString","parsel.stringify","scopeQueryParse","parsel.parse","children","$childIndex","$child","dexter","matches","childQuery","NodeList","Node","View","templates","scope","parentElement","_template","recursiveAssign","eventListeners","enableQuerySelectors","_querySelectors","qs","addQuerySelectors","template","document","createElement","$templateString","disableQuerySelectors","innerHTML","append","$children","forEach","removeChild","clear","querySelector","$queryScope","querySelectorAll","$queryMethods","$selectors","$selectorName","$selector","removeQuerySelectors","render","$models","$template","Events","ok","$response","$requestMethod","response","status","statusCode","eventType","statusText","statusTextMessage","abort","$abortController","abortController","FetchRoute","origin","addMethods","$methods","$methodOptions","abortKey","async","$resourcePath","$resourceOptions","resourceOptions","urlSearchParams","headers","body","priority","pathParameters","URLSearchParams","resource","decodePath","createEvent","AbortController","signal","fetch","then","$fetchSource","clone","catch","pathFragments","resourcePathFragments","decodedPathFragments","pathFragmentsIndex","pathFragment","resourcePathFragment","removeMethods","aborted","$eventTarget","FetchRouter","scheme","domain","port","_authority","_origin","routes","authority","$routes","addRoutes","_routes","$routePath","$routeSettings","removeRoutes","dist","TokenData","encode","encodeURIComponent","DEFAULT_DELIMITER","tokensToFunction","data","missing","decode","decodeURIComponent","pathToRegexp","decoders","NOOP_VALUE","input","m","params","create","decoder","stringifyToken","isSafe","first","rest","ID_START","every","ID_CONTINUE","isNameSafe","isNextNameSafe","DEBUG_URL","SIMPLE_TOKENS","escape","Iter","peek","_peek","next","tryConsume","consume","nextType","encodePath","it","chars","lexer","endType","param","encoders","encodeValue","tokenToFunction","encoder","extras","sensitive","trailing","seq","sequenceToRegExp","init","fork","backtrack","isSafeSegmentParam","Route","_settings","active","$settingVal","$active","RouteEvent","route","LocationRouter","hashpath","windowLocationOrigin","base","routeEntries","setRoute","boundPopstate","popstate","navigate","$method","matchPath","matchRoute","hash","href","routeEventOptions","preterRoute","history","search","enableRoute","getRoute","disableRoute","routeSettings","deleteRoute","routeEntryIndex","iterateMatchEntries","$route","SocketEvent","socket","$socket","isBinary","MessageAdapter","SocketRouter","webSocket","messageAdapters","url","boundMessage","WebSocket","protocol","host","URL","$isBinary","$messageAdapter","messageEvent","$adapter","adapter","send","Instate","ValidClasses","Class","Deinstate","Control","models","views","controls","fetchRouters","locationRouters","Primitives$2","Objects$2","Types$2"],"mappings":"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","x_google_ignoreList":[5,6,17,31]}